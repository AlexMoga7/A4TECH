
#include <a_samp>
#include <a_mysql>
#include <zcmd>
#include <streamer>
#include <foreach>
#include <sscanf2>
#include <fly>
#include <mSelection>
#include <OnPlayerUseVending>
#include <geolocation>
#include <timestamptodate>
#include <timefix>
#include <beaZone>
#include "../modules/functions.pwn"


static const antisqlinjection[][] =
{
    "'", "`", "%s", "%d", "%f"
};

forward DeAMXI(playerid);
public DeAMXI(playerid)
{
 	AntiDeAMX();
	return 1;
}

forward OOCNews(color, string[]);
forward DistanceCheck();
forward PlaceAD(playerid);
forward OnPlayerLogin(playerid, password[]);
forward IsAtGasStation(playerid);
forward IsAtCNN(playerid);
forward Fillup(playerid);
forward IsPlayerInTurf(playerid, turfid);
forward IsAMember(playerid);
forward OnPlayerRegister(playerid, password[]);
forward WhenPlayerLogin(playerid);
forward SendTeamMessage(member, color, string[]);
forward IsACop(playerid);
forward Farmer(playerid);
forward ScadeViata(playerid);
forward vUpdate(vehicleid, type);
forward MySQLCheckCar(carname[]);
forward ShowStats(playerid, targetid);
forward eventlms();
forward FiveSecondsTimer();
forward Reportul(playerid);
forward DrugEffectGone(playerid);
forward Fishing(playerid);
forward restartTimer();
forward SetMower(playerid);
forward WhenAccountCheck(playerid);
forward MySQLCheckAccount(sqlplayersname[]);
forward SetPlayerToTeamColor(playerid);
forward unfreezeint(playerid);
forward QuestChange(playerid);
forward timerbusiness(playerid);
forward timerbusiness2(playerid);
forward offadminduty(playerid);
forward MessageTimer();
forward CheckCar();
forward CheckGas();
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward globalPlayerLoop();
forward Tutorial();
forward TeleportMats();
forward PayDay();
forward IsADmvCar(vehicleid);
forward IsARentCar(vehicleid);
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward IniJobs();
forward IniVehs();
forward IniGroups();
forward IniAssets();
forward IniHouses();
forward IniBusinesses();
forward IniTurfs();
forward IniStock();
forward WeatherChange();
forward KickPublic(playerid);
forward timerlms();
forward lspdbarclose();
forward IniVehicule();


new Float:OldX[MAX_PLAYERS], Float:OldY[MAX_PLAYERS], Float:OldZ[MAX_PLAYERS], Float:NewX[MAX_PLAYERS], Float:NewY[MAX_PLAYERS], Float:NewZ[MAX_PLAYERS];
new
	incarcarestock = -1,
	serveropen,
	startq,
	startlive,
	dataserver1,
	dataserver2,
	dataserver3,
	hourserver,
	minutserver,
    undita,
    Distancee[MAX_PLAYERS],
    LiveOffer[MAX_PLAYERS],
    TalkingLive[MAX_PLAYERS],
    Float:Health[MAX_PLAYERS],
	Float:Armour[MAX_PLAYERS],
    Mobile[MAX_PLAYERS],
    AdvPlayer[MAX_PLAYERS],
    AdvMSG[MAX_PLAYERS][256],
    AdvTimer[MAX_PLAYERS],
    pescuieste[MAX_PLAYERS],
    playerdeath[MAX_PLAYERS],
    usedrugs[MAX_PLAYERS],
    timebiz,
    timebiz2,
    waitwar[15],
    LastText[MAX_PLAYERS][128],
    LastTextTime[MAX_PLAYERS],
    Selectat[1000][MAX_PLAYERS],
    EnterInModShop[MAX_PLAYERS],
    Diceid[MAX_PLAYERS],
	Dicem[MAX_PLAYERS],
    scadehp[MAX_PLAYERS],
    timerfarm[MAX_PLAYERS],
    playerizza[MAX_PLAYERS],
    activpizza[MAX_PLAYERS],
    Refueling[MAX_VEHICLES],
    turfshow[MAX_PLAYERS],
    pUseHat[MAX_PLAYERS],
    farmCar[MAX_VEHICLES],
    fuelmasina[MAX_PLAYERS],
    BuyCar[MAX_PLAYERS],
    farmerc[MAX_PLAYERS],
    PlayerText:TimeLeftWar1[MAX_PLAYERS],
    PlayerText:farmbox[MAX_PLAYERS],
	PlayerText:farmjob[MAX_PLAYERS],
	PlayerText:farmspeedro[MAX_PLAYERS],
	PlayerText:farmspeeden[MAX_PLAYERS],
	PlayerText:farmwantedro[MAX_PLAYERS],
	PlayerText:farmwanteden[MAX_PLAYERS],
	PlayerText:farmtime[MAX_PLAYERS],
	PlayerText:UndercoverText[MAX_PLAYERS],
	LastBiz[MAX_PLAYERS],
	IsPlayerAFK[MAX_PLAYERS],
	Float:PlayerPosii[MAX_PLAYERS][6],
	Float:TeleportDest[MAX_PLAYERS][3],
	Float:PizzaCP[MAX_PLAYERS][3],
	Float:drugposs[MAX_PLAYERS][3],
	EmailId[MAX_PLAYERS][11],
	pizzaprize[MAX_PLAYERS],
	HidePM[MAX_PLAYERS],
	timerreport[MAX_PLAYERS],
	ReportTime[MAX_PLAYERS],
	LastPlayer[MAX_PLAYERS],
	WantedTime[MAX_PLAYERS],
	RobTime[MAX_PLAYERS],
	TransferOffer[MAX_PLAYERS],
	masini = 0, 
	vPersonal[MAX_VEHICLES] = 0,
	Float:PosX[MAX_PLAYERS],
    Float:PosY[MAX_PLAYERS],
    Float:PosZ[MAX_PLAYERS],
    CheckDelay[MAX_PLAYERS],
    pCarMenu[MAX_PLAYERS][100],
    faretimer[MAX_PLAYERS],
	TransferMoney[MAX_PLAYERS];
    








new gunlms1 = 0;
new gunlms2 = 0;
new gunlms3 = 0;
new gunlms4 = 0;
new gunlms5 = 0;
new areape = 0;


new HireCar[MAX_PLAYERS];

new Text3D:areap;
new activeevent;
new lspdbar;
new NewsTick;
new DeelaySystem;

new timer;




new reporttext[MAX_PLAYERS][128];

new requesting[MAX_PLAYERS];



new TaxiDrivers = 0,
	TransportDuty[MAX_PLAYERS],
	TransportMoney[MAX_PLAYERS],
	TransportValue[MAX_PLAYERS];

new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new TaxiCall[MAX_PLAYERS];

new Lock[MAX_PLAYERS];


// ----- Giftbox -----
new Text3D:dynamicgift3DText;
new dynamicgift;
//--------------------


new InHQ[MAX_PLAYERS];
new Specf[MAX_PLAYERS];



new Text:jailstat[MAX_PLAYERS];
new Text:wantedscade[MAX_PLAYERS];










//----------- Textdraw spectator ------------

new Text:info[MAX_PLAYERS];
new Text:viata[MAX_PLAYERS];
new Text:wantedjail[MAX_PLAYERS];
new Text:carinfo[MAX_PLAYERS];
new Text:carspeed[MAX_PLAYERS];

//----------------- Textdraw Speedometer-----

new Text:TextDrawCar[MAX_PLAYERS][10];

//--------------- Textdraw name server-------

new PlayerText:leet[MAX_PLAYERS];
new PlayerText:findplayer[MAX_PLAYERS];
new PlayerText:findplayer2[MAX_PLAYERS];



new PlayerText: DMV1[MAX_PLAYERS];
new PlayerText: DMV2[MAX_PLAYERS];
new PlayerText: Reportss[MAX_PLAYERS];
new PlayerText: taxifare[MAX_PLAYERS];

//--------- Arms ---------
new matsOffer[MAX_PLAYERS];
new matsOffered[MAX_PLAYERS];
new matsmoney[MAX_PLAYERS];
new matsamount[MAX_PLAYERS];

new GunOffer[MAX_PLAYERS];
new GunOffered[MAX_PLAYERS];
new GunPrice[MAX_PLAYERS];
new GunModel[MAX_PLAYERS];

//-----------Drug dealer----------
new drugs[MAX_PLAYERS];
new drugsmoney[MAX_PLAYERS];
new drugsamount[MAX_PLAYERS];
//---------- Mecanic-----
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];




new JucatorCautat[MAX_PLAYERS];
new WatchingTV[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new pUseFind[MAX_PLAYERS];

new pRepairing[MAX_PLAYERS];


new UsingDrugs[MAX_PLAYERS];
new trucker[MAX_PLAYERS];




new pUseGlasses[MAX_PLAYERS];
new pUseFly[MAX_PLAYERS];
new szPlayerName[MAX_PLAYER_NAME];





new glskinlist = mS_INVALID_LISTID;
new skinlist = mS_INVALID_LISTID;
new skinlistPD = mS_INVALID_LISTID;
new skinlistTX = mS_INVALID_LISTID;
new skinlistFBI = mS_INVALID_LISTID;
new skinlistMEDIC = mS_INVALID_LISTID;
new skinlistSI = mS_INVALID_LISTID;
new skinlistHA = mS_INVALID_LISTID;
new skinlistNR = mS_INVALID_LISTID;
new skinlistGrove = mS_INVALID_LISTID;
new skinlistBallas = mS_INVALID_LISTID;



new result[256];
new levelexp = 4;
new FPS2[MAX_PLAYERS] = 0;
new DLlast[MAX_PLAYERS] = 0;
new Radio[MAX_VEHICLES];
new taxiobj[MAX_VEHICLES];
new sirena[MAX_VEHICLES];
new Carspawn[MAX_VEHICLES];


new szLargeString[1024];



new Selected[MAX_PLAYERS][100];

//------------ TOG CHAT -----------
new togc[MAX_PLAYERS];
new toglc[MAX_PLAYERS];
new tognews[MAX_PLAYERS];



//--------------- GMX--------------
new iGMXTimer;
new	iGMXTick;


new iGMXTimer1;
new	iGMXTick1;
//--------------------------------

new CP[MAX_PLAYERS];

enum sel
{
	snume[32],
	srank,
	swarn
};



new Float:spawncardsx[10][0] =
{
	{1098.7302},
	{1062.6042},
	{1062.3147},
	{1098.5912},
	{1078.0133},
	{1077.8834},
	{1062.5496},
	{1083.4640},
	{1062.3911},
	{1062.3655}
};
new Float:spawncardsy[10][0] =
{
	{-1760.9409},
    {-1766.7471},
    {-1749.0757},
    {-1769.7490},
    {-1775.5552},
    {-1754.9686},
    {-1760.9476},
    {-1763.8253},
    {-1737.4000},
    {-1775.6798}
};
new Float:spawncardsz[10][0] =
{
	{13.0777},
	{13.1071},
	{13.1772},
	{13.0748},
	{13.0716},
	{13.1217},
	{13.1306},
	{13.0968},
	{13.2067},
	{13.0712}
};
new Float:rotatecar[10][0] =
{
	{90.1821},
	{89.5269},
	{88.8240},
	{88.4300},
	{89.8237},
	{90.7749},
	{89.1250},
	{270.1322},
	{89.0966},
	{88.4778}
};
/*
new Float:spawnplanex[4][0] =
{
	{2119.0969},
	{2074.8652},
	{2014.0713},
	{1807.4578}
};
new Float:spawnplaney[4][0] =
{
	{-2434.5259},
    {-2401.2039},
    {-2444.2893},
    {-2403.5920}
};
new Float:spawnplanez[4][0] =
{
	{14.0058},
	{14.0068},
	{14.0044},
	{14.0145}
};
new Float:planerotate[4][0] =
{
	{141.8532},
	{180.0020},
	{136.9657},
	{208.1043}
};*/

new MaxSeats[212] =
{
	4,2,2,2,4,4,1,2,2,4,2,2,2,4,2,2,4,2,4,2,4,4,2,2,2,1,4,4,4,2,1,9,1,2,2,1,2,9,4,2,
	4,1,2,2,2,4,1,2,1,6,1,2,1,1,1,2,2,2,4,4,2,2,2,2,2,2,4,4,2,2,4,2,1,1,2,2,1,2,2,4,
	2,1,4,3,1,1,1,4,2,2,4,2,4,1,2,2,2,4,4,2,2,2,2,2,2,2,2,4,2,1,1,2,1,1,2,2,4,2,2,1,
	1,2,2,2,2,2,2,2,2,4,1,1,1,2,2,2,2,0,0,1,4,2,2,2,2,2,4,4,2,2,4,4,2,1,2,2,2,2,2,2,
	4,4,2,2,1,2,4,4,1,0,0,1,1,2,1,2,2,2,2,4,4,2,4,1,1,4,2,2,2,2,6,1,2,2,2,1,4,4,4,2,
	2,2,2,2,4,2,1,1,1,4,1,1
};



new Float:JailSpawns[][] =
{
	{218.9751,108.7607,999.0156,359.6006},
	{218.8141,111.1144,999.0156,359.9766},
	{220.4373,111.5293,999.0156,359.9766},
	{214.6812,108.6292,999.0156,0.1644},
	{214.8869,111.3385,999.0156,355.6524},
	{216.6205,111.6397,999.0156,355.6524},
	{226.7919,108.6684,999.0156,356.9918},
	{226.9420,111.2079,999.0156,356.6158},
	{228.7401,110.9786,999.0156,5.6399}
};

new Float:RandomPos[][] =
{
	{1415.6598,-1698.2258,13.5395,237.2349},
	{1411.4744,-1706.7155,13.5395,237.9869},
	{1408.1848,-1706.4330,13.5469,264.6832},
	{1417.7161,-1696.6395,13.5469,263.7432},
	{1420.0690,-1689.1018,13.5469,268.6313}
};

new Float:SkinCaps[311][6] =
{
	{0.135928, 0.002891, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 0
	{0.136207, 0.006102, -0.013858, 0.612963, 0.000000, 0.000000}, //Skin - 1
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                 //Skin - 2
	{0.167425, -0.006185, -0.004779, 0.612963, 0.000000, 0.000000}, //Skin - 3
	{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 4
	{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 5
	{0.155785, 0.005998, -0.014326, 0.000000, 0.000000, 347.188201},//Skin - 6
	{0.157787, 0.012994, -0.014590, 0.612963, 0.000000, 0.000000},  //Skin - 7
	{0.131067, -0.013737, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 8
	{0.118922, -0.015322, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 9
	{0.125779, -0.001459, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 10
	{0.129249, -0.014101, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 11
	{0.139572, -0.003642, -0.002145, 0.612963, 0.000000, 10.335063}, //Skin - 12
	{0.161076, -0.015624, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 13
	{0.112204, -0.023196, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 14
	{0.104552, -0.015122, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 15
	{0.150166, -0.008718, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 16
	{0.149627, 0.002943, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 17
	{0.105319, 0.003517, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 18
	{0.153609, -0.003207, -0.007717, 0.000000, 0.000000, 357.608825},//Skin - 19
	{0.143831, 0.001813, -0.010588, 0.000000, 0.000000, 357.608825}, //Skin - 20
	{0.154598, -0.003549, -0.013304, 0.000000, 0.000000, 0.000000},  //Skin - 21
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 22
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   //Skin - 23
	{0.127352, 0.009877, -0.006845, 0.726156, 359.666778, 348.825012},//Skin - 24
	{0.124666, -0.029373, -0.006845, 0.726156, 359.666778, 329.940704},//Skin - 25
	{0.152029, -0.018331, -0.003139, 0.000000, 358.344604, 348.467559}, //Skin - 26
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 27
	{0.128768, 0.041474, -0.007667, 0.726156, 359.666778, 355.429199}, //Skin - 28
	{0.166457, -0.006228, -0.012669, 0.726156, 359.666778, 354.612152},//Skin - 29
	{0.155160, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 30
	{0.096077, -0.023233, -0.009101, 0.726156, 359.666778, 343.094055},//Skin - 31
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 32
	{0.094003, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 33
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 34
	{0.155565, 0.014400, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 35
	{0.156485, 0.013641, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 36
	{0.144815, 0.013641, -0.009374, 0.726156, 359.666778, 350.562103}, //Skin - 37
	{0.113347, -0.006682, -0.009374, 0.726156, 359.666778, 350.562103},//Skin - 38
	{0.147231, -0.014448, -0.004786, 0.726156, 359.666778, 357.303253},//Skin - 39
	{0.133873, -0.019703, -0.000058, 0.000000, 358.344604, 348.467559},//Skin - 40
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 41
	{0.082446, 0.004202, -0.004786, 0.726156, 359.666778, 357.303253}, //Skin - 42
	{0.104901, 0.004013, -0.004786, 0.726156, 359.666778, 342.983184}, //Skin - 43
	{0.116172, -0.001954, -0.004786, 0.726156, 359.666778, 357.100677},//Skin - 44
	{0.153321, 0.025744, -0.008666, 0.726156, 359.666778, 10.704365},  //Skin - 45
	{0.160556, 0.007781, -0.010438, 0.726156, 359.666778, 0.991972},   //Skin - 46
	{0.179010, -0.035613, -0.010438, 0.726156, 359.666778, 347.956573},//Skin - 47
	{0.123363, 0.008694, -0.010438, 0.726156, 359.666778, 347.956573}, //Skin - 48
	{0.167061, -0.037899, -0.010438, 0.726156, 359.666778, 347.775817},//Skin - 49
	{0.164100, -0.040816, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 50
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 51
	{0.129040, 0.016069, -0.010438, 0.726156, 359.666778, 347.775817}, //Skin - 52
	{0.129040, 0.016069, -0.006084, 0.726156, 359.666778, 347.775817}, //Skin - 53
	{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 54
	{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 55
	{0.174539, -0.000662, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 56
	{0.109382, -0.002955, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 57
	{0.152276, -0.029331, -0.008357, 0.726156, 359.666778, 332.070648},//Skin - 58
	{0.129599, -0.019172, -0.012204, 0.726156, 359.666778, 332.070648},//Skin - 59
	{0.138485, -0.012405, -0.011567, 357.030151, 358.344604, 342.811187},//Skin - 60
	{0.130350, 0.000897, -0.000747, 0.726156, 359.666778, 332.070648}, //Skin - 61
	{0.150659, -0.035485, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 62
	{0.119340, -0.006483, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 63
	{0.110634, 0.009623, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 64
	{0.133055, -0.000092, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 65
	{0.129061, -0.006499, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 66
	{0.127292, 0.010318, -0.006299, 0.726156, 359.666778, 341.617431}, //Skin - 67
	{0.138791, -0.025311, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 68
	{0.148132, 0.003970, -0.002304, 0.726156, 359.666778, 340.120025}, //Skin - 69
	{0.129753, 0.006469, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 70
	{0.125663, 0.015428, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 71
	{0.125663, 0.015428, -0.009030, 0.726156, 359.666778, 354.029815}, //Skin - 72
	{0.117674, 0.014567, -0.011567, 357.030151, 358.344604, 342.811187}, //Skin - 73
	{0.135729, -0.018656, -0.013554, 0.000000, 0.000000, 337.893737},  //Skin - 74
	{0.141888, -0.042810, -0.006206, 0.000000, 0.000000, 337.893737},  //Skin - 75
	{0.134968, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 76
	{0.124348, -0.017813, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 77
	{0.124348, 0.000583, -0.006206, 0.000000, 0.000000, 346.786865},   //Skin - 78
	{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 79
	{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 81
	{0.167928, 0.031601, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 82
	{0.159998, 0.023540, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 83
	{0.169630, 0.019315, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 84
	{0.163052, -0.039735, -0.006206, 0.000000, 0.000000, 341.169891},  //Skin - 85
	{0.122285, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 86
	{0.144811, -0.007521, -0.014207, 0.000000, 0.000000, 341.169891},  //Skin - 87
	{0.129932, -0.007521, -0.007289, 0.000000, 0.000000, 341.169891},  //Skin - 88
	{0.151147, -0.038608, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 89
	{0.147416, -0.031632, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 90
	{0.157728, -0.009677, -0.009597, 0.000000, 0.000000, 0.934848},    //Skin - 91
	{0.136577, -0.015592, -0.009597, 0.000000, 0.000000, 341.013824},  //Skin - 92
	{0.143821, 0.000631, -0.008385, 0.000000, 0.000000, 358.808868},   //Skin - 93
	{0.100521, 0.003151, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 94
	{0.122833, -0.006031, -0.007624, 0.000000, 0.000000, 358.808868},  //Skin - 95
	{0.145296, 0.003959, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 96
	{0.141658, 0.016474, -0.007624, 0.000000, 0.000000, 9.683902},     //Skin - 97
	{0.145276, -0.002846, -0.007624, 0.000000, 0.000000, 340.239593},  //Skin - 98
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 99
	{0.161745, -0.010244, -0.007624, 0.000000, 0.000000, 351.499267}, //Skin - 100
	{0.151006, -0.030994, -0.005366, 0.000000, 0.000000, 340.428894}, //Skin - 101
	{0.147111, 0.003794, -0.012433, 0.000000, 0.000000, 358.069244},  //Skin - 102
	{0.154213, -0.052348, -0.003511, 356.299316, 0.000000, 336.751647},//Skin - 103
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 104
	{0.153814, -0.039614, -0.006756, 356.299316, 0.000000, 336.930084},//Skin - 105
	{0.153638, -0.039614, -0.013630, 356.299316, 0.000000, 336.930084},//Skin - 106
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 107
	{0.140473, -0.026201, -0.000469, 0.390689, 355.405181, 335.554260},//Skin - 108
	{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 109
	{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 110
	{0.134860, 0.001485, -0.010145, 0.390689, 358.632415, 347.730010},//Skin - 111
	{0.124823, 0.001485, -0.009402, 0.390689, 358.632415, 347.730010},//Skin - 112
	{0.157999, -0.012039, -0.006082, 0.390689, 358.632415, 347.730010},//Skin - 113
	{0.144906, -0.005139, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 114
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 116
	{0.152829, -0.009735, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 117
	{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 118
	{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 119
	{0.144202, -0.021273, -0.005915, 357.030151, 358.344604, 342.811187},//Skin - 120
	{0.154275, -0.037484, -0.009654, 0.390689, 358.632415, 337.676666},//Skin - 121
	{0.155674, -0.015613, -0.004339, 0.390689, 358.632415, 350.571228},//Skin - 122
	{0.136433, -0.019181, -0.004339, 0.390689, 358.632415, 340.261840},//Skin - 123
	{0.163258, -0.032386, -0.013128, 0.390689, 358.632415, 340.261840},//Skin - 124
	{0.153242, -0.029651, -0.002434, 0.390689, 358.632415, 333.367614},//Skin - 125
	{0.127978, -0.001961, -0.008867, 0.390689, 358.632415, 347.279052},//Skin - 126
	{0.160856, -0.025356, -0.004428, 0.390689, 358.632415, 347.279052},//Skin - 127
	{0.150266, -0.009032, -0.006781, 0.390689, 358.632415, 347.223754},//Skin - 128
	{0.158060, 0.022907, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 129
	{0.111739, 0.012673, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 130
	{0.091638, -0.011600, -0.008686, 0.390689, 358.632415, 336.674468},//Skin - 131
	{0.125788, 0.000635, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 132
	{0.031324, -0.014154, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 133
	{0.142321, 0.015417, -0.005915, 0.243191, 358.632415, 350.329559},//Skin - 133
	{0.128780, -0.030750, 0.006687, 173.184967, 358.632415, 27.422966},//Skin - 134
	{0.115882, -0.004931, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 135
	{0.127531, -0.008916, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 136
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 137
	{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 138
	{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 139
	{0.147315, 0.001708, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 140
	{0.144315, -0.013571, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 141
	{0.144315, -0.002729, -0.010357, 358.837646, 358.632415, 354.390045},//Skin - 142
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 143
	{0.177516, -0.070868, -0.009114, 358.837646, 358.632415, 331.679321},//Skin - 144
	{0.139578, -0.008750, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 145
	{0.139578, -0.014406, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 146
	{0.115592, -0.010754, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 147
	{0.150735, -0.000459, -0.004405, 358.837646, 358.632415, 9.362450},//Skin - 148
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 149
	{0.149485, -0.008709, -0.006168, 358.837646, 358.632415, 2.276566},//Skin - 150
	{0.168162, -0.009708, -0.012160, 359.504821, 4.442328, 355.348114},//Skin - 151
	{0.156369, -0.024521, -0.012160, 359.504821, 0.415596, 355.348114},//Skin - 152
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 153
	{0.119297, -0.016080, -0.010776, 359.504821, 0.415596, 341.522827},//Skin - 154
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 155
	{0.172295, -0.065549, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 156
	{0.126340, -0.030764, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 157
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 158
	{0.154280, 0.002166, -0.010436, 359.504821, 0.415596, 357.792144},//Skin - 159
	{0.121469, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 160
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 161
	{0.139495, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 162
	{0.113212, -0.005302, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 163
	{0.120208, 0.003533, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 164
	{0.135111, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 165
	{0.122118, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 166
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 167
	{0.125229, 0.005091, -0.013084, 359.504821, 0.415596, 352.954559},//Skin - 168
	{0.153451, -0.018119, -0.013276, 359.504821, 0.415596, 358.219451},//Skin - 169
	{0.141395, -0.009131, -0.013276, 359.504821, 0.415596, 347.866027},//Skin - 170
	{0.157631, -0.028753, -0.006450, 359.504821, 0.415596, 339.935516},//Skin - 171
	{0.152687, -0.027057, -0.007731, 359.504821, 0.415596, 344.054809},//Skin - 172
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 173
	{0.165146, 0.015393, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 174
	{0.162788, -0.019696, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 175
	{0.157728, -0.027188, -0.012891, 359.504821, 0.415596, 345.804748},//Skin - 176
	{0.187507, 0.010472, -0.012891, 359.504821, 0.415596, 12.315887},//Skin - 177
	{0.153901, -0.027720, -0.007884, 359.504821, 0.415596, 344.553527},//Skin - 178
	{0.137445, -0.009757, -0.012987, 359.504821, 0.415596, 344.553527},//Skin - 179
	{0.173041, -0.006323, -0.012987, 359.504821, 0.415596, 3.267552},//Skin - 180
	{0.143467, 0.016897, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 181
	{0.114480, 0.006202, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 182
	{0.114480, 0.008813, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 183
	{0.128122, -0.012152, -0.013144, 359.504821, 0.415596, 336.326538},//Skin - 184
	{0.156171, 0.007268, -0.013144, 359.504821, 0.415596, 10.805211},//Skin - 185
	{0.156409, -0.034861, -0.007927, 359.504821, 0.415596, 336.978668},//Skin - 186
	{0.118034, -0.024105, -0.002947, 359.504821, 0.415596, 336.978668},//Skin - 187
	{0.128686, -0.029632, -0.002947, 358.201873, 0.415596, 329.325042},//Skin - 188
	{0.172639, -0.026749, -0.012705, 358.201873, 0.415596, 349.092590},//Skin - 189
	{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 190
	{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 191
	{0.178725, -0.010278, -0.007224, 358.201873, 0.415596, 354.053405},//Skin - 192
	{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 193
	{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 194
	{0.176089, -0.032526, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 195
	{0.118042, 0.007002, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 196
	{0.143840, -0.042712, -0.007556, 358.201873, 0.415596, 341.814422},//Skin - 197
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 198
	{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 199
	{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 200
	{0.140799, 0.025145, -0.009754, 358.201873, 0.415596, 5.040688},//Skin - 201
	{0.140799, 0.015851, -0.009754, 358.201873, 0.415596, 349.796478},//Skin - 202
	{0.140799, -0.004372, -0.013685, 358.201873, 0.415596, 349.796478},//Skin - 203
	{0.154274, 0.006245, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 204
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 205
	{0.154274, 0.016669, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 206
	{0.106604, 0.004805, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 207
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 208
	{0.148378, -0.003807, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 209
	{0.113854, 0.001969, -0.011840, 358.201873, 0.415596, 343.826263},//Skin - 210
	{0.149539, -0.028623, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 211
	{0.104024, -0.014549, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 212
	{0.145820, -0.029160, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 213
	{0.148646, -0.008515, -0.009621, 358.201873, 0.415596, 1.360260},//Skin - 214
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 215
	{0.148646, -0.005935, -0.004058, 358.201873, 0.415596, 1.360260},//Skin - 216
	{0.148646, -0.015611, -0.004058, 358.201873, 0.415596, 340.374938},//Skin - 217
	{0.133952, -0.030138, -0.009880, 358.201873, 0.415596, 340.374938},//Skin - 218
	{0.140503, -0.033425, -0.005693, 358.201873, 0.415596, 340.374938},//Skin - 219
	{0.114608, 0.009020, -0.009135, 358.201873, 0.415596, 352.932006},//Skin - 220
	{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 221
	{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 222
	{0.179908, -0.010779, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 223
	{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 224
	{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 225
	{0.134990, -0.034685, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 226
	{0.151760, 0.002680, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 227
	{0.167410, -0.028664, -0.009135, 358.201873, 0.415596, 340.250427},//Skin - 228
	{0.127699, -0.015571, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 229
	{0.100555, -0.007753, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 230
	{0.126940, 0.016886, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 231
	{0.132949, -0.017515, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 232
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 233
	{0.125714, -0.021018, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 234
	{0.084982, -0.009809, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 235
	{0.114669, -0.005190, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 236
	{0.123264, -0.014946, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 237
	{0.146656, -0.023925, -0.006749, 358.201873, 0.415596, 334.356781},//Skin - 238
	{0.133769, -0.007373, -0.006749, 358.201873, 0.415596, 343.105895},//Skin - 239
	{0.165378, -0.020173, -0.005869, 358.201873, 0.415596, 348.352233},//Skin - 240
	{0.143331, -0.133577, -0.011472, 358.201873, 0.415596, 312.328857},//Skin - 241
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 242
	{0.098602, 0.002084, -0.011472, 358.201873, 0.415596, 348.195495},//Skin - 243
	{0.124240, -0.011682, -0.006423, 358.201873, 0.415596, 341.555999},//Skin - 244
	{0.158155, -0.044311, -0.005439, 358.201873, 0.415596, 336.024902},//Skin - 245
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 246
	{0.164307, -0.040974, -0.006797, 358.201873, 0.415596, 337.067047},//Skin - 247
	{0.191578, -0.040435, -0.010605, 358.201873, 0.415596, 340.908203},//Skin - 248
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 249
	{0.135208, -0.015243, -0.011916, 358.201873, 0.415596, 340.908203},//Skin - 250
	{0.134272, -0.027377, -0.006035, 358.201873, 0.415596, 333.416168},//Skin - 251
	{0.158813, -0.038977, -0.006035, 358.201873, 0.415596, 336.013519},//Skin - 252
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 253
	{0.165106, -0.048880, -0.009719, 358.201873, 0.415596, 331.050933},//Skin - 254
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 255
	{0.142586, 0.020829, -0.008549, 358.201873, 0.415596, 2.765411},//Skin - 256
	{0.134018, -0.024462, -0.008549, 358.201873, 0.415596, 339.642486},//Skin - 257
	{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 258
	{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 259
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 260
	{0.134710, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 261
	{0.111691, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 262
	{0.146077, -0.005195, -0.008114, 358.188964, 0.415596, 3.866970},//Skin - 263
	{0.135858, -0.157842, -0.008114, 358.188964, 0.415596, 314.852203},//Skin - 264
	{0.127964, 0.000132, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 265
	{0.127964, -0.002646, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 266
	{0.132329, -0.014261, -0.007384, 1.504234, 0.415596, 352.699432},//Skin - 267
	{0.145951, -0.043442, -0.010053, 1.504234, 0.415596, 320.469390},//Skin - 268
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 269
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 270
	{0.141851, -0.034538, -0.010580, 1.504234, 0.415596, 340.349456},//Skin - 271
	{0.136473, -0.057088, -0.008204, 1.504234, 0.415596, 318.134399},//Skin - 272
	{0.140332, -0.013011, -0.004432, 354.106964, 357.498840, 352.802062}, //Skin - 273
	{0.124270, 0.003252, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 274
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 275
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 276
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 277
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 278
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 279
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 280
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 281
	{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 282
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 283
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 284
	{0.189940, -0.004297, 0.001481, 354.106964, 357.498840, 352.802062},//Skin - 285
	{0.140515, 0.001933, -0.008204, 1.504234, 0.415596, 346.744995}, //Skin - 286
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 287
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 288
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 289
	{0.128789, -0.014062, -0.007850, 1.504234, 0.415596, 340.341094},//Skin - 290
	{0.158929, -0.027358, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 291
	{0.113309, -0.012434, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 292
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 293
	{0.158438, -0.023891, -0.007217, 1.504234, 0.415596, 337.298858},//Skin - 294
	{0.145000, -0.032054, -0.007217, 1.504234, 0.415596, 336.385589},//Skin - 295
	{0.139293, -0.069554, -0.010619, 1.504234, 0.415596, 320.746429},//Skin - 296
	{0.148252, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 297
	{0.126423, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 298
	{0.144949, -0.040691, -0.008599, 1.504234, 0.415596, 320.729705},//Skin - 299
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 300
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 301
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 302
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 303
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 304
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 305
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 306
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 307
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 308
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 309
	{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 310
	{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995} //Skin - 311
};



new Float:checkexam[14][14] =
{
	{1236.6323,-1854.7965,13.0378},
	{1396.5500,-1874.5923,13.0327},
	{1572.1008,-1874.7234,13.0409},
	{1691.8621,-1830.9281,13.0333},
	{1691.7277,-1610.9292,13.0338},
	{1548.9536,-1590.3494,13.0364},
	{1325.3683,-1570.7399,13.0264},
	{1358.8798,-1421.0969,13.0398},
	{1194.1945,-1419.8597,12.8807},
	{1193.9509,-1558.5522,13.0351},
	{1282.1521,-1574.2933,13.0335},
	{1295.7421,-1679.4843,13.0395},
	{1295.2048,-1834.3239,13.0346},
	{1233.1279,-1832.0760,13.0481}
};
new Float:mechanicTOW[12][12] =
{
	{2179.2898,-2315.9121,13.6626},
	{2801.4822,-1865.6619,9.9487},
	{2816.4771,-1076.1879,30.7617},
	{2361.6982,-657.7144,128.1395},
	{2222.3455,-1166.6292,25.7621},
	{2225.1624,-1345.4669,23.9953},
	{701.4406,-445.7050,16.3637},
	{964.7099,-844.4766,95.5836},
	{-81.0210,-1571.3438,2.6403},
	{841.2715,-2061.7290,12.9029},
	{692.5094,-1235.5703,16.3610},
	{1555.4231,-1807.2538,13.5945}
};




#define COLOR_ALLDEPT 0xff353535
#define COLOR_TUTORIAL 0xF3CA49FF
#define COLOR_OWNER 0xFF0000FF
#define COLOR_DCHAT 0xFFD7004A
#define COLOR_BLUE  0x2641FEAA
#define COLOR_NOB 0x9dfe8080
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_GREEN 0x00FF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_YELLOW3 0xFFD633AA
#define COLOR_SERVER_GREEN 0x21DD00FF
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTRED2 0xE63E3EFF
#define COLOR_SYN 0xB8DBFFFF
#define COLOR_SYN2 0xA9C4E4FF
#define COLOR_WHITE 0xFFFFFFFF
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_GREY 0xCECECEFF
#define COLOR_LIGHT 0xAFD9FAFF
#define COLOR_GENANNOUNCE 0xA9C4E4FF
#define COLOR_ADMCHAT 0xFFD838AA
#define COLOR_IN2 0xe7aaa5AA
#define COLOR_CHATBUBBLE 0xFFFFFFCC
#define COLOR_TEAL 0x67AAB1FF
#define COLOR_NICESKY 0x00C2ECFF
#define COLOR_Riffa 0x0080C0B2
#define COLOR_BOSS2 0xab0000FF
#define COLOR_RED 0xE60000FF
#define COLOR_LIVE 0x9ACD32AA
#define COLOR_ATTACK 0x4dad2b2b
#define COLOR_COOLBLUE 0x0064FFAA
#define COLOR_DEPOSIT 0xFFFF00B2
#define COLOR_RADIOCHAT 0x8D8DFFFF
#define COLOR_NEWS 0xFFA500AA
#define COLOR_NEWSRP 0xFFA500AA
#define COLOR_GROUP 0x01FCFFC8
#define TEAM_GROVE_COLOR 0x00D900C8
#define COLOR_ORANGE 0xF97804FF
#define COLOR_CIUDAT 0xCB687AFF
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_GRAD 0xBFC0C2FF
#define COLOR_DEELAY 0x9FF978FF



//------ Culori nume factiune -----
#define COLOR_PD 0x2641FEAA
#define COLOR_MEDIC 0xFF6347AA
#define COLOR_HITMAN 0xAB2F1CFF
#define COLOR_SI 0x34FF4CFF
#define COLOR_NR 0xEFC6FFFF
#define COLOR_BALLAS 0x9F36C9FF
#define COLOR_GROVE 0x11B920FF
//---------------------------------

#define function%0(%1) forward %0(%1); public %0(%1) 
#define hidePlayerDialog(%0) ShowPlayerDialog(%0, -1, 0, " ", " ", "", "")
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
#define SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define strcpy(%0,%1,%2) strcat((%0[0] = '\0', %0), %1, %2)
#define GROUP_VIRTUAL_WORLD (20000)
#define HOUSE_VIRTUAL_WORLD (10000)
#define BUSINESS_VIRTUAL_WORLD (30000)
#define MAX_STRING 2400
#define MAX_PVEHS (10)
#define OwnedVeh(%0) caridxx[%0]
#define SECONDS_BETWEEN_SAME_MSGS (5)
#define KEY_AIM (128)
#define EX_SPLITLENGTHH 128
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
	

new gRegistred[MAX_PLAYERS];
new TutorialTime[MAX_PLAYERS];


#define ResetMoneyBar ResetPlayerMoney
#define UpdateMoneyBar GivePlayerMoney

#define pLevelx				1
#define pCashx				2
#define pAccountx			3
#define pEmailx				4
#define pRegistredx			5
#define pTutorialx			6
#define pSexx				7
#define	pAgex				8
#define pSkinx				9
#define pLastLoginx			10
#define pLimbax				11
#define pGroupx             12
#define pAdminLevelx        13
#define pGlassesx           14
#define pLicentaCondusx     15
#define pDonatex     		16
#define pFinalTutorialx     17
#define pColorx             18
#define pHelperLevelx       19
#define pJobx               20
#define pMaterialsx         21
#define pDrugsx             22
#define pPremiumPointsx     23
#define pFireworksx     	24
#define pCreditx            25
#define pPhoneNumberx       26
#define pRespectPointsx     27
#define pWarnsx             28
#define pRobPointsx         29
#define pOreJucatex         30
#define pFactionPunishx     32
#define pBannedx            33
#define pArmsDealerSkillx   34
#define pArmsPuncteSkillx   35
#define pLicentaArmex       36
#define pWantedx            38
#define pMutedx             40
#define pMechanicSkillx  	41
#define pMechanicPctSkillx  42
#define pLicentaFlyx        43
#define pLicentaBoatx       44
#define pReportDeelayx      45
#define pReportsx           46
#define pPizzaSkillx        47
#define pPizzaPctx          48
#define pFishSkillx         49
#define pTruckSkillx        51
#define pTruckPctx          52
#define pPasswordx          53
#define pGroupRankx         54
#define pGroupDaysx         60
#define pGroupWarnsx        61
#define pBusyx              62
#define pGiftHoursx         63
#define pStatusx            64
#define pFishTimesx         65
#define pPrisonIDx          66
#define pPrisonTimex        67
#define pNewbiex            68
#define pNewbieMutex        69
#define pPhonex             70
#define pRealizarix         71
#define pSecondsx           72
#define pVictimx            74
#define pAccusedx           75
#define pCrime1x            76
#define pCrime2x            77
#define pCrime3x            78
#define pFWarnsx            79
#define pWalkieTalkiex      80
#define pRegDatex           81
#define pHiddenx            82
#define pFightStylex        83
#define pPhoneBookx         84
#define pHatx               85
#define pWKillsx            86
#define pWDeathsx           87
#define pGasx               88
#define pFarmTimesx         89
#define pFarmSkillx         90
#define pQuestx             91
#define pQuestValuex        92
#define pQuestPrinsx        93
#define pQuestPointx        94
#define pSpecialSkinx       95
#define pQuestFinalizatx    96
#define pQuest2x            97
#define pQuest2Valuex       98
#define pQuest2Prinsx       99
#define pHeadValuex         110


#define pCarKey1x           100
#define pCarKey2x           101
#define pCarKey3x           102
#define pCarKey4x           103
#define pCarKey5x           104
#define pCarKey6x           105
#define pCarKey7x           106
#define pCarKey8x           107
#define pCarKey9x           108
#define pCarKey10x          109


// CARS
#define cLocationXx 1
#define cLocationYx 2
#define cLocationZx 3
#define cRotatex 4
#define cOwnerIDx 5
#define cColour1x 6
#define cColour2x 7
#define cKMx 8
#define cDaysx 9
#define cFuelx 10
#define cLockx 11
#define cOwnerx 12
#define cPlatex 13
#define cHPx 14
#define cInsurancePointsx 15






#define MAX_JOBS 100
#define MAX_ASSETS 100
#define MAX_HOUSES 500
#define MAX_BUSINESSES 101
#define MAX_PERSONAL_CARS 102
#define MAX_GROUPS 69
#define MAX_TIMERS 10
#define MAX_PCARS 500




#define mysql_host "127.0.0.1"
#define mysql_user "root"
#define mysql_password ""
#define mysql_database "leet"

forward MySQLConnect();
public MySQLConnect()
{
	handle = mysql_connect(mysql_host, mysql_user, mysql_database, mysql_password);

	if(handle && mysql_errno(handle) == 0)
	{
		printf("[MYSQL]: Connection to database (%s) was established!", mysql_database);
		printf("");
	}
	else
	{
		printf("[MYSQL]: Connection to database (%s) failed!", mysql_database);
		printf("");
		SendRconCommand("exit");
	}
	return 1;
}



enum
{
	DIALOG_LOGIN, 
	DIALOG_REGISTER,
	DIALOG_SEX,
	DIALOG_AGE, 
	DIALOG_EMAIL, 
	DIALOG_REGISTER_FINISH, 
	DIALOG_MP3, 
	DIALOG_PREMIUM, 
	DIALOG_PCOLOR, 
	DIALOG_ACOLOR, 
	DIALOG_JOB, 
	DIALOG_CCP, 
	DIALOG_REPORT, 
	DIALOG_DONATII, 
	DIALOG_CARRADIO, 
	DIALOG_HELP, 
	DIALOG_HELP2, 
	DIALOG_GMX,
	DIALOG_STOPJOB,  
	DIALOG_CHANGEPASS, 
	DIALOG_FACTIONS,
	DIALOG_FACTIONS2, 
	DIALOG_COLORCHAT, 
	DIALOG_MEMBERS, 
	DIALOG_TOGAPP, 
	DIALOG_EMAILS,
	DIALOG_SHOP, 
	DIALOG_BUYPREMIUMCAR, 
	DIALOG_CARBUY, 
	DIALOG_CARBUY2, 
	DIALOG_CARBUY3, 
	DIALOG_CARBUY4, 
	DIALOG_CARBUY5, 
	DIALOG_LASTS, 
	DIALOG_REPORT2, 
	DIALOG_NOSTOCK, 
	DIALOG_IPHONE, 
	DIALOG_NOPP, 
	DIALOG_TRANSFER, 
	DIALOG_EMAILS2, 
	DIALOG_DSINFO, 
	DIALOG_LASTKILLS, 
	DIALOG_GPSS, 
	DIALOG_GPS, 
	DIALOG_HQS, 
	DIALOG_LASTACTIONS, 
	DIALOG_GROUP_ENTER, 
	DIALOG_BUYPREMIUM, 
	DIALOG_CHANGENAME, 
	DIALOG_LASTPUNISH, 
	DIALOG_CONFIRMARE, 
	DIALOG_FIGHTSTYLE, 
	DIALOG_BUY, 
	DIALOG_BUYGUN, 
	DIALOG_BUYDRINK, 
	DIALOG_BUYTOYS, 
	DIALOG_QUITGROUP, 
	DIALOG_STAFF, 
	DIALOG_WANTED, 
	DIALOG_CARS,
	DIALOG_QSHOP 
}

enum vInfo
{
	vID,
	vStock,
	vPrice,
	vModel,
	vSpeed,
	vName[255]
};
new Stock[102][vInfo];

enum businessE
{
	bType,
	bOwner[MAX_PLAYER_NAME],
	bName[64],
	Float: bExteriorPos[3],
	Float: bInteriorPos[3],
	bInterior,
	bLocked,
	bVault,
	bFee,
	Text3D: bLabelID,
	bPickupID,
	bPrice,
}

enum houseE
{
	Float: hHouseExteriorPos[3],
	Float: hHouseInteriorPos[3],
	hHouseLocked,
	hRent,
	hSize,
	hDescription[64],
	hHouseInterior,
	hHousePrice,
	hPickupID,
	hMoney,
	Text3D:hLabelID,
	hHouseOwner[MAX_PLAYER_NAME],
}



enum systemE
{
	houseCount,
	jobsCount,
	businessCount,
	carsCount,
	dsvehicle,
	turfss,
	groups,
	PersonalCars,
	vehicleCounts[3],
}

enum specreturn
{
	Float:retx,
	Float:rety,
	Float:retz,
	Float:retang,
	retint,
	retworld
};



new s_pos[MAX_PLAYERS][specreturn];

enum jobsE
{
    jJobType,
    Float: jJobPosition[3],
    jJobName[32],
    jJobPickupID,
    Text3D:jJobLabelID,
}
enum vehicleE
{
	vVehicleModelID,
	Float: vVehiclePosition[3],
	Float: vVehicleRotation,
	vVehicleGroup,
	vVehicleJob,
	vVehicleGroupRank,
	vVehicleColour[2],
	vVehicleScriptID,
	vVehicleDMV,
	vVehicleRentCar,
}
enum carE
{
	cID,
	cOwnerID,
	cModel,
	Float: cPos[3],
	Float: cRotate,
	cOwner[MAX_PLAYER_NAME],
	cColour[2],
	cPlate[10],
	cKM,
	cDays,
	cLock,
	cFuel,
	Float:cHP,
	cInsurance,
	cInsurancePoints,
}
enum groupE
{
	gGroupName[32],
	gGroupType,
	Float: gGroupExteriorPos[3],
	Float: gGroupInteriorPos[3],
	gGroupHQInteriorID,
	gGroupPickupID,
	Text3D: gGroupLabelID,
	gGroupHQLockStatus,
	gGroupMOTD[128],
	gGroupRankName1[32],
	gGroupRankName2[32],
	gGroupRankName3[32],
	gGroupRankName4[32],
	gGroupRankName5[32],
	gGroupRankName6[32],
	gGroupRankName7[32],
	gMaterials,
	gDrugs,
	gMoney,
	gSlots,
	gAplication,
	gLevel,
	Float: gSafePos[3],
	gSafePickupID,
	Text3D: gSafeLabelID,
}

enum assetsE
{
	aAssetName[32],
	aAssetValue,
}

enum zInfo
{
    zID,
    zOwned,
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY
};


new TurfInfo[50][zInfo], Turfs[50];
enum wInfo
{
    wFaction,
	wAttacker,
	wTime,
};
new WarInfo[sizeof(TurfInfo)][wInfo],
	WarScoreF[16][sizeof(TurfInfo)],
	ucideri[MAX_PLAYERS][sizeof(TurfInfo)],
	decese[MAX_PLAYERS][sizeof(TurfInfo)],
	worstscoreat[sizeof(TurfInfo)],
	worstmemberat[sizeof(TurfInfo)],
	worstscoredf[sizeof(TurfInfo)],
	worstmemberdf[sizeof(TurfInfo)],
	bestscoreat[sizeof(TurfInfo)],
	bestmemberat[sizeof(TurfInfo)],
	bestscoredf[sizeof(TurfInfo)],
	bestmemberdf[sizeof(TurfInfo)],
	DeelayWar[17],
	InWar[17];



new houseVariables[MAX_HOUSES][houseE],
	vehicleVariables[MAX_VEHICLES][vehicleE],
	carVariables[MAX_PCARS][carE],
	assetVariables[MAX_ASSETS][assetsE],
	jobVariables[MAX_JOBS][jobsE],
	groupVariables[MAX_GROUPS][groupE],
	businessVariables[MAX_BUSINESSES][businessE],
	systemVariables[systemE],
	scriptTimers[MAX_TIMERS];

	



main()
{
	printf(" ");
}

public OnGameModeInit()
{
	MySQLConnect();
	mysql_log(LOG_DEBUG | LOG_ERROR | LOG_WARNING,LOG_TYPE_HTML);

	printf("----------- SERVER START -----------");


	/*if(!strcmp(GetServerIP(), "127.0.0.1"))
	{
		SendRconCommand("password leet");
		SendRconCommand("hostname Leet Romania - serverul revine in curand...");
	}*/
	
 	ShowPlayerMarkers(0);
	LimitPlayerMarkerRadius(10.0);
	ManualVehicleEngineAndLights();
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	UsePlayerPedAnims();
	SetNameTagDrawDistance(20);
	
	

	IniJobs();
    IniVehs();
    IniVehicule();
    IniGroups();
    IniAssets();
    IniHouses();
    IniBusinesses();
    IniTurfs();
    IniStock();
    
    for(new i = 0; i < sizeof(TurfInfo); i++)
	{
     	Turfs[i] = GangZoneCreateEx(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY],TurfInfo[i][zID], 1.0);
	}
    
    
    SendRconCommand("weather 6"); 
    
    
    CreateDynamicMapIcon(1554.7539, -1675.6672, 16.1953, 30, 0,-1,-1,-1, 500.0);
    CreateDynamicMapIcon(626.9647, -571.7199, 17.9207, 30, 0,-1,-1,-1, 500.0);
    CreateDynamicMapIcon(1111.3481, -1796.9823, 16.5938, 55, 0,-1,-1,-1, 500.0);
    CreateDynamicMapIcon(1219.2067, -1812.0403, 16.5938, 36, 0,-1,-1,-1, 500.0);
    
    
    scriptTimers[0] = SetTimer("globalPlayerLoop", 1000, true);
	scriptTimers[1] = SetTimer("MessageTimer", 300000, true);
	scriptTimers[2] = SetTimer("WeatherChange", 900000, true);
	scriptTimers[3] = SetTimer("FiveSecondsTimer", 5000, true);
	scriptTimers[4] = SetTimer("CheckCar", 1000, true);
	scriptTimers[5] = SetTimer("CheckGas", 1000, true);
	scriptTimers[6] = SetTimer("Tutorial", 1000, true);
	scriptTimers[7] = SetTimer("DistanceCheck", 1000, 1);
	
	
	new Year, Month, Day, ora, minut, secunda;
	getdate(Year, Month, Day);
	gettime(ora, minut, secunda);
	
	dataserver1 = Year;
	dataserver2 = Month;
	dataserver3 = Day;
	hourserver = ora;
	minutserver = minut;
	
	
 	SetGameModeText("beta version");

	for(new c=0;c<MAX_VEHICLES;c++)
	{
		Radio[c] = 0;
 	}
 
	glskinlist = LoadModelSelectionMenu("glasses.txt");
	skinlist = LoadModelSelectionMenu("skinlist.txt");
	skinlistPD = LoadModelSelectionMenu("skinlistPD.txt");
	skinlistTX = LoadModelSelectionMenu("skinlistTX.txt");
	skinlistFBI = LoadModelSelectionMenu("skinlistFBI.txt");
	skinlistHA = LoadModelSelectionMenu("skinlistHA.txt");
	skinlistMEDIC = LoadModelSelectionMenu("skinlistMEDIC.txt");
	skinlistSI = LoadModelSelectionMenu("skinlistSI.txt");
	skinlistNR = LoadModelSelectionMenu("skinlistNR.txt");
	skinlistGrove = LoadModelSelectionMenu("skinlistGrove.txt");
	skinlistBallas = LoadModelSelectionMenu("skinlistBallas.txt");
	
	new gratie1, gratie2, gratie3, gratie4, gratie5, gratie6;
	gratie1 = CreateObject(19302, 266.32431, 85.70610, 1001.28571,   0.00000, 0.00000, 90.30000);
	gratie2 = CreateObject(19302, 266.31870, 87.46790, 1001.28571,   0.02000, 0.00000, -89.82000);
	gratie3 = CreateObject(19302, 266.32031, 82.94890, 1001.28571,   0.02000, 0.00000, -89.82000);
	gratie4 = CreateObject(19302, 266.33569, 81.20160, 1001.28571,   0.02000, 0.00000, 90.36000);
	gratie5 = CreateObject(19302, 266.29480, 76.71580, 1001.28571,   0.02000, 0.00000, 90.36000);
	gratie6 = CreateObject(19302, 266.29480, 78.45580, 1001.28571,   0.02000, 0.00000, -90.60000);
	SetObjectMaterial(gratie1, 0, 19302, "gratie1", "gratie1", 0xFFFFFFFF);
	SetObjectMaterial(gratie2, 0, 19302, "gratie2", "gratie2", 0xFFFFFFFF);
	SetObjectMaterial(gratie3, 0, 19302, "gratie3", "gratie3", 0xFFFFFFFF);
	SetObjectMaterial(gratie4, 0, 19302, "gratie4", "gratie4", 0xFFFFFFFF);
	SetObjectMaterial(gratie5, 0, 19302, "gratie5", "gratie5", 0xFFFFFFFF);
	SetObjectMaterial(gratie6, 0, 19302, "gratie6", "gratie6", 0xFFFFFFFF);

	lspdbar = CreateObject(968, 1544.7007, -1630.7527, 13.2983, 0.0000, 90.0200, 90.0000);


	//----- Masinute / avioane DS/AEROPORT/PD
	CreateVehicle(464, 1972.3630, -2177.0972, 16.6885, 51.6000, -1, -1, 100);
	CreateVehicle(465, 1950.9691, -2177.2039, 16.8155, -56.9400, -1, -1, 100);
	CreateVehicle(564, 1546.9607, -1672.4099, 14.0163, 89.9999, -1, -1, 100);
	CreateVehicle(564, 1547.0096, -1678.7792, 14.0163, 89.9999, -1, -1, 100);
	CreateVehicle(441, 1111.4111, -1801.6454, 15.7124, 90.0113, 75, 68, 100);
	CreateVehicle(441, 1111.4160, -1791.5833, 15.7125, 92.9614, 24, 20, 100);
	
	//------- Gard mall -------
	CreateObject(970, 1113.81226, -1415.95642, 12.99760,   0.00000, 0.00000, 1.02000);
	CreateObject(970, 1118.95190, -1415.88806, 12.99760,   0.00000, 0.00000, 0.24000);
	CreateObject(970, 1123.87134, -1415.89172, 13.01760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1128.84937, -1415.87390, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1133.62927, -1415.89539, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1138.54712, -1415.90955, 13.07760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1143.48718, -1415.95984, 13.07760,   0.00000, 0.00000, -0.54000);
	CreateObject(970, 1186.10474, -1495.67102, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1186.14282, -1490.92114, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1186.13611, -1486.25720, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1186.10059, -1481.48560, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1124.00598, -1562.16187, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateObject(970, 1133.22400, -1562.16504, 12.95910,   0.00000, 0.00000, 0.12000);
	CreateObject(970, 1128.58142, -1562.17664, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateObject(970, 1061.49329, -1492.59277, 12.96960,   0.00000, 0.00000, -105.78001);
	CreateObject(970, 1059.12000, -1501.51147, 12.96960,   0.00000, 0.00000, -104.70000);
	CreateObject(970, 1060.26794, -1497.01086, 12.98960,   0.00000, 0.00000, -105.30000);


	//--- Tonomate --

	CreateDynamicObject(955, 1542.7664,-1644.3813,13.4816,   0.00000, 0.00000, -90.00000);
	
	//PD Exterior
 	CreateObject(11326, 1605.05212, -1623.62476, 14.96770,   0.00000, 0.00000, 89.46000);
 	CreateDynamicObject(3934,1563.89941406,-1650.34277344,27.40211487,0.00000000,0.00000000,0.00000000, 0, 0, _, 200.0); //object(helipad01) (2)
	CreateDynamicObject(1496,1563.84997559,-1671.13000488,51.45027542,0.00000000,0.00000000,0.00000000, 0, 0, _, 200.0); //object(gen_doorshop02) (2)
	CreateDynamicObject(982,1577.75000000,-1701.50000000,28.07836533,0.00000000,0.00000000,0.00000000, 0, 0, _, 200.0); //object(fence) (1)
	CreateDynamicObject(982,1577.75000000,-1650.30004883,28.07836533,0.00000000,0.00000000,0.00000000, 0, 0, _, 200.0); //object(fence) (3)
	CreateDynamicObject(982,1565.00000000,-1637.50000000,28.07836533,0.00000000,0.00000000,90.00000000, 0, 0, _, 200.0); //object(fence) (4)
	CreateDynamicObject(984,1549.02502441,-1637.50000000,28.03879547,0.00000000,0.00000000,90.00000000, 0, 0, _, 200.0); //object(fence2) (1)
	CreateDynamicObject(982,1565.00000000,-1714.30004883,28.07836533,0.00000000,0.00000000,90.00000000, 0, 0, _, 200.0); //object(fencet) (5)
	CreateDynamicObject(982,1577.75000000,-1675.89941406,28.07836533,0.00000000,0.00000000,0.00000000, 0, 0, _, 200.0); //object(fencest) (6)
	CreateDynamicObject(984,1549.02441406,-1714.29980469,28.03879547,0.00000000,0.00000000,90.00000000, 0, 0, _, 200.0); //object(fenceshit2) (3)
	CreateDynamicObject(983,1550.59997559,-1701.50000000,28.07836533,0.00000000,0.00000000,90.00000000, 0, 0, _, 200.0); //object(fenceshit3) (2)
	CreateDynamicObject(984,1542.59960938,-1643.89941406,28.03879547,0.00000000,0.00000000,0.00000000, 0, 0, _, 200.0); //object(fenceshit2) (6)
	CreateDynamicObject(983,1545.79980469,-1701.50000000,28.07836533,0.00000000,0.00000000,90.00000000, 0, 0, _, 200.0); //object(fenceshit3) (3)
	CreateDynamicObject(983,1550.59997559,-1650.30004883,28.07836533,0.00000000,0.00000000,90.00000000, 0, 0, _, 200.0); //object(fenceshit3) (4)
	CreateDynamicObject(983,1545.79980469,-1650.30004883,28.07836533,0.00000000,0.00000000,90.00000000, 0, 0, _, 200.0); //object(fenceshit3) (5)
	CreateDynamicObject(984,1542.59960938,-1707.89941406,28.03879547,0.00000000,0.00000000,0.00000000, 0, 0, _, 200.0); //object(fenceshit2) (7)
	CreateDynamicObject(984,1553.80004883,-1695.09997559,28.03000069,0.00000000,0.00000000,0.00000000, 0, 0, _, 200.0); //object(fenceshit2) (8)
	CreateDynamicObject(984,1553.79980469,-1656.69995117,28.03000069,0.00000000,0.00000000,0.00000000, 0, 0, _, 200.0); //object(fenceshit2) (9)
	CreateDynamicObject(983,1544.69995117,-1620.58996582,13.02000046,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(1331,1544.54602051,-1616.99133301,13.10000038,0.00000000,0.00000000,0.00000000); //object(binnt01_la) (1)
	CreateDynamicObject(2952,1582.00000000,-1637.88598633,12.39045906,0.00000000,0.00000000,90.00000000); //object(kmb_gimpdoor) (1)
	CreateDynamicObject(983,1544.69921875,-1636.00000000,13.02000046,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (6)
	CreateDynamicObject(2952,1582.00000000,-1638.30004883,12.39045906,0.00000000,0.00000000,90.00000000); //object(kmb_gimpdoor) (2)

	//Pompe de benzina
	CreateObject(1676, 1009.18927, -936.09637, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateObject(1676, 1005.57520, -936.67499, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateObject(1676, 1002.23541, -937.06488, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateObject(1676, 998.64508, -937.57654, 42.78190,   0.00000, 0.00000, 6.66000);


	for(new f = 0; f < MAX_PLAYERS; f++)
	{
		jailstat[f] = TextDrawCreate(498.750000, 110.166694, "WANTED: 1");
		TextDrawLetterSize(jailstat[f], 0.220000,1.300000);
		TextDrawAlignment(jailstat[f], 1);
		TextDrawColor(jailstat[f], -1);
		TextDrawSetShadow(jailstat[f], 0);
		TextDrawSetOutline(jailstat[f], 1);
		TextDrawBackgroundColor(jailstat[f], 255);
		TextDrawFont(jailstat[f], 2);
		TextDrawSetProportional(jailstat[f], 1);
		
		wantedscade[f] = TextDrawCreate(500.750000, 130.166694, "WANTED: 1");
		TextDrawLetterSize(wantedscade[f], 0.180000,1.300000);
		TextDrawAlignment(wantedscade[f], 1);
		TextDrawColor(wantedscade[f], -1);
		TextDrawSetShadow(wantedscade[f], 0);
		TextDrawSetOutline(wantedscade[f], 1);
		TextDrawBackgroundColor(wantedscade[f], 255);
		TextDrawFont(wantedscade[f], 2);
		TextDrawSetProportional(wantedscade[f], 1);

  		viata[f] = TextDrawCreate(267.768859, 345.333404, "Health: 20");
		TextDrawLetterSize(viata[f], 0.449999, 1.600000);
		TextDrawAlignment(viata[f], 1);
		TextDrawColor(viata[f], 0xFFFFFFFF);
		TextDrawSetShadow(viata[f], 0);
		TextDrawSetOutline(viata[f], 1);
		TextDrawBackgroundColor(viata[f], 255);
		TextDrawFont(viata[f], 2);
		TextDrawSetProportional(viata[f], 1);

  		info[f] = TextDrawCreate(267.768859, 324.916778, "Name [id] - L 69");
		TextDrawLetterSize(info[f], 0.449999, 1.600000);
		TextDrawAlignment(info[f], 1);
		TextDrawColor(info[f], 0xFFFFFFFF);
		TextDrawSetShadow(info[f], 0);
		TextDrawSetOutline(info[f], 1);
		TextDrawBackgroundColor(info[f], 255);
		TextDrawFont(info[f], 2);
		TextDrawSetProportional(info[f], 1);

		wantedjail[f] = TextDrawCreate(267.768859, 365.750122, "W: 0 - JAIL: 3");
		TextDrawLetterSize(wantedjail[f], 0.449999, 1.600000);
		TextDrawAlignment(wantedjail[f], 1);
		TextDrawColor(wantedjail[f], 0xFFFFFFFF);
		TextDrawSetShadow(wantedjail[f], 0);
		TextDrawSetOutline(wantedjail[f], 1);
		TextDrawBackgroundColor(wantedjail[f], 255);
		TextDrawFont(wantedjail[f], 2);
		TextDrawSetProportional(wantedjail[f], 1);

		TextDrawCar[f][0] = TextDrawCreate(516.875000, 351.750183, "Speed: ~y~160 km/h");
		TextDrawLetterSize(TextDrawCar[f][0], 0.211874, 1.634999);
		TextDrawAlignment(TextDrawCar[f][0], 1);
		TextDrawColor(TextDrawCar[f][0], -1);
		TextDrawSetShadow(TextDrawCar[f][0], 0);
		TextDrawSetOutline(TextDrawCar[f][0], 1);
		TextDrawBackgroundColor(TextDrawCar[f][0], 255);
		TextDrawFont(TextDrawCar[f][0], 2);
		TextDrawSetProportional(TextDrawCar[f][0], 1);
		
		TextDrawCar[f][6] = TextDrawCreate(516.875000, 393.749969, "BELT");
		TextDrawLetterSize(TextDrawCar[f][6], 0.211874, 1.634999);
		TextDrawAlignment(TextDrawCar[f][6], 1);
		TextDrawColor(TextDrawCar[f][6], -1);
		TextDrawSetShadow(TextDrawCar[f][6], 0);
		TextDrawSetOutline(TextDrawCar[f][6], 1);
		TextDrawBackgroundColor(TextDrawCar[f][6], 255);
		TextDrawFont(TextDrawCar[f][6], 2);
		TextDrawSetProportional(TextDrawCar[f][6], 1);

		TextDrawCar[f][7] = TextDrawCreate(516.875000, 393.749969, "ODOMETER");
		TextDrawLetterSize(TextDrawCar[f][7], 0.211874, 1.634999);
		TextDrawAlignment(TextDrawCar[f][7], 1);
		TextDrawColor(TextDrawCar[f][7], -1);
		TextDrawSetShadow(TextDrawCar[f][7], 0);
		TextDrawSetOutline(TextDrawCar[f][7], 1);
		TextDrawBackgroundColor(TextDrawCar[f][7], 255);
		TextDrawFont(TextDrawCar[f][7], 2);
		TextDrawSetProportional(TextDrawCar[f][7], 1);

		TextDrawCar[f][1] = TextDrawCreate(516.875000, 365.749969, "Fuel: ~y~100");
		TextDrawLetterSize(TextDrawCar[f][1], 0.211873, 1.634999);
		TextDrawAlignment(TextDrawCar[f][1], 1);
		TextDrawColor(TextDrawCar[f][1], -1);
		TextDrawSetShadow(TextDrawCar[f][1], 0);
		TextDrawSetOutline(TextDrawCar[f][1], 1);
		TextDrawBackgroundColor(TextDrawCar[f][1], 255);
		TextDrawFont(TextDrawCar[f][1], 2);
		TextDrawSetProportional(TextDrawCar[f][1], 1);

  		TextDrawCar[f][2] = TextDrawCreate(516.875000, 365.749969, "Unlocked");
		TextDrawLetterSize(TextDrawCar[f][2], 0.211873, 1.634999);
		TextDrawAlignment(TextDrawCar[f][2], 1);
		TextDrawColor(TextDrawCar[f][2], -1);
		TextDrawSetShadow(TextDrawCar[f][2], 0);
		TextDrawSetOutline(TextDrawCar[f][2], 1);
		TextDrawBackgroundColor(TextDrawCar[f][2], 255);
		TextDrawFont(TextDrawCar[f][2], 2);
		TextDrawSetProportional(TextDrawCar[f][2], 1);

  		TextDrawCar[f][3] = TextDrawCreate(516.875000, 379.749969, "Unlocked");
		TextDrawLetterSize(TextDrawCar[f][3], 0.211873, 1.634999);
		TextDrawAlignment(TextDrawCar[f][3], 1);
		TextDrawColor(TextDrawCar[f][3], -1);
		TextDrawSetShadow(TextDrawCar[f][3], 0);
		TextDrawSetOutline(TextDrawCar[f][3], 1);
		TextDrawBackgroundColor(TextDrawCar[f][3], 255);
		TextDrawFont(TextDrawCar[f][3], 2);
		TextDrawSetProportional(TextDrawCar[f][3], 1);

  		TextDrawCar[f][4] = TextDrawCreate(516.875000, 379.749969, "Odometer");
		TextDrawLetterSize(TextDrawCar[f][4], 0.211873, 1.634999);
		TextDrawAlignment(TextDrawCar[f][4], 1);
		TextDrawColor(TextDrawCar[f][4], -1);
		TextDrawSetShadow(TextDrawCar[f][4], 0);
		TextDrawSetOutline(TextDrawCar[f][4], 1);
		TextDrawBackgroundColor(TextDrawCar[f][4], 255);
		TextDrawFont(TextDrawCar[f][4], 2);
		TextDrawSetProportional(TextDrawCar[f][4], 1);

  		TextDrawCar[f][5] = TextDrawCreate(516.875000, 393.749969, "Unlocked");
		TextDrawLetterSize(TextDrawCar[f][5], 0.211873, 1.634999);
		TextDrawAlignment(TextDrawCar[f][5], 1);
		TextDrawColor(TextDrawCar[f][5], -1);
		TextDrawSetShadow(TextDrawCar[f][5], 0);
		TextDrawSetOutline(TextDrawCar[f][5], 1);
		TextDrawBackgroundColor(TextDrawCar[f][5], 255);
		TextDrawFont(TextDrawCar[f][5], 2);
		TextDrawSetProportional(TextDrawCar[f][5], 1);
	}

	CreateDynamic3DTextLabel("Driving School!\n\nType /exam\nto start the test!", COLOR_YELLOW, 1219.2067,-1812.0403,16.5938, 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 15.0);

	CreateDynamic3DTextLabel("Materials Pickup!\n\nType /getmats as an Arms Dealer \nto collect materials!",COLOR_BLUE, 590.0392,-1509.1411,15.3347, 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 15.0);
	CreatePickup(1239,1,1219.2067,-1812.0403,16.5938,0);
	CreatePickup(1239,1,590.0392,-1509.1411,15.3347,0);

	Create3DTextLabel("Use /getdrugs here to get drugs!", COLOR_BLUE, 320.0350, 1122.9698, 1083.8828, 10.0, 0);
	CreatePickup(1279,1,320.0350,1122.9698,1083.8828,0);
	CreatePickup(1318,1,2138.9810,-1697.6166,15.0859,0);

	Create3DTextLabel("Los Santos Police Department's HQ",COLOR_TEAL,1554.7539,-1675.6672,16.1953,10.0, 0);
	CreatePickup(1247,1,1554.7539,-1675.6672,16.1953,0);


	Create3DTextLabel("LS Dealership!\n\nType /buycar to buy a car\nor /sellcar to sell an existing car!", COLOR_GREEN, 1111.3481,-1796.9823,16.5938, 20.0, 0);
	CreatePickup(1277, 1, 1111.3481,-1796.9823,16.5938, 0);

	Create3DTextLabel("Paintball !\n\nType /paint\nto enter the paintball arena!",0xFFFF00CC, 1310.1595,-1367.0482,13.5172, 15.0, 0, 1);
	CreatePickup(1254, 23, 1310.1595,-1367.0482,13.5172);
	

	areap = Create3DTextLabel("Event Place\n\n(locked)",0xFFFFFFFF, 2780.6975,-1812.4325,11.8438, 25.0, 0, 1);
	CreatePickup(1314, 23, 2780.6975,-1812.4325,11.8438);



	if(assetVariables[1][aAssetValue] == 1) 
	{
	    new objectid = assetVariables[2][aAssetValue];
		dynamicgift = CreateDynamicObject(objectid, 1128.9078,-1453.7595,15.4969,   179.8316, 179.8316, 179.8316);
		dynamicgift3DText = CreateDynamic3DTextLabel("Leet.Ro Giftbox\nUse /getgift to get a gift",COLOR_LIGHT,1128.9078,-1453.7595,15.7969,20.0);
	}
	return 1;
}
new RandomMSG[][] =
{
	"Iti poti cumpara o masina personala incepand cu  level 3 de la Dealership.",

	"Vrei sa faci un ban? Foloseste /jobs! Toate joburile sunt egale la banii castigati.",

	"Nu cunosti locatiile importante de pe server? Foloseste /where sau /gps.",

	"Folosirea cheat-urilor este interzisa! Se pedepseste cu ban.",

	"Poti asculta radio in masina folosind comanda /carradio.",

	"Nu imprumuta bani altor playeri. Nu ai nicio garantie ca ii vei recupera.",

	"Daca ai o nelamurire poti folosi /n sau /report.",

	"Daca nu vrei sa risti sa fii inselat, poti chema un admin inainte de a face o afacere.",

	"Pentru a afla comenzile serverului poti folosi /help.",

	"Acceseaza in browser 'leet.ro/premium' daca doresti sa donezi o suma de bani in schimbul punctelor premium.",

	"Vorbeste frumos cu ceilalti playeri de pe server si ti se va vorbi la fel."

};

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(playerVariables[playerid][pTutorial] == 0) return 0;
	
	if(iGMXTick > 0)
	{
		SS(playerid, -1, "{BFFF8B}Nu poti folosi comenzile serverului cand acesta se restarteaza.", "{BFFF8B}You can't use any commands while the server is restarting.");
		return 0;
	} 
	
    return 1;
}
public ShowStats(playerid, targetid)
{
    if(IsPlayerConnected(targetid))
	{
     	new param1[32], param2[32], param3[60], param59[60];
     	
	    new nxtlevel = playerVariables[targetid][pLevel];
		new expamount = nxtlevel * levelexp;

		if(playerVariables[targetid][pJob] == 0)
		{
			param1 = "Unemployed";
		}
		else
		{
			strcpy(param1, jobVariables[playerVariables[targetid][pJob]][jJobName], sizeof(param1));
	 	}

		if(playerVariables[targetid][pPhoneNumber] == 0)
		{
			param2 = "None";
		}
		else
		{
			format(param2,sizeof(param2),"%d", playerVariables[targetid][pPhoneNumber]);
		}
		
		if(IsACop(targetid))
		{
			format(szMessage, sizeof(szMessage), "(%d) %s | Playing hours: %d | Job: %s | Phone no: %s | Warns: %d/3 | Lawyer Points: %d/3", targetid, GetName(targetid), playerVariables[targetid][pOreJucate], param1, param2, playerVariables[targetid][pWarns], playerVariables[targetid][pRobPoints]);
			S(playerid, COLOR_WHITE, szMessage);
		}
		else
		{
		    if(playerVariables[targetid][pDonate] == 1)
		    {
				format(szMessage, sizeof(szMessage), "(%d) %s | Playing hours: %d | Job: %s | Phone no: %s | Warns: %d/3 | Rob Points: %d/8", targetid, GetName(targetid), playerVariables[targetid][pOreJucate], param1, param2, playerVariables[targetid][pWarns], playerVariables[targetid][pRobPoints]);
				S(playerid, COLOR_WHITE, szMessage);
			}
			else
			{
				format(szMessage, sizeof(szMessage), "(%d) %s | Playing hours: %d | Job: %s | Phone no: %s | Warns: %d/3 | Rob Points: %d/10", targetid, GetName(targetid), playerVariables[targetid][pOreJucate], param1, param2, playerVariables[targetid][pWarns], playerVariables[targetid][pRobPoints]);
				S(playerid, COLOR_WHITE, szMessage);
			}
		}



		if(playerVariables[targetid][pWalkieTalkie] == -1) param59 = "None";
		else if(playerVariables[targetid][pWalkieTalkie] == 0) param59 = "Disabled";
		else format(param59, sizeof(param59), "#%d khz", playerVariables[targetid][pWalkieTalkie]);

		format(szMessage, sizeof(szMessage), "Level: %d | Respect points: %d/%d | Money: $%s | Bank Money: $%s | Radio: %s", playerVariables[targetid][pLevel], playerVariables[targetid][pRespectPoints], expamount, NumberFormat(playerVariables[targetid][pCash]), NumberFormat(playerVariables[targetid][pAccount]), param59);
		S(playerid, COLOR_WHITE, szMessage);
		
		

		format(param3, sizeof(param3), "%s", groupVariables[playerVariables[targetid][pGroup]][gGroupName]);

		if(playerVariables[targetid][pDonate] == 1)
        {
    		format(szMessage, sizeof(szMessage), "Materials: %s | Drugs: %d | Premium account: Yes (%d points) | Credit: $%d | Fireworks: %d | Quest Points: %d", NumberFormat(playerVariables[targetid][pMaterials]), playerVariables[targetid][pDrugs], playerVariables[targetid][pPremiumPoints], playerVariables[targetid][pCredit], playerVariables[targetid][pFireworks], playerVariables[targetid][pQuestPoint]);
			S(playerid, COLOR_WHITE, szMessage);
		}
		else
		{
			format(szMessage, sizeof(szMessage), "Materials: %s | Drugs: %d | Premium account: No (%d points) | Credit: $%d | Fireworks: %d | Quest Points: %d", NumberFormat(playerVariables[targetid][pMaterials]), playerVariables[targetid][pDrugs], playerVariables[targetid][pPremiumPoints], playerVariables[targetid][pCredit], playerVariables[targetid][pFireworks], playerVariables[targetid][pQuestPoint]);
			S(playerid, COLOR_WHITE, szMessage);
		}
		
		if(playerVariables[targetid][pGroup] > 0)
	 	{
	 		format(szMessage, sizeof(szMessage), "Group: %s | Rank: %d | Faction Warns: %d/3 | Faction punish: %d/20 | Hidden: %d", param3, playerVariables[targetid][pGroupRank], playerVariables[targetid][pFWarns], playerVariables[targetid][pFactionPunish], playerVariables[targetid][pHidden]);
			S(playerid, COLOR_WHITE, szMessage);
	 	}
	 	else
	 	{
	 		format(szMessage, sizeof(szMessage), "Group: None | Faction punish: %d/20 | Hidden: %d", playerVariables[targetid][pFactionPunish], playerVariables[targetid][pHidden]);
			S(playerid, COLOR_WHITE, szMessage);
	 	}
	 	
	 	if(getPlayerHouseID(targetid) > 0 || getPlayerBusinessID(targetid) > 0)
	 	{
	 		format(szMessage, sizeof(szMessage), "House: %d | Business: %d", getPlayerHouseID(targetid), getPlayerBusinessID(targetid));
			S(playerid, COLOR_WHITE, szMessage);
	 	}

		/*if(playerVariables[targetid][pStatus] != 1)
		param1 = "Unauthenticated"; else param1 = "Authenticated";
		
		new country[40];
		GetPlayerCountry(targetid, country, sizeof(country));
		
		if(playerVariables[playerid][pAdminLevel] >= 1)
		{
			format(szMessage, sizeof(szMessage), "Status: %s | Admin level: %d | Country: %s | Interior: %i | VW: %i | Secs: %d", param1, playerVariables[targetid][pAdminLevel], country, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), playerVariables[targetid][pConnected]);
			S(playerid, COLOR_WHITE, szMessage);
		}*/
	}
	else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
	return 1;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(playerVariables[playerid][pAdminLevel] >= 1 && playerVariables[playerid][pWanted] == 0)
	{
 		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, fX, fY, fZ);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, fX, fY, fZ+3);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
	}
	return 1;
}
public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new member = playerVariables[playerid][pGroup];
	    	
		if(member == 8 || member == 9)
		{
		    return 1;
		}
	}
	return 0;
}
public IsAtCNN(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, businessVariables[29][bExteriorPos][0], businessVariables[29][bExteriorPos][1], businessVariables[29][bExteriorPos][2]))
		{
		    return 1;
		}
	}
	return 0;
}
public IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 15.0, businessVariables[23][bExteriorPos][0], businessVariables[23][bExteriorPos][1], businessVariables[23][bExteriorPos][2]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 15.0, businessVariables[24][bExteriorPos][0], businessVariables[24][bExteriorPos][1], businessVariables[24][bExteriorPos][2]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 15.0, businessVariables[25][bExteriorPos][0], businessVariables[25][bExteriorPos][1], businessVariables[25][bExteriorPos][2]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 15.0, businessVariables[26][bExteriorPos][0], businessVariables[26][bExteriorPos][1], businessVariables[26][bExteriorPos][2]))
		{
		    return 1;
		}
	}
	return 0;
}
public Fillup(playerid)
{
 	new FillUp, string[256];


  	FillUp = 100 - Gas[fuelmasina[playerid]];
  	
   	new Incarcare = 100 - Gas[fuelmasina[playerid]];
    FillUp = FillUp * 20;

	if(Refueling[fuelmasina[playerid]] > 0)
    {
		if(GetPlayerCash(playerid) >= FillUp)
		{
		    if(Gas[fuelmasina[playerid]] <= 99)
		    {
				Gas[fuelmasina[playerid]] += Incarcare;
			}
			else
			{
			    Gas[fuelmasina[playerid]] = 100;
			}

			GivePlayerCash(playerid, -FillUp);

		 	format(string,sizeof(string),"Ai platit $%s pentru a face plinul la masina.", NumberFormat(FillUp));
    		SendClientMessage(playerid,COLOR_GREEN,string);
		}
		else
	   	{
	   	    format(string,sizeof(string),"Not enough money to refill, it costs $%s to fill your vehicle.", NumberFormat(FillUp));
		    S(playerid, COLOR_GREY, string);
	   	}
	}
	return 1;
}

public timerlms()
{
	foreach(Player, i)
	{
		if(IsPlayerInRangeOfPoint(i, 200.0, -1403.0852,988.6870,1024.0004))
  		{
			iGMXTick1 --;
	   		switch(iGMXTick1)
	 		{
			  	case 0:
				{
				    TogglePlayerControllable(i, 1);
					
					KillTimer(iGMXTimer1);
			    }
			    case 1: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~1 ~w~secunde", 1000, 3);
			    case 2: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~2 ~w~secunde", 1000, 3);
			    case 3: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~3 ~w~secunde", 1000, 3);
			    case 4: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~4 ~w~secunde", 1000, 3);
			    case 5: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~5 ~w~secunde", 1000, 3);
			    case 6: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~6 ~w~secunde", 1000, 3);
			    case 7: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~7 ~w~secunde", 1000, 3);
			    case 8: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~8 ~w~secunde", 1000, 3);
			    case 9: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~9 ~w~secunde", 1000, 3);
			    case 10: GameTextForPlayer(i, "~w~Evenimentul incepe in ~r~10 ~w~secunde", 1000, 3);
	   		}
	   	}
	}
	return 1;
}

public lspdbarclose()
{
    MoveObject(lspdbar, 1544.7007, -1630.7527, 13.2983, 1.5,0.0000, 90.0200, 90.0000);
    return 1;
}
public KickPublic(playerid)
{
	Kick(playerid);
}

forward SetPlayerHealthEx(playerid, Float:health);
public SetPlayerHealthEx(playerid, Float:health)
{
	SetPlayerHealth(playerid, health);
	Health[playerid] = health;
	return 1;
}

forward GetPlayerHealthEx(playerid, &Float:health);
public GetPlayerHealthEx(playerid, &Float:health)
{
	health = Health[playerid];
	return 1;
}

forward SetPlayerArmourEx(playerid, Float:armour);
public SetPlayerArmourEx(playerid, Float:armour)
{
	SetPlayerArmour(playerid, armour);
	Armour[playerid] = armour;
	return 1;
}

forward GetPlayerArmourEx(playerid, &Float:armour);
public GetPlayerArmourEx(playerid, &Float:armour)
{
	armour = Armour[playerid];
	return 1;
}

public DrugEffectGone(playerid)
{
    if(UsingDrugs[playerid] == 1)
    {
  		SetPlayerHealthEx(playerid, 100);

  		playerVariables[playerid][pDeelayUseDrugs] = 120;

		format(szMessage, sizeof(szMessage), "* %s took some drugs.", GetName(playerid));
		nearByMessage(playerid, COLOR_PURPLE, szMessage);

		SS(playerid, -1, "Drogurile au inceput sa-si faca efectul.", "Drugs have started to make the effect.");

		playerVariables[playerid][pDrugs] -= 1;
		Update(playerid, pDrugsx);
		
		UsingDrugs[playerid] = 0;
		ClearAnimations(playerid);
		SetPlayerDrunkLevel(playerid, 0);
	}
	return 1;
}
public MySQLCheckAccount(sqlplayersname[])
{
	new query[128], escstr[MAX_PLAYER_NAME];
		
	mysql_real_escape_string(sqlplayersname, escstr);
	format(query, sizeof(query), "SELECT * FROM `players` WHERE `username` = '%s' ORDER BY `ID` ASC", escstr);
	mysql_query(handle,query);
	mysql_store_result();
	if (mysql_num_rows()==0)
	{
	    mysql_free_result();
		return 0;
	}
	else
	{
		new strid[32], intid;

		mysql_fetch_row(strid);
		intid = strval(strid);
	    mysql_free_result();
		return intid;
	}
}
public Fishing(playerid)
{
    if(playerVariables[playerid][pAlreadyFish] == 1)
  	{
  	    new string[256];
  	    
  	    
  	    if(playerVariables[playerid][pFishSkill] == 1)
  	    {
	  	    new Random = random(100);
			if(Random >= 99)
			{
		  	    new value = 75000 + random(25000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_RED, "Ai prins un peste foarte rar!", "You caught a very rare fish!");
		  	    format(string, sizeof(string), "* %s caught a very rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);

			}
			if(Random >= 94 && Random < 99)
			{
				new value = 20000 + random(20000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_BLUE, "Ai prins un peste rar!", "You caught a rare fish!");
		  	    format(string, sizeof(string), "* %s caught a rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
			if(Random < 94)
			{
				new value = 10000+ random(15000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_IN2, "Ai prins un peste obisnuit!", "You caught a common fish!");
		  	    format(string, sizeof(string), "* %s caught a common fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
		}
  		if(playerVariables[playerid][pFishSkill] == 2)
  	    {
	  	    new Random = random(100);
			if(Random >= 98)
			{
		  	    new value = 75000 + random(25000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_RED, "Ai prins un peste foarte rar!", "You caught a very rare fish!");
		  	    format(string, sizeof(string), "* %s caught a very rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);

			}
			if(Random >= 93 && Random < 98)
			{
				new value = 20000 + random(20000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_BLUE, "Ai prins un peste rar!", "You caught a rare fish!");
		  	    format(string, sizeof(string), "* %s caught a rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
			if(Random < 93)
			{
				new value = 10000+ random(15000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_IN2, "Ai prins un peste obisnuit!", "You caught a common fish!");
		  	    format(string, sizeof(string), "* %s caught a common fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
		}
  		if(playerVariables[playerid][pFishSkill] == 3)
  	    {
	  	    new Random = random(100);
			if(Random >= 97)
			{
		  	    new value = 75000 + random(25000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_RED, "Ai prins un peste foarte rar!", "You caught a very rare fish!");
		  	    format(string, sizeof(string), "* %s caught a very rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);

			}
			if(Random >= 92 && Random < 97)
			{
				new value = 20000 + random(20000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_BLUE, "Ai prins un peste rar!", "You caught a rare fish!");
		  	    format(string, sizeof(string), "* %s caught a rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
			if(Random < 92)
			{
				new value = 10000+ random(15000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_IN2, "Ai prins un peste obisnuit!", "You caught a common fish!");
		  	    format(string, sizeof(string), "* %s caught a common fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
		}
  		if(playerVariables[playerid][pFishSkill] == 4)
  	    {
	  	    new Random = random(100);
			if(Random >= 97)
			{
		  	    new value = 75000 + random(25000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_RED, "Ai prins un peste foarte rar!", "You caught a very rare fish!");
		  	    format(string, sizeof(string), "* %s caught a very rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);

			}
			if(Random >= 91 && Random < 97)
			{
				new value = 20000 + random(20000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_BLUE, "Ai prins un peste rar!", "You caught a rare fish!");
		  	    format(string, sizeof(string), "* %s caught a rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
			if(Random < 91)
			{
				new value = 10000+ random(15000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_IN2, "Ai prins un peste obisnuit!", "You caught a common fish!");
		  	    format(string, sizeof(string), "* %s caught a common fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
		}
  		if(playerVariables[playerid][pFishSkill] == 5)
  	    {
	  	    new Random = random(100);
			if(Random >= 96)
			{
		  	    new value = 75000 + random(25000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_RED, "Ai prins un peste foarte rar!", "You caught a very rare fish!");
		  	    format(string, sizeof(string), "* %s caught a very rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);

			}
			if(Random >= 90 && Random < 96)
			{
				new value = 20000 + random(20000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_BLUE, "Ai prins un peste rar!", "You caught a rare fish!");
		  	    format(string, sizeof(string), "* %s caught a rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
			if(Random < 90)
			{
				new value = 10000+ random(15000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_IN2, "Ai prins un peste obisnuit!", "You caught a common fish!");
		  	    format(string, sizeof(string), "* %s caught a common fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
		}
  		if(playerVariables[playerid][pFishSkill] == 6)
  	    {
	  	    new Random = random(100);
			if(Random >= 96)
			{
		  	    new value = 75000 + random(25000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_RED, "Ai prins un peste foarte rar!", "You caught a very rare fish!");
		  	    format(string, sizeof(string), "* %s caught a very rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);

			}
			if(Random >= 85 && Random < 96)
			{
				new value = 20000 + random(20000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_BLUE, "Ai prins un peste rar!", "You caught a rare fish!");
		  	    format(string, sizeof(string), "* %s caught a rare fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
			if(Random < 85)
			{
				new value = 10000+ random(15000);
		  	    playerVariables[playerid][pFishPrice] = value;

		  	    SS(playerid, COLOR_IN2, "Ai prins un peste obisnuit!", "You caught a common fish!");
		  	    format(string, sizeof(string), "* %s caught a common fish that cand be sold for about $%s.", GetName(playerid), NumberFormat(value));
				nearByMessage(playerid, COLOR_YELLOW, string);
			}
		}
  		
  		SS(playerid, COLOR_WHITE, "Mergi la un magazin de tip 24/7 pentru a vinde pestele.", "Go to the 24/7 shop to sell your fish.");
		ClearAnimations(playerid);
		RemovePlayerAttachedObject(playerid, 0);
		RemovePlayerAttachedObject(playerid, undita);
		playerVariables[playerid][pFish] = 1;
		playerVariables[playerid][pJobDelay] = 100;
		playerVariables[playerid][pAlreadyFish] = 0;
	}
    return 1;
}


public Reportul(playerid)
{
	format(reporttext[playerid], 30, "NULL");
	ReportTime[playerid] = 0;
	KillTimer(timerreport[playerid]);
}



forward AttachTrailTruck(trailer, car);
public AttachTrailTruck(trailer, car)
{
	AttachTrailerToVehicle(trailer,car);
	LinkVehicleToInterior(trailer,0);
	return 1;
}
forward Repair(playerid);
public Repair(playerid)
{
	new vehicle = GetPlayerVehicleID(playerid);

 	new Float: fPos[3];
    GetVehiclePos(vehicle, fPos[0], fPos[1], fPos[2]);
    PlayerPlaySoundEx(1133, fPos[0], fPos[1], fPos[2]);
    RepairVehicle(vehicle);
    SetVehicleHealth(vehicle, 1000.0);
    pRepairing[playerid] = 0;
  	return 1;
}



public OnPlayerUseVending(playerid)
{
	if(GetPlayerCash(playerid) < 200) return S(playerid, COLOR_GREY,"You don't have money needed.");
	
	new Float: health;
	GetPlayerHealth(playerid, health);
	
	if(health > 99) SetPlayerHealthEx(playerid, 99);
    	
	SetPlayerHealthEx(playerid, health+35);

	GivePlayerCash(playerid, -200);
	Update(playerid, pCashx);
	GameTextForPlayer(playerid, "~r~-$200", 3000, 1);
	
	new string[128];
	format(string, sizeof(string), "* %s bought a drink from the vending machine.", GetName(playerid));
	nearByMessage(playerid, COLOR_PURPLE, string);

	return 1;
}
public MySQLCheckCar(carname[])
{
	new query[128],
		escstr[MAX_PLAYER_NAME];
	mysql_real_escape_string(carname, escstr);
	format(query, sizeof(query), "SELECT `ID` FROM stock WHERE `Car` = '%s'", escstr);
	mysql_query(handle, query);
	mysql_store_result();
	if (mysql_num_rows()==0)
	{
	    mysql_free_result();
		return 0;
	}
	else
	{
		new strid[32],
			intid;
		mysql_fetch_row(strid);
		intid = strval(strid);
	    mysql_free_result();
		return intid;
	}
}

public CheckCar()
{
    new string[256];
	foreach(Player, i)
	{
 		if(GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
		{
			new Speed = GetSpeed(i);
 			new vehicleid = GetPlayerVehicleID(i);
 			
 			
 			format(string,sizeof(string),"SPEED: ~y~%d KM/H", Speed);
			TextDrawSetString(TextDrawCar[i][0], string);
			TextDrawShowForPlayer(i, TextDrawCar[i][0]);
 			
		    if(IsABike(vehicleid))
			{
				if(Lock[vehicleid] == 0)
				{
					format(string,sizeof(string),"~w~UNLOCKED");
					TextDrawSetString(TextDrawCar[i][2], string);
					TextDrawShowForPlayer(i, TextDrawCar[i][2]);
				}
				else
				{
					format(string,sizeof(string),"~y~LOCKED");
					TextDrawSetString(TextDrawCar[i][2], string);
					TextDrawShowForPlayer(i, TextDrawCar[i][2]);
				}
			}
			else
			{
				format(string,sizeof(string),"FUEL: ~y~%d", Gas[vehicleid]);
				TextDrawSetString(TextDrawCar[i][2], string);
				TextDrawShowForPlayer(i, TextDrawCar[i][2]);
				
				if(vPersonal[GetPlayerVehicleID(i)])
				{
					TextDrawShowForPlayer(i, TextDrawCar[i][4]);
					format(string,sizeof(string),"Odometer: ~y~%dKM", carVariables[vPersonal[GetPlayerVehicleID(i)]][cKM]);
					TextDrawSetString(TextDrawCar[i][4], string );

					if(carVariables[vPersonal[GetPlayerVehicleID(i)]][cLock] == 0)
					{
						format(string,sizeof(string),"~w~UNLOCKED");
						TextDrawSetString(TextDrawCar[i][7], string);
						TextDrawShowForPlayer(i, TextDrawCar[i][7]);
					}
					else
					{
						format(string,sizeof(string),"~y~LOCKED");
						TextDrawSetString(TextDrawCar[i][7], string);
						TextDrawShowForPlayer(i, TextDrawCar[i][7]);
					}
				}
				else
				{
					if(Lock[vehicleid] == 0)
					{
						format(string,sizeof(string),"~w~UNLOCKED");
						TextDrawSetString(TextDrawCar[i][3], string);
						TextDrawShowForPlayer(i, TextDrawCar[i][3]);
					}
					else
					{
						format(string,sizeof(string),"~y~LOCKED");
						TextDrawSetString(TextDrawCar[i][3], string);
						TextDrawShowForPlayer(i, TextDrawCar[i][3]);
					}
				}











			    /*if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			    {
			 		if(IsABike(vehicleid) || IsAFaggio(vehicleid) || IsAMotoare(vehicleid) || IsAPlane(vehicleid) || IsABoat(vehicleid))
			 		{
			 		    TextDrawHideForPlayer(i, TextDrawCar[i][6]);
			 		}
			 		else
			 		{
						if(playerVariables[i][pBelt] == 0)
						{
							format(string,sizeof(string),"BELT: ~r~NO");
							TextDrawSetString(TextDrawCar[i][6], string);
							TextDrawShowForPlayer(i, TextDrawCar[i][6]);
						}
						else
						{
							format(string,sizeof(string),"BELT: ~g~YES");
							TextDrawSetString(TextDrawCar[i][6], string);
							TextDrawShowForPlayer(i, TextDrawCar[i][6]);
						}
					}
				}*/
			}
		}
	}
	return 1;
}
public restartTimer()
{
	iGMXTick--;
	switch(iGMXTick)
	{
	    case 0:
		{
			mysql_close();
			KillTimer(iGMXTimer);
			SendRconCommand("gmx");
	    }
	    case 1: GameTextForAll("~w~The server will restart...~n~ ~r~NOW!", 1100, 5);
	    case 2: GameTextForAll("~w~The server will restart in...~n~ ~r~2~w~ seconds.", 1100, 5);
	    case 3: GameTextForAll("~w~The server will restart in...~n~ ~r~3~w~ seconds.", 1100, 5);
	    case 4: GameTextForAll("~w~The server will restart in...~n~ ~r~4~w~ seconds.", 1100, 5);
	    case 5: GameTextForAll("~w~The server will restart in...~n~ ~r~5~w~ seconds.", 1100, 5);
	    case 6: GameTextForAll("~w~The server will restart in...~n~ ~r~6~w~ seconds.", 1100, 5);
	    case 7: GameTextForAll("~w~The server will restart in...~n~ ~r~7~w~ seconds.", 1100, 5);
	    case 8: GameTextForAll("~w~The server will restart in...~n~ ~r~8~w~ seconds.", 1100, 5);
	    case 9: GameTextForAll("~w~The server will restart in...~n~ ~r~9~w~ seconds.", 1100, 5);
		case 10: GameTextForAll("~w~The server will restart in...~n~ ~r~10~w~ seconds.", 1100, 5);
		case 11: GameTextForAll("~w~The server will restart in...~n~ ~r~11~w~ seconds.", 1100, 5);
		case 12: GameTextForAll("~w~The server will restart in...~n~ ~r~12~w~ seconds.", 1100, 5);
		case 13: GameTextForAll("~w~The server will restart in...~n~ ~r~13~w~ seconds.", 1100, 5);
		case 14: GameTextForAll("~w~The server will restart in...~n~ ~r~14~w~ seconds.", 1100, 5);
		case 15: GameTextForAll("~w~The server will restart in...~n~ ~r~15~w~ seconds.", 1100, 5);
		case 16: GameTextForAll("~w~The server will restart in...~n~ ~r~16~w~ seconds.", 1100, 5);
		case 17: GameTextForAll("~w~The server will restart in...~n~ ~r~17~w~ seconds.", 1100, 5);
		case 18: GameTextForAll("~w~The server will restart in...~n~ ~r~18~w~ seconds.", 1100, 5);
		case 19: GameTextForAll("~w~The server will restart in...~n~ ~r~19~w~ seconds.", 1100, 5);
		case 20: GameTextForAll("~w~The server will restart in...~n~ ~r~20~w~ seconds.", 1100, 5);
		case 21: GameTextForAll("~w~The server will restart in...~n~ ~r~21~w~ seconds.", 1100, 5);
		case 22: GameTextForAll("~w~The server will restart in...~n~ ~r~22~w~ seconds.", 1100, 5);
		case 23: GameTextForAll("~w~The server will restart in...~n~ ~r~23~w~ seconds.", 1100, 5);
		case 24: GameTextForAll("~w~The server will restart in...~n~ ~r~24~w~ seconds.", 1100, 5);
		case 25: GameTextForAll("~w~The server will restart in...~n~ ~r~25~w~ seconds.", 1100, 5);
		case 26: GameTextForAll("~w~The server will restart in...~n~ ~r~26~w~ seconds.", 1100, 5);
		case 27: GameTextForAll("~w~The server will restart in...~n~ ~r~27~w~ seconds.", 1100, 5);
		case 28: GameTextForAll("~w~The server will restart in...~n~ ~r~28~w~ seconds.", 1100, 5);
		case 29: GameTextForAll("~w~The server will restart in...~n~ ~r~29~w~ seconds.", 1100, 5);
		case 30: GameTextForAll("~w~The server will restart in...~n~ ~r~30~w~ seconds.", 1100, 5);

	}
	return 1;
}


public CheckGas()
{
	foreach(Player, i)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
       	    {

	       		new vehicle = GetPlayerVehicleID(i), Float:carhealth;

	       		GetVehicleHealth(vehicle, carhealth);
       	    	carVariables[vPersonal[GetPlayerVehicleID(i)]][cHP] = carhealth;
       	    	vUpdate(vPersonal[GetPlayerVehicleID(i)], cHPx);

	        	if(Gas[vehicle] >= 1)
		   		{
					if(IsAPlane(vehicle) || IsABike(vehicle) || IsABoat(vehicle))
					{
						Gas[vehicle] = 100;
					}

  					new speed = GetSpeed(i);
					if(speed>5)
					{
						if(vPersonal[GetPlayerVehicleID(i)])
						{
							Gas[vehicle]--;
							carVariables[vPersonal[GetPlayerVehicleID(i)]][cFuel] --;
							vUpdate(vPersonal[GetPlayerVehicleID(i)], cFuelx);	
						}
						else
						{
							Gas[vehicle]--;	
						}
					}
				}
	   			else
	           	{
	              	GameTextForPlayer(vehicle,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~NO FUEL...",2000,3);
					GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicle, 0, lights, alarm, doors, bonnet, boot, objective);
				}
			}
    	}
	}
	return 1;
}
public WeatherChange()
{
     new var = random(17);
     switch (var)
     {
         case 0: SendRconCommand("weather 0");
         case 1: SendRconCommand("weather 1");
         case 2: SendRconCommand("weather 2");
         case 3: SendRconCommand("weather 3");
		 case 4: SendRconCommand("weather 4");
		 case 5: SendRconCommand("weather 5");
         case 6: SendRconCommand("weather 6");
         case 7: SendRconCommand("weather 7");
		 case 8: SendRconCommand("weather 10");
		 case 9: SendRconCommand("weather 11");
		 case 10: SendRconCommand("weather 12");
		 case 11: SendRconCommand("weather 13");
		 case 12: SendRconCommand("weather 14");
		 case 13: SendRconCommand("weather 15");
		 case 14: SendRconCommand("weather 17");
		 case 15: SendRconCommand("weather 18");
		 case 16: SendRconCommand("weather 20");
	}
}
forward IsACop(playerid);
public IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new member = playerVariables[playerid][pGroup];
	    	
	    if(member == 1 || member == 2)
		{
		    return 1;
		}
	}
	return 0;
}
public SendTeamMessage(member, color, string[])
{
	foreach(Player, i)
	{
	    if(playerVariables[i][pGroup] == member)
	    {
			S(i, color, string);
		}
	}
	return 1;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);

		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);

		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
public MessageTimer()
{
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
	   	{
	 		if(playerVariables[i][pAdminLevel] < 1 && playerVariables[i][pHelperLevel] < 1 && playerVariables[i][pLevel] < 6 && playerVariables[i][pTutorial] == 1)
			{
			    if(playerVariables[i][pStatus] == 1)
				{
					new randMSG = random(sizeof(RandomMSG));
					SS(i,0x78AE68FF, RandomMSG[randMSG], RandomMSG[randMSG]);
				}
			}
		}
	}
}
public PlaceAD(playerid)
{
	new string[256];
	KillTimer(AdvTimer[playerid]);

    format(string,sizeof(string),"Ad by %s (phone: {FFFFFF}%d{00FF00}): %s", N(playerid), playerVariables[playerid][pPhoneNumber], AdvMSG[playerid]);
	foreach(Player, i)
	{
		if(i != playerid)
		{
			if(playerVariables[i][pAdminLevel] == 0)
			{
			    if(playerVariables[i][pHelperLevel] == 0)
			    {
					SendSplitMessage(i, COLOR_GREEN, string);
				}
			}
		}
	}

	SS(playerid, -1, "{33AA33}Anuntul tau:", "{33AA33}Your ad:");

	format(string,sizeof(string),"{33AA33}Ad by %s (phone: %d): %s", N(playerid), playerVariables[playerid][pPhoneNumber], AdvMSG[playerid]);
	SendSplitMessage(playerid, -1, string);

	AdvPlayer[playerid] = 0;
	format(AdvMSG[playerid], 256, "");
	return 1;
}
public ScadeViata(playerid)
{
	if(playerVariables[playerid][pStatus] == 1)
	{
 		if(playerVariables[playerid][pSleep] == 0)
   		{
   		    if(playerVariables[playerid][pAdminDuty] == 0)
   		    {
				new Float: health;

				GetPlayerHealth(playerid, health);
				SetPlayerHealthEx(playerid, health-1);
			}
		}
 	}
}
public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new	Float:x1,
		Float:y1,
		Float:z1,
		Float:x2,
		Float:y2,
		Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}


public offadminduty(playerid)
{
	S(playerid, COLOR_IN2, "You are now off duty!");
	playerVariables[playerid][pAdminDuty] = 0;
    SetPlayerHealthEx(playerid, 100.0);
    SetPlayerArmourEx(playerid, 0.0);
    
    new vehicleid = GetPlayerVehicleID(playerid);
    
    new i = vehicleid;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(vehicleVariables[i][vVehicleGroup] != 0 && vehicleVariables[i][vVehicleGroup] != playerVariables[playerid][pGroup])
		{
			RemovePlayerFromVehicleEx(playerid);
			format(szMessage, sizeof(szMessage), "Aceasta masina poate fi condusa doar de membrii %s.", groupVariables[vehicleVariables[i][vVehicleGroup]][gGroupName]);
			S(playerid, COLOR_WHITE, szMessage);
		}
		if(vehicleVariables[i][vVehicleJob] != 0 && vehicleVariables[i][vVehicleJob] != playerVariables[playerid][pJob])
		{
			RemovePlayerFromVehicleEx(playerid);
			if(playerVariables[playerid][pLimba] == 1)
			{
				format(szMessage, sizeof(szMessage), "Nu poti conduce aceasta masina pentru ca nu ai jobul %s.", jobVariables[vehicleVariables[i][vVehicleJob]][jJobName]);
				S(playerid, COLOR_GREY, szMessage);
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				format(szMessage, sizeof(szMessage), "You don't have job %s to drive this vehicle.", jobVariables[vehicleVariables[i][vVehicleJob]][jJobName]);
				S(playerid, COLOR_GREY, szMessage);
			}
		}
	}
	return 1;
}
public unfreezeint(playerid)
{
    playerVariables[playerid][pFreezeTime] = 0;
	playerVariables[playerid][pFreezeType] = 0;
	TogglePlayerControllable(playerid, 1);
    return 1;
}
public QuestChange(playerid)
{
	if(playerVariables[playerid][pLevel] < 3 && playerVariables[playerid][pQuest] == 0)
    {
		new rand;
		rand = random(10) % 9+1;

    	playerVariables[playerid][pQuest] = rand;
		Update(playerid, pQuestx);
    }
    if(playerVariables[playerid][pQuest] == 5 || playerVariables[playerid][pQuest] == 8 || playerVariables[playerid][pQuest] == 9)
    {
	    new amount = 5 + random(3);
		playerVariables[playerid][pQuestPrins] = amount;
		Update(playerid, pQuestPrinsx);
	}
    return 1;
}


public timerbusiness(playerid)
{
	LastBiz[playerid] = -1;
	return 1;
}
public timerbusiness2(playerid)
{
	LastBiz[playerid] = -1;
	return 1;
}
public IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
		{
			return 0;
		}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY])
		{
	 		return 1;
		}
	}
	return 0;
}




public OnGameModeExit()
{
    KillTimer(timer);
    KillTimer(timebiz2);
    
    new qqerry[128];
   	mysql_format(handle, qqerry, sizeof(qqerry), "UPDATE `players` SET `Status` = '0'");
    mysql_tquery(handle, qqerry, "","");
    
	new x;
	while(x < MAX_TIMERS)
	{
	    KillTimer(scriptTimers[x]);
		x++;
	}
	
 	for(new xh = 0; xh < MAX_HOUSES; xh++)
	{
        saveHouse(xh);
	}
	for(new xf = 0; xf < MAX_GROUPS; xf++)
	{
        saveGroup(xf);
	}
	for(new xf = 0; xf < MAX_BUSINESSES; xf++)
 	{
        saveBusiness(xf);
	}
	
    mysql_close();
    GameModeExit();
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	return 1;
}



public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    return 1;
}
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == 2)
    {
  		if(playerVariables[playerid][pCash] >= 2500)
		{
			new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
   			new skin;
            skin = GetPlayerSkin(playerid);

            SetPlayerAttachedObject(playerid, 0, modelid, 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5], 1.000000, 1.000000, 1.000000);

			businessVariables[businessID][bVault] += 2500;
			
			playerVariables[playerid][pHat] = modelid;
			Update(playerid, pHatx);
			pUseHat[playerid] = 1;
			
            GivePlayerCash(playerid, -2500);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
   			saveBusiness(businessID);
   			GameTextForPlayer(playerid,"~r~-$2500", 1500, 1);
		}
		else return S(playerid, COLOR_GREY, "You don't have money.");
    }
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == glskinlist)
    {
        if(response)
        {
        	if(playerVariables[playerid][pCash] >= 2500)
			{
	        	new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;

				businessVariables[businessID][bVault] += 2500;
	            GivePlayerCash(playerid, -2500);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	   			playerVariables[playerid][pGlasses] = modelid;
	   			Update(playerid, pGlassesx);
	   			saveBusiness(businessID);
	   			pUseGlasses[playerid] = 1;
	   			GameTextForPlayer(playerid,"~r~-$2500", 1500, 1);
	   			SetPlayerAttachedObject(playerid,1,playerVariables[playerid][pGlasses],2,0.1,0.04,0.0,60.0,85.0,25.0,1.0,1.0,1.0);
	        }
	        else return S(playerid, COLOR_GREY, "You don't have money.");
		}
        return 1;
    }
    if(listid == skinlist || listid == skinlistMEDIC || listid == skinlistTX || listid == skinlistFBI || listid == skinlistSI || listid == skinlistHA || listid == skinlistPD || listid == skinlistNR || listid == skinlistGrove || listid == skinlistBallas)
	{
 		if(response)
 		{
   			if(playerVariables[playerid][pCash] >= 5000)
			{
			    new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid,"~r~-$5000", 1500, 1);
				
				businessVariables[businessID][bVault] += 5000;

				GivePlayerCash(playerid, -5000);

				SetPlayerSkin(playerid, modelid);
				playerVariables[playerid][pSkin] = modelid;
				Update(playerid, pSkinx);
				
				saveBusiness(businessID);
			}
		    else return S(playerid, COLOR_GREY, "You don't have money.");
   		}
   		return 1;
   	}
  	return 1;
}

public OnPlayerConnect(playerid)
{
	new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name,   sizeof(name));
    
    if(!strfind("bugged", name, true) || !strfind("bzone", name, true) || !strfind("b-zone", name, true) || !strfind("bagd", name, true) || !strfind("ogtimes", name, true) || !strfind("og-times", name, true) || !strfind("bigzone", name, true) ||
    !strfind("rpg1", name, true) || !strfind("rpg2", name, true) || !strfind("rpg3", name, true) || !strfind("rpg4", name, true) || !strfind("old-school.", name, true) || !strfind("time4play", name, true) || !strfind("progaming", name, true) ||
    !strfind("pro-gaming", name, true) || !strfind("just2play", name, true) || !strfind("playnion", name, true) || !strfind("tp4", name, true))
    {
        Kick(playerid);
    }



    SetPlayerColor(playerid, COLOR_WHITE);
    
    WeaponData[playerid][0] = false; 			WeaponData[playerid][1] = false;
	WeaponData[playerid][2] = false;			WeaponData[playerid][3] = false;
	WeaponData[playerid][4] = false; 			WeaponData[playerid][5] = false;
	WeaponData[playerid][6] = false; 			WeaponData[playerid][7] = false;
	WeaponData[playerid][8] = false; 			WeaponData[playerid][9] = false;
	WeaponData[playerid][10] = false; 			WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;

	gRegistred[playerid] = 0; TutorialTime[playerid] = 0;
	playerVariables[playerid][pRegistred] = 0;
    playerVariables[playerid][pTutorial] = 0;
    playerVariables[playerid][pSex] = 0;
    


    CheckDelay[playerid] = 0;
	Mobile[playerid] = -1;
	TransportDuty[playerid] = 0;

    playerVariables[playerid][pLive] = 0;

	PlayerTextDrawShow(playerid, leet[playerid]);
	
	format(AdvMSG[playerid], 256, "");
	AdvPlayer[playerid] = 0;
	
	LiveOffer[playerid] = -1;
	TalkingLive[playerid] = 0;
	playerdeath[playerid] = 0;
	farmerc[playerid] = 0;
	EnterInModShop[playerid] = 0;
    pUseGlasses[playerid] = 0;
    turfshow[playerid] = 0;
    pUseHat[playerid] = 0;
    pRepairing[playerid] = 0;
    pUseFly[playerid] = 0;
    CP[playerid] = 0;
    JucatorCautat[playerid] = -1;
    pUseFind[playerid] = 0;
    InHQ[playerid] = -1;
    
    Diceid[playerid] = -1;
    Dicem[playerid] = -1;

    ReportTime[playerid] = 0;

    LastPlayer[playerid] = -1;
    LastBiz[playerid] = -1;
    HireCar[playerid] = -1;
    
    
    TransferOffer[playerid] = 999;
    TransferMoney[playerid] = 0;

    TaxiCall[playerid] = -1;


    matsOffer[playerid] = -1;
    matsOffered[playerid] = -1;
	matsmoney[playerid] = -1;
	matsamount[playerid] = -1;
	
	GunOffer[playerid] = -1;
	GunOffered[playerid] = -1;
	GunModel[playerid] = -1;
	GunPrice[playerid] = -1;



	BanCheck(playerid);



	Spectate[playerid] = -1;
	drugs[playerid] = 999;
	drugsmoney[playerid] = 999;
	drugsamount[playerid] = 999;
	RepairOffer[playerid] = 999;
	RepairPrice[playerid] = 0;
	RefillOffer[playerid] = 999;
	RefillPrice[playerid] = 0;
	RepairCar[playerid] = 0;
	WatchingTV[playerid] = 0;

	IsPlayerAFK[playerid] = 0;
	pizzaprize[playerid] = 0;

	format(reporttext[playerid], 30, "NULL");

	togc[playerid] = 0;
	toglc[playerid] = 0;
	tognews[playerid] = 0;
	

	HidePM[playerid] = 0;

    RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
	
	
 	farmbox[playerid] = CreatePlayerTextDraw(playerid, 199.599990, 185.926666, "usebox");
	PlayerTextDrawLetterSize(playerid, farmbox[playerid], 0.000000, 7.149999);
	PlayerTextDrawTextSize(playerid, farmbox[playerid], -3.599999, 0.000000);
	PlayerTextDrawAlignment(playerid, farmbox[playerid], 1);
	PlayerTextDrawColor(playerid, farmbox[playerid], 0);
	PlayerTextDrawUseBox(playerid, farmbox[playerid], true);
	PlayerTextDrawBoxColor(playerid, farmbox[playerid], 102);
	PlayerTextDrawSetShadow(playerid, farmbox[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmbox[playerid], 0);
	PlayerTextDrawFont(playerid, farmbox[playerid], 0);
	
	TimeLeftWar1[playerid] = CreatePlayerTextDraw(playerid, 501.600036, 221.759963, " ");
	PlayerTextDrawLetterSize(playerid, TimeLeftWar1[playerid], 0.332400, 2.264533);
	PlayerTextDrawAlignment(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawColor(playerid, TimeLeftWar1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TimeLeftWar1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TimeLeftWar1[playerid], 255);
	PlayerTextDrawFont(playerid, TimeLeftWar1[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TimeLeftWar1[playerid], 1);

	UndercoverText[playerid] = CreatePlayerTextDraw(playerid, 250.000000, 425.000000, "~r~you are undercover");
	PlayerTextDrawBackgroundColor(playerid, UndercoverText[playerid], 255);
	PlayerTextDrawFont(playerid, UndercoverText[playerid], 3);
	PlayerTextDrawLetterSize(playerid, UndercoverText[playerid], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid, UndercoverText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, UndercoverText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, UndercoverText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, UndercoverText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, UndercoverText[playerid], 0);

	farmjob[playerid] = CreatePlayerTextDraw(playerid, 6.399997, 183.679962, "JOB");
	PlayerTextDrawLetterSize(playerid, farmjob[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, farmjob[playerid], 1);
	PlayerTextDrawColor(playerid, farmjob[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmjob[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmjob[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmjob[playerid], 51);
	PlayerTextDrawFont(playerid, farmjob[playerid], 0);
	PlayerTextDrawSetProportional(playerid, farmjob[playerid], 1);

	farmspeedro[playerid] = CreatePlayerTextDraw(playerid, 3.199995, 219.519958, "~r~(!) Trebuie sa mergi cu o viteza mai mare de 25KM/H.");
	PlayerTextDrawLetterSize(playerid, farmspeedro[playerid], 0.193999, 1.555199);
	PlayerTextDrawAlignment(playerid, farmspeedro[playerid], 1);
	PlayerTextDrawColor(playerid, farmspeedro[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmspeedro[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmspeedro[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmspeedro[playerid], 255);
	PlayerTextDrawFont(playerid, farmspeedro[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmspeedro[playerid], 1);
	
	farmspeeden[playerid] = CreatePlayerTextDraw(playerid, 3.199995, 219.519958, "~r~(!) Your moving speed needs to be higher than 25KM/H.");
	PlayerTextDrawLetterSize(playerid, farmspeeden[playerid], 0.193999, 1.555199);
	PlayerTextDrawAlignment(playerid, farmspeeden[playerid], 1);
	PlayerTextDrawColor(playerid, farmspeeden[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmspeeden[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmspeeden[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmspeeden[playerid], 255);
	PlayerTextDrawFont(playerid, farmspeeden[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmspeeden[playerid], 1);
	
	
	
	

	farmtime[playerid] = CreatePlayerTextDraw(playerid, 2.399992, 203.093383, " ");
	PlayerTextDrawLetterSize(playerid, farmtime[playerid], 0.204399, 1.592533);
	PlayerTextDrawAlignment(playerid, farmtime[playerid], 1);
	PlayerTextDrawColor(playerid, farmtime[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmtime[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmtime[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmtime[playerid], 255);
	PlayerTextDrawFont(playerid, farmtime[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmtime[playerid], 1);
	
	farmwantedro[playerid] = CreatePlayerTextDraw(playerid, 2.400026, 219.520034, "~r~Mergi inapoi la ferma sau vei primi wanted !");
	PlayerTextDrawLetterSize(playerid, farmwantedro[playerid], 0.241199, 1.697066);
	PlayerTextDrawAlignment(playerid, farmwantedro[playerid], 1);
	PlayerTextDrawColor(playerid, farmwantedro[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmwantedro[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmwantedro[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmwantedro[playerid], 255);
	PlayerTextDrawFont(playerid, farmwantedro[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmwantedro[playerid], 1);
	
	farmwanteden[playerid] = CreatePlayerTextDraw(playerid, 2.400026, 219.520034, "~r~Go back to the farm or the farms owners ~n~will call the police !");
	PlayerTextDrawLetterSize(playerid, farmwanteden[playerid], 0.241199, 1.697066);
	PlayerTextDrawAlignment(playerid, farmwanteden[playerid], 1);
	PlayerTextDrawColor(playerid, farmwanteden[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmwanteden[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmwanteden[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmwanteden[playerid], 255);
	PlayerTextDrawFont(playerid, farmwanteden[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmwanteden[playerid], 1);
	
	
	
 	findplayer[playerid] = CreatePlayerTextDraw(playerid, 305.399719, 420.250000, "DISTANCE");
	PlayerTextDrawLetterSize(playerid, findplayer[playerid], 0.200000, 1.800000);
	PlayerTextDrawAlignment(playerid, findplayer[playerid], 1);
	PlayerTextDrawColor(playerid, findplayer[playerid], -1);
	PlayerTextDrawSetOutline(playerid, findplayer[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, findplayer[playerid], 255);
	PlayerTextDrawFont(playerid, findplayer[playerid], 2);
	PlayerTextDrawSetProportional(playerid, findplayer[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, findplayer[playerid], 0);
	
	findplayer2[playerid] = CreatePlayerTextDraw(playerid, 305.399719, 405.250000, "TARGET");
	PlayerTextDrawLetterSize(playerid, findplayer2[playerid], 0.200000, 1.800000);
	PlayerTextDrawAlignment(playerid, findplayer2[playerid], 1);
	PlayerTextDrawColor(playerid, findplayer2[playerid], -1);
	PlayerTextDrawSetOutline(playerid, findplayer2[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, findplayer2[playerid], 255);
	PlayerTextDrawFont(playerid, findplayer2[playerid], 2);
	PlayerTextDrawSetProportional(playerid, findplayer2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, findplayer2[playerid], 0);

	leet[playerid] = CreatePlayerTextDraw(playerid, 636.000000, 429.333374, "RPG.LEET.RO");
	PlayerTextDrawLetterSize(playerid, leet[playerid],  0.271874, 1.862499);
	PlayerTextDrawAlignment(playerid, leet[playerid], 3);
	PlayerTextDrawColor(playerid, leet[playerid], COLOR_WHITE);
	PlayerTextDrawSetOutline(playerid, leet[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, leet[playerid], 255);
	PlayerTextDrawFont(playerid, leet[playerid], 2);
	PlayerTextDrawSetProportional(playerid, leet[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, leet[playerid], 0);

	DMV1[playerid] = CreatePlayerTextDraw(playerid, 223.000000, 347.083404, "~y~Driving School Exam");
	PlayerTextDrawLetterSize(playerid, DMV1[playerid], 0.471874, 1.862499);
	PlayerTextDrawAlignment(playerid, DMV1[playerid], 1);
	PlayerTextDrawColor(playerid, DMV1[playerid], -1);
	PlayerTextDrawSetOutline(playerid, DMV1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, DMV1[playerid], 255);
	PlayerTextDrawFont(playerid, DMV1[playerid], 2);

	DMV2[playerid] = CreatePlayerTextDraw(playerid, 223.000000, 365.749969, "Checkpoints: ~r~69/69");
	PlayerTextDrawLetterSize(playerid, DMV2[playerid], 0.471874, 1.862499);
	PlayerTextDrawAlignment(playerid, DMV2[playerid], 1);
	PlayerTextDrawColor(playerid, DMV2[playerid], -1);
	PlayerTextDrawSetOutline(playerid, DMV2[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, DMV2[playerid], 255);
	PlayerTextDrawFont(playerid, DMV2[playerid], 2);

 	Reportss[playerid] = CreatePlayerTextDraw(playerid, 498.750000, 99.166694, " ");
	PlayerTextDrawLetterSize(playerid, Reportss[playerid], 0.220000,1.300000);
	PlayerTextDrawAlignment(playerid, Reportss[playerid], 1);
	PlayerTextDrawColor(playerid, Reportss[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Reportss[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Reportss[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Reportss[playerid], 255);
	PlayerTextDrawFont(playerid, Reportss[playerid], 2);
	PlayerTextDrawSetProportional(playerid, Reportss[playerid], 1);

	taxifare[playerid] = CreatePlayerTextDraw(playerid,  60.000000, 320.750000, "Money earned: $0");
	PlayerTextDrawLetterSize(playerid, taxifare[playerid], 0.211998, 1.018123);
	PlayerTextDrawAlignment(playerid, taxifare[playerid], 1);
	PlayerTextDrawColor(playerid, taxifare[playerid], -1);
	PlayerTextDrawSetShadow(playerid, taxifare[playerid], 0);
	PlayerTextDrawSetOutline(playerid, taxifare[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, taxifare[playerid], 51);
	PlayerTextDrawFont(playerid, taxifare[playerid], 1);
	PlayerTextDrawSetProportional(playerid, taxifare[playerid], 1);


	new query[256];
  	format(query, sizeof(query), "SELECT * FROM `players` WHERE `username` = '%s'", N(playerid));
	mysql_tquery(handle, query, "WhenAccountCheck", "i", playerid);
	TogglePlayerSpectating(playerid, 0);

	return 1;
}
public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(playerVariables[playerid][pGroup] == 0)
		{
		    SetPlayerColor(playerid, COLOR_WHITE);
		}
		if(playerVariables[playerid][pGroup] == 1)
		{
		    SetPlayerColor(playerid, COLOR_PD);
		}
		if(playerVariables[playerid][pGroup] == 2)
		{
		    SetPlayerColor(playerid, COLOR_PD);
		}
		if(playerVariables[playerid][pGroup] == 3)
		{
		    SetPlayerColor(playerid, COLOR_MEDIC);
		}
		if(playerVariables[playerid][pGroup] == 4)
		{
		    SetPlayerColor(playerid, COLOR_HITMAN);
		}
		if(playerVariables[playerid][pGroup] == 5)
		{
		    SetPlayerColor(playerid, COLOR_SI);
		}
		if(playerVariables[playerid][pGroup] == 6)
		{
		    SetPlayerColor(playerid, COLOR_NR);
		}
		if(playerVariables[playerid][pGroup] == 7)
		{
		    SetPlayerColor(playerid, COLOR_YELLOW);
		}
  		if(playerVariables[playerid][pGroup] == 8)
		{
		    SetPlayerColor(playerid, COLOR_GROVE);
		}
		if(playerVariables[playerid][pGroup] == 9)
		{
		    SetPlayerColor(playerid, COLOR_BALLAS);
		}
	}
}
public OnPlayerLogin(playerid, password[])
{
    if(IsPlayerConnected(playerid))
	{
		new pName[30];
		new query[256];
		GetPlayerName(playerid, pName, sizeof(pName));

        mysql_format(handle, query, sizeof(query), "SELECT * FROM `players` WHERE `username`='%e' AND `password`= MD5('%e')", pName, password);
        mysql_tquery(handle, query, "WhenPlayerLogin", "i", playerid);

	}
	TogglePlayerSpectating(playerid, 0);
	return 1;
}
public WhenAccountCheck(playerid)
{
    new rows, fields;
    new pName[30];
	GetPlayerName(playerid, pName, sizeof(pName));

    cache_get_data(rows, fields, handle);

 	if(rows)
	{
		gRegistred[playerid] = 1;
  	}
  	else
  	{
  	    gRegistred[playerid] = 0;
	}

	new ora, minut, secunda;
	gettime(ora, minut, secunda);

	if(ora == assetVariables[10][aAssetValue])
	{
		SetWorldTime(23);
	}
	else if(ora >= assetVariables[10][aAssetValue] && ora <= 23)
	{
		SetWorldTime(23);
	}
	if(ora >= 00 && ora < assetVariables[10][aAssetValue])
	{
		SetWorldTime(ora);
	}

  	if(playerVariables[playerid][pStatus] == 0)
	{
	    if(gRegistred[playerid] == 1)
	    {
			if(rows)
		    {
			    new string[256];
			    new tmp[100];
   				GetPlayerName(playerid, pName, sizeof(pName));

   				cache_get_field_content(0, "LastLogin", tmp), strmid(playerVariables[playerid][pLastLogin], tmp, 0, 255, 255);


    			format(string,sizeof(string),"                      {BECBFC}Bun venit, {95A3FF}%s{BECBFC}. {BECBFC}Introdu parola contului mai jos.\n\n{FFFFFF}** Ultima autentificare pe acest cont a fost in data de: %s **",pName, playerVariables[playerid][pLastLogin]);
				ShowPlayerDialog(playerid, DIALOG_LOGIN ,DIALOG_STYLE_PASSWORD,"Logheaza-te",string,"Logare","Inchide");
     		}
     	}
     	else
     	{
     	    ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Inregistrare / Registration", "[RO]\n\nAcest nume nu este inregistrat. Trebuie sa iti creezi un cont ca sa joci pe server.\nTasteaza mai jos o parola pentru a te inregistra! Parola trebuie sa contina cel putin 4 caractere.\n\n[EN]\n\nThis name isn't registered. You need to create an account to play on this server.\nEnter a password to register! Your password must contain atleast 4 characters.", "Register", "Cancel");
   		}
	}

	new stringname[128];
	format(stringname,sizeof(stringname),"RPG.LEET.RO", GetName(playerid));
	PlayerTextDrawSetString(playerid, leet[playerid], stringname);
	PlayerTextDrawShow(playerid, leet[playerid]);
	return 1;
}
public OnPlayerRegister(playerid, password[])
{
    if(IsPlayerConnected(playerid))
	{
		new pName[30];
		new query[256];
		new string[256], tmp[100];
		GetPlayerName(playerid, pName, sizeof(pName));

		cache_get_field_content(0, "RegDate", tmp), strmid(playerVariables[playerid][pRegDate], tmp, 0, 255, 255);
		Update(playerid, pRegDatex);

        mysql_format(handle, query, sizeof(query), "INSERT INTO `players` (`username`,`password`) VALUES ('%e', MD5('%e'))", pName, password);
        mysql_tquery(handle, query, "", "");

        strmid(playerVariables[playerid][pPassword], password, 0, strlen(password), 255);

        format(string, sizeof(string), "Introdu parola contului mai jos!", pName);
		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Logheaza-te", string, "Logare", "Inchide");

	}
	return 1;
}
public WhenPlayerLogin(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    new rows, fields;
	    new tmp[128];
	    new pName[30];
		GetPlayerName(playerid, pName, sizeof(pName));

	    cache_get_data(rows, fields, handle);

  		if(rows != 0)
		{
		    cache_get_field_content(0, "password", tmp),  format(playerVariables[playerid][pPassword], 128, tmp);
		    cache_get_field_content(0, "username", tmp),  format(playerVariables[playerid][pUsername], 100, tmp);
			cache_get_field_content(0, "Level", tmp), playerVariables[playerid][pLevel] = strval(tmp);
			cache_get_field_content(0, "Cash", tmp), playerVariables[playerid][pCash] = strval(tmp);
			cache_get_field_content(0, "Realizari", tmp), playerVariables[playerid][pRealizari] = strval(tmp);
			cache_get_field_content(0, "Account", tmp), playerVariables[playerid][pAccount] = strval(tmp);
			cache_get_field_content(0, "Email", tmp),  format(playerVariables[playerid][pEmail], 256, tmp);
			cache_get_field_content(0, "Registred", tmp), playerVariables[playerid][pRegistred] = strval(tmp);
			cache_get_field_content(0, "Tutorial", tmp), playerVariables[playerid][pTutorial] = strval(tmp);
			cache_get_field_content(0, "Sex", tmp), playerVariables[playerid][pSex] = strval(tmp);
			cache_get_field_content(0, "Age", tmp), playerVariables[playerid][pAge] = strval(tmp);
			cache_get_field_content(0, "Skin", tmp), playerVariables[playerid][pSkin] = strval(tmp);
			cache_get_field_content(0, "Glasses", tmp), playerVariables[playerid][pGlasses] = strval(tmp);
			cache_get_field_content(0, "Quest", tmp), playerVariables[playerid][pQuest] = strval(tmp);
			cache_get_field_content(0, "Quest2", tmp), playerVariables[playerid][pQuest2] = strval(tmp);
			cache_get_field_content(0, "Quest2Value", tmp), playerVariables[playerid][pQuest2Value] = strval(tmp);
			cache_get_field_content(0, "Quest2Prins", tmp), playerVariables[playerid][pQuest2Prins] = strval(tmp);
			cache_get_field_content(0, "SpecialSkin", tmp), playerVariables[playerid][pSpecialSkin] = strval(tmp);
			cache_get_field_content(0, "QuestValue", tmp), playerVariables[playerid][pQuestValue] = strval(tmp);
			cache_get_field_content(0, "QuestPrins", tmp), playerVariables[playerid][pQuestPrins] = strval(tmp);
			cache_get_field_content(0, "QuestPoint", tmp), playerVariables[playerid][pQuestPoint] = strval(tmp);
			cache_get_field_content(0, "Gas", tmp), playerVariables[playerid][pGas] = strval(tmp);
			cache_get_field_content(0, "Hat", tmp), playerVariables[playerid][pHat] = strval(tmp);
			cache_get_field_content(0, "WKills", tmp), playerVariables[playerid][pWKills] = strval(tmp);
			cache_get_field_content(0, "WDeaths", tmp), playerVariables[playerid][pWDeaths] = strval(tmp);
			cache_get_field_content(0, "PhoneBook", tmp), playerVariables[playerid][pPhoneBook] = strval(tmp);
			cache_get_field_content(0, "FightStyle", tmp), playerVariables[playerid][pFightStyle] = strval(tmp);
			cache_get_field_content(0, "FishTimes", tmp), playerVariables[playerid][pFishTimes] = strval(tmp);
			cache_get_field_content(0, "Hidden", tmp), playerVariables[playerid][pHidden] = strval(tmp);
			cache_get_field_content(0, "Victim", tmp), format(playerVariables[playerid][pVictim], 255, tmp);
			cache_get_field_content(0, "Accused", tmp), format(playerVariables[playerid][pAccused], 255, tmp);
			cache_get_field_content(0, "Crime1", tmp), format(playerVariables[playerid][pCrime1], 255, tmp);
    		cache_get_field_content(0, "Crime2", tmp), format(playerVariables[playerid][pCrime2], 255, tmp);
    		cache_get_field_content(0, "Crime3", tmp), format(playerVariables[playerid][pCrime3], 255, tmp);
			cache_get_field_content(0, "Phone", tmp), playerVariables[playerid][pPhone] = strval(tmp);
			cache_get_field_content(0, "PhoneNumber", tmp), playerVariables[playerid][pPhoneNumber] = strval(tmp);
			cache_get_field_content(0, "Group", tmp), playerVariables[playerid][pGroup] = strval(tmp);
			cache_get_field_content(0, "GroupRank", tmp), playerVariables[playerid][pGroupRank] = strval(tmp);
			cache_get_field_content(0, "GroupDays", tmp), playerVariables[playerid][pGroupDays] = strval(tmp);
			cache_get_field_content(0, "GroupWarns", tmp), playerVariables[playerid][pGroupWarns] = strval(tmp);
			cache_get_field_content(0, "Busy", tmp), playerVariables[playerid][pBusy] = strval(tmp);
			cache_get_field_content(0, "GiftHours", tmp), playerVariables[playerid][pGiftHours] = strval(tmp);
			cache_get_field_content(0, "Limba", tmp), playerVariables[playerid][pLimba] = strval(tmp);
			cache_get_field_content(0, "AdminLevel", tmp), playerVariables[playerid][pAdminLevel] = strval(tmp);
			cache_get_field_content(0, "LicentaCondus", tmp), playerVariables[playerid][pLicentaCondus] = strval(tmp);
			cache_get_field_content(0, "Donate", tmp), playerVariables[playerid][pDonate] = strval(tmp);
			cache_get_field_content(0, "FinalTutorial", tmp), playerVariables[playerid][pFinalTutorial] = strval(tmp);
			cache_get_field_content(0, "Color", tmp), playerVariables[playerid][pColor] = strval(tmp);
			cache_get_field_content(0, "HelperLevel", tmp), playerVariables[playerid][pHelperLevel] = strval(tmp);
			cache_get_field_content(0, "Job", tmp), playerVariables[playerid][pJob] = strval(tmp);
			cache_get_field_content(0, "Materials", tmp), playerVariables[playerid][pMaterials] = strval(tmp);
			cache_get_field_content(0, "Drugs", tmp), playerVariables[playerid][pDrugs] = strval(tmp);
			cache_get_field_content(0, "PremiumPoints", tmp), playerVariables[playerid][pPremiumPoints] = strval(tmp);
			cache_get_field_content(0, "Fireworks", tmp), playerVariables[playerid][pFireworks] = strval(tmp);
			cache_get_field_content(0, "FarmTimes", tmp), playerVariables[playerid][pFarmTimes] = strval(tmp);
			cache_get_field_content(0, "FarmSkill", tmp), playerVariables[playerid][pFarmSkill] = strval(tmp);
			cache_get_field_content(0, "Credit", tmp), playerVariables[playerid][pCredit] = strval(tmp);
			cache_get_field_content(0, "QuestFinalizat", tmp), playerVariables[playerid][pQuestFinalizat] = strval(tmp);
			cache_get_field_content(0, "RespectPoints", tmp), playerVariables[playerid][pRespectPoints] = strval(tmp);
			cache_get_field_content(0, "Warns", tmp), playerVariables[playerid][pWarns] = strval(tmp);
			cache_get_field_content(0, "RobPoints", tmp), playerVariables[playerid][pRobPoints] = strval(tmp);
			cache_get_field_content(0, "HeadValue", tmp), playerVariables[playerid][pHeadValue] = strval(tmp);
			cache_get_field_content(0, "OreJucate", tmp), playerVariables[playerid][pOreJucate] = strval(tmp);
			cache_get_field_content(0, "Seconds", result), playerVariables[playerid][pSeconds] = strval(result);
			cache_get_field_content(0, "FactionPunish", tmp), playerVariables[playerid][pFactionPunish] = strval(tmp);
			cache_get_field_content(0, "ArmsDealerSkill", tmp), playerVariables[playerid][pArmsDealerSkill] = strval(tmp);
			cache_get_field_content(0, "ArmsPuncteSkill", tmp), playerVariables[playerid][pArmsPuncteSkill] = strval(tmp);
			cache_get_field_content(0, "LicentaArme", tmp), playerVariables[playerid][pLicentaArme] = strval(tmp);
			cache_get_field_content(0, "Wanted", tmp), playerVariables[playerid][pWanted] = strval(tmp);
			cache_get_field_content(0, "Muted", tmp), playerVariables[playerid][pMuted] = strval(tmp);
			cache_get_field_content(0, "MechanicSkill", tmp), playerVariables[playerid][pMechanicSkill] = strval(tmp);
			cache_get_field_content(0, "MechanicPctSkill", tmp), playerVariables[playerid][pMechanicPctSkill] = strval(tmp);
			cache_get_field_content(0, "LicentaFly", tmp), playerVariables[playerid][pLicentaFly] = strval(tmp);
			cache_get_field_content(0, "LicentaBoat", tmp), playerVariables[playerid][pLicentaBoat] = strval(tmp);
			cache_get_field_content(0, "ReportDeelay", tmp), playerVariables[playerid][pReportDeelay] = strval(tmp);
			cache_get_field_content(0, "Newbie", tmp), playerVariables[playerid][pNewbie] = strval(tmp);
			cache_get_field_content(0, "NewbieMute", tmp), playerVariables[playerid][pNewbieMute] = strval(tmp);
			cache_get_field_content(0, "Reports", tmp), playerVariables[playerid][pReports] = strval(tmp);
			cache_get_field_content(0, "PizzaSkill", tmp), playerVariables[playerid][pPizzaSkill] = strval(tmp);
			cache_get_field_content(0, "PizzaPct", tmp), playerVariables[playerid][pPizzaPct] = strval(tmp);
			cache_get_field_content(0, "FishSkill", tmp), playerVariables[playerid][pFishSkill] = strval(tmp);
			cache_get_field_content(0, "ID", tmp), playerVariables[playerid][pID] = strval(tmp);
			cache_get_field_content(0, "TruckSkill", tmp), playerVariables[playerid][pTruckSkill] = strval(tmp);
			cache_get_field_content(0, "TruckPct", tmp), playerVariables[playerid][pTruckPct] = strval(tmp);
			cache_get_field_content(0, "PrisonID", tmp), playerVariables[playerid][pPrisonID] = strval(tmp);
			cache_get_field_content(0, "PrisonTime", tmp), playerVariables[playerid][pPrisonTime] = strval(tmp);
			cache_get_field_content(0, "CarKey1", tmp), playerVariables[playerid][pCarKey1] = strval(tmp);
			cache_get_field_content(0, "CarKey2", tmp), playerVariables[playerid][pCarKey2] = strval(tmp);
			cache_get_field_content(0, "CarKey3", tmp), playerVariables[playerid][pCarKey3] = strval(tmp);
			cache_get_field_content(0, "CarKey4", tmp), playerVariables[playerid][pCarKey4] = strval(tmp);
			cache_get_field_content(0, "CarKey5", tmp), playerVariables[playerid][pCarKey5] = strval(tmp);
			cache_get_field_content(0, "CarKey6", tmp), playerVariables[playerid][pCarKey6] = strval(tmp);
			cache_get_field_content(0, "CarKey7", tmp), playerVariables[playerid][pCarKey7] = strval(tmp);
			cache_get_field_content(0, "CarKey8", tmp), playerVariables[playerid][pCarKey8] = strval(tmp);
			cache_get_field_content(0, "CarKey9", tmp), playerVariables[playerid][pCarKey9] = strval(tmp);
			cache_get_field_content(0, "CarKey10", tmp), playerVariables[playerid][pCarKey10] = strval(tmp);

		}
		else
		{
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Logheaza-te", "Introdu parola contului mai jos.\nParola introdusa de tine nu este corecta.", "Logare", "Inchide");
			return 1;
		}
		
		playerVariables[playerid][pStatus] = 1;
		Update(playerid, pStatusx);
		
		scadehp[playerid] = SetTimerEx("ScadeViata", 35000, true, "i", playerid);
		
		if(playerVariables[playerid][pQuest] == 0)
		{
		 	if(playerVariables[playerid][pLevel] < 3)
		    {
				new rand;
				rand = random(10) % 9+1;

		    	playerVariables[playerid][pQuest] = rand;
		    	Update(playerid, pQuestx);
		    }
		}
		if(playerVariables[playerid][pQuest2] < 0)
		{
			new rand;
			rand = random(9);

	    	playerVariables[playerid][pQuest2] = rand;
	    	Update(playerid, pQuest2x);
		}
		
		if(playerVariables[playerid][pQuest] == 5 || playerVariables[playerid][pQuest] == 8 || playerVariables[playerid][pQuest] == 9)
		{
		    if(playerVariables[playerid][pQuestPrins] == 0)
		    {
		    	new amount = 5 + random(3);
		    	playerVariables[playerid][pQuestPrins] = amount;
				Update(playerid, pQuestPrinsx);
			}
		}
		if(playerVariables[playerid][pQuest2] == 0 && playerVariables[playerid][pQuestPrins] == 0)
		{
	    	playerVariables[playerid][pQuest2Prins] = 10;
			Update(playerid, pQuest2Prinsx);
		}

		if(playerVariables[playerid][pRegistred] == 0)
		{
            playerVariables[playerid][pLevel] = 1;
            playerVariables[playerid][pRegistred] = 1;
            playerVariables[playerid][pWarns] = 0;
            playerVariables[playerid][pRobPoints] = 0;
            playerVariables[playerid][pHeadValue] = 0;
            playerVariables[playerid][pRespectPoints] = 0;
            playerVariables[playerid][pAdminLevel] = 0;
            playerVariables[playerid][pTutorial] = 0;
            playerVariables[playerid][pFinalTutorial] = 0;
            playerVariables[playerid][pPrisonTime] = 0;
            playerVariables[playerid][pHelperLevel] = 0;
            playerVariables[playerid][pMuted] = 0;
            playerVariables[playerid][pCredit] = 0;
            playerVariables[playerid][pOreJucate] = 0;
            playerVariables[playerid][pMaterials] = 0;
            playerVariables[playerid][pDrugs] = 0;
            playerVariables[playerid][pHidden] = 0;
            playerVariables[playerid][pPremiumPoints] = 0;
            playerVariables[playerid][pPizzaSkill] = 1;
            playerVariables[playerid][pFishSkill] = 1;
            playerVariables[playerid][pTruckSkill] = 1;
            playerVariables[playerid][pMechanicSkill] = 1;
            playerVariables[playerid][pFactionPunish] = 0;
            playerVariables[playerid][pSeconds] = 0;
            playerVariables[playerid][pMuted] = 0;
            playerVariables[playerid][pReportDeelay] = 0;
            playerVariables[playerid][pFireworks] = 0;
            playerVariables[playerid][pColor] = 0;
            playerVariables[playerid][pPremiumPoints] = 0;
            playerVariables[playerid][pBusy] = 0;
            playerVariables[playerid][pDonate] = 0;
            playerVariables[playerid][pLicentaCondus] = 0;
            playerVariables[playerid][pPhoneNumber] = 0;
            playerVariables[playerid][pWalkieTalkie] = -1;
            playerVariables[playerid][pGiftHours] = 0;
            playerVariables[playerid][pLicentaFly] = 0;
            playerVariables[playerid][pLicentaBoat] = 0;
            
            
			Update(playerid, pLicentaBoatx);
            Update(playerid, pLicentaFlyx);
            Update(playerid, pGiftHoursx);
            Update(playerid, pWalkieTalkiex);
            Update(playerid, pPhoneNumberx);
            Update(playerid, pLicentaCondusx);
            Update(playerid, pDonatex);
            Update(playerid, pBusy);
            Update(playerid, pPremiumPointsx);
            Update(playerid, pColorx);
            Update(playerid, pFireworksx);
            Update(playerid, pMechanicSkillx);
            Update(playerid, pReportDeelayx);
            Update(playerid, pMutedx);
            Update(playerid, pSecondsx);
            Update(playerid, pLevelx);
            Update(playerid, pFinalTutorialx);
            Update(playerid, pTutorialx);
			Update(playerid, pRegistredx);
			Update(playerid, pWarnsx);
			Update(playerid, pRobPointsx);
			Update(playerid, pHeadValuex);
			Update(playerid, pRespectPointsx);
			Update(playerid, pAdminLevelx);
			Update(playerid, pPrisonTimex);
			Update(playerid, pHelperLevelx);
			Update(playerid, pMutedx);
			Update(playerid, pCredit);
			Update(playerid, pOreJucatex);
			Update(playerid, pMaterialsx);
			Update(playerid, pDrugsx);
			Update(playerid, pHiddenx);
			Update(playerid, pPremiumPointsx);
			Update(playerid, pPizzaSkillx);
			Update(playerid, pFishSkillx);
			Update(playerid, pTruckSkillx);
			Update(playerid, pFactionPunishx);
		}
		if(playerVariables[playerid][pWanted] > 0)
	   	{
	    	SetPlayerWantedLevel(playerid, playerVariables[playerid][pWanted]);
	    	WantedTime[playerid] = 900;

	    	if(playerVariables[playerid][pLimba] == 1)
	    	{
	      		S(playerid, COLOR_RED, "Esti inca urmarit de politie. Nivelul de wanted ti-a fost restaurat.");
			}
			if(playerVariables[playerid][pLimba] == 2)
	    	{
	      		S(playerid, COLOR_RED, "You are still wanted be the police. Your wanted level has been restored.");
			}
		}
  		if(playerVariables[playerid][pFinalTutorial] == 1)
  		{
	    	if(playerVariables[playerid][pDonate] == 1)
			{
				for(new i = 0; i < 100; i++) S(playerid, -1, "");
				S(playerid, -1, "You are premium account user!");
			}
			else
			{
				for(new i = 0; i < 100; i++) S(playerid, -1, "");
			}
		}
		if(playerVariables[playerid][pAdminLevel] >= 1)
  		{
 			new on = 0;
		 	foreach(Player, t)
		 	{
	 			if(playerVariables[t][pAdminLevel])
				{
					on++;
				}
	 		}
  			format(szMessage, sizeof(szMessage), "You are level %d admin. There are %d admins online.", playerVariables[playerid][pAdminLevel], on);
			S(playerid, COLOR_WHITE, szMessage);
  		}
 		if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pHelperLevel] >= 1)
		{
			format(szMessage, sizeof(szMessage), "(B) HelloBot: %s has just logged in.", GetName(playerid));
			submitToAdmins(szMessage, COLOR_ADMCHAT);
  		}
  		
		if(playerVariables[playerid][pGroup] >= 1)
		{
			format(szMessage, sizeof(szMessage), "(Group) {FFFFFF}%s from your group has just logged in.", GetName(playerid));
			SendToGroup(playerVariables[playerid][pGroup], COLOR_GENANNOUNCE, szMessage);

			format(szMessage, sizeof(szMessage), "(Group) MOTD: {FFFFFF}%s", groupVariables[playerVariables[playerid][pGroup]][gGroupMOTD]);
			S(playerid, COLOR_GENANNOUNCE, szMessage);
	   	}

	   	if(playerVariables[playerid][pQuest] == 0)
		{
		    new string[256];
		    
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "Misiune: Jefuieste o afacere. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "Quest: Rob a business. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
	   	}
	   	if(playerVariables[playerid][pQuest] == 1)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "Misiune: Urca pe muntele Chilliad. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "Quest: Climb the Chilliad mountain. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
		if(playerVariables[playerid][pQuest] == 2)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "Misiune: Cumpara droguri si folosestele. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "Quest: Buy drugs and use them. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
  		if(playerVariables[playerid][pQuest] == 3)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "Misiune: Mergi intr-un bar si imbata-te. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "Quest: Go to a bar and get drunk. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
  		if(playerVariables[playerid][pQuest] == 4)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "Misiune: Mergi la farul de pe plaja Santa Maria Beach. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "Quest: Go to the lighthouse on the Santa Maria Beach. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
		if(playerVariables[playerid][pQuest] == 5)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
		        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
		        {
					format(string, sizeof(string), "Misiune: Vinde %d pesti. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
				else
				{
					format(string, sizeof(string), "Misiune: Vinde %d pesti. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
		        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
		        {
					format(string, sizeof(string), "Quest: Sell %d fishes. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
				else
				{
					format(string, sizeof(string), "Quest: Sell %d fishes. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
			}
		}
		if(playerVariables[playerid][pQuest] == 6)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "Misiune: Mergi la skate-park cu un Bike. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "Quest: Go to the skate-park with a Bike. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
		if(playerVariables[playerid][pQuest] == 7)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "Misiune: Sari cu parasuta. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "Quest: Jump with a parachute. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
		if(playerVariables[playerid][pQuest] == 8)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
		        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
		        {
					format(string, sizeof(string), "Misiune: Vinde %d saci de faina. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
				else
				{
					format(string, sizeof(string), "Misiune: Vinde %d saci de faina. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
		        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
		        {
					format(string, sizeof(string), "Quest: Sell %d flour bags. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
				else
				{
					format(string, sizeof(string), "Quest: Sell %d flour bags. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
			}
		}
	  	if(playerVariables[playerid][pQuest] == 9)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
		        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
		        {
					format(string, sizeof(string), "Misiune: Transporta %d pizza. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
				else
				{
					format(string, sizeof(string), "Misiune: Transporta %d pizza. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
		        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
		        {
					format(string, sizeof(string), "Quest: Transport %d pizza. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
				else
				{
					format(string, sizeof(string), "Quest: Transport %d pizza. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
					S(playerid, COLOR_YELLOW, string);
				}
			}
		}
		if(playerVariables[playerid][pQuest2] == 0)
		{
		    new string[256];
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "Misiune: Parcurge distanta de %dKM cu un vehicul de tip Bike. Progres: %d/%d.", playerVariables[playerid][pQuest2Prins], playerVariables[playerid][pQuest2Value], playerVariables[playerid][pQuest2Prins]);
				S(playerid, COLOR_YELLOW, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "Quest: Drive %dKM with a Bike. Progress: %d/%d.", playerVariables[playerid][pQuest2Prins], playerVariables[playerid][pQuest2Value], playerVariables[playerid][pQuest2Prins]);
				S(playerid, COLOR_YELLOW, string);
			}
		}

		SetSpawnInfo(playerid, 0, playerVariables[playerid][pSkin], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);

        GetPlayerCash(playerid);
		SetPlayerScore(playerid, playerVariables[playerid][pLevel]);
  		SetPlayerCash(playerid, playerVariables[playerid][pCash]);

		Update(playerid, pLastLoginx);

		new stringname[128];
		format(stringname,sizeof(stringname),"%s / RPG.LEET.RO", GetName(playerid));
		PlayerTextDrawSetString(playerid, leet[playerid], stringname);
		PlayerTextDrawShow(playerid, leet[playerid]);

	}
	return 1;
}


public OnPlayerDisconnect(playerid, reason)
{
    StopAudioStreamForPlayer(playerid);
    
    PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
    PlayerTextDrawHide(playerid, UndercoverText[playerid]);

    playerdeath[playerid] = 0;
    LastPlayer[playerid] = -1;
    TaxiCall[playerid] = -1;


	playerVariables[playerid][pStatus] = 0;
	Update(playerid, pStatusx);
	
	Update(playerid, pSecondsx);
	Update(playerid, pMutedx);
	Update(playerid, pNewbieMutex);
	Update(playerid, pNewbiex);
	Update(playerid, pPrisonTimex);
	Update(playerid, pReportDeelayx);
	
	KillTimer(scadehp[playerid]);
	KillTimer(faretimer[playerid]);
	KillTimer(usedrugs[playerid]);

	RemovePlayerAttachedObject(playerid, 0);
	RemovePlayerAttachedObject(playerid, 1);
	RemovePlayerAttachedObject(playerid, 4);
	RemovePlayerAttachedObject(playerid, 2);
	
	if(AdvPlayer[playerid] != 0)
	{
		KillTimer(AdvTimer[playerid]);
		AdvPlayer[playerid] = 0;
		format(AdvMSG[playerid], 256, "");
	}
	

	if(playerVariables[playerid][pRegistred] == 1)
	{
		playerVariables[playerid][pFinalTutorial] = 1;
		Update(playerid, pFinalTutorialx);
	}
	
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
        {
            if(JucatorCautat[i] >= 0)
            {
            	pUseFind[i] = 0;
                JucatorCautat[i] = -1;
				DisablePlayerCheckpoint(i);
				S(i, COLOR_GREY, "The player you were finding has left the game.");

				PlayerTextDrawHide(i, findplayer[i]);
				PlayerTextDrawHide(i, findplayer2[i]);
			}
		}
	}



	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	switch(reason)
	{
		case 1: format(szMessage, sizeof(szMessage),  "%s has left the server.", name);
		case 2:	format(szMessage, sizeof(szMessage),  "%s has been kicked or banned from the server.", name);
		default: format(szMessage, sizeof(szMessage), "%s has left the server. (crash)", name);
	}
	nearByMessage(playerid, COLOR_GENANNOUNCE, szMessage);
	return 1;
}
public OnPlayerSpawn(playerid)
{
    SetPlayerHealthEx(playerid, 100);
    SetPlayerArmourEx(playerid, 0);
    
    PreloadAnimLib(playerid, "PED");
    PreloadAnimLib(playerid, "COP_AMBIENT");
    PreloadAnimLib(playerid, "SWORD");
    PreloadAnimLib(playerid, "CRACK");
    PreloadAnimLib(playerid, "BOMBER");
	PreloadAnimLib(playerid, "RAPPING");
	PreloadAnimLib(playerid, "SHOP");
	PreloadAnimLib(playerid, "BEACH");
	PreloadAnimLib(playerid, "SMOKING");
	PreloadAnimLib(playerid, "FOOD");
	PreloadAnimLib(playerid, "ON_LOOKERS");
	PreloadAnimLib(playerid, "DEALER");
	PreloadAnimLib(playerid, "CARRY");
	PreloadAnimLib(playerid, "COP_AMBIENT");
	PreloadAnimLib(playerid, "PARK");
	PreloadAnimLib(playerid, "INT_HOUSE");
	PreloadAnimLib(playerid, "RAPPING" );
	PreloadAnimLib(playerid, "PAULNMAC" );
	PreloadAnimLib(playerid, "GYMNASIUM" );
	PreloadAnimLib(playerid, "GRAVEYARD" );
	PreloadAnimLib(playerid, "MISC" );
	PreloadAnimLib(playerid, "GHANDS" );
	PreloadAnimLib(playerid, "KISSING" );
	PreloadAnimLib(playerid, "KNIFE" );
	PreloadAnimLib(playerid, "DANCING" );
	PreloadAnimLib(playerid, "SCRATCHING" );
	PreloadAnimLib(playerid, "BAR" );
	PreloadAnimLib(playerid, "PARACHUTE" );
	
	SetPlayerFightingStyle(playerid, playerVariables[playerid][pFightStyle]);
	SetPlayerSkin(playerid, playerVariables[playerid][pSkin]);
	SetPlayerToTeamColor(playerid);
	StopAudioStreamForPlayer(playerid);
	RemovePlayerAttachedObject(playerid, 4);
	playerVariables[playerid][pCheckpoint] = 0;
	playerVariables[playerid][pCheckpointJob] = 0;
	playerVariables[playerid][pCheckpointPizza] = 0;
	ResetPlayerWeaponsEx(playerid);

	pRepairing[playerid] = 0;
	playerdeath[playerid] = 0;
	Undercover[playerid] = 0;





    if(playerVariables[playerid][pTutorial] == 0)
    {
    	new stringplayer[100], country[40];

		GetPlayerCountry(playerid, country, sizeof(country));
        format(stringplayer, sizeof(stringplayer),"New account: %s (%d) - Country: %s", GetName(playerid), playerid, country);
		submitToStaff(stringplayer, COLOR_RED);
		
		
		SetPlayerPos(playerid, 1414.5022,-795.5439,77.9263);
		SetPlayerCameraPos(playerid, 1312.5582,-895.3466,105.1067);
		SetPlayerCameraLookAt(playerid, 1312.5582,-895.3466,105.1067);
		

	    for(new i = 0; i < 30; i++) S(playerid, -1, "");
		ShowPlayerDialog(playerid, DIALOG_SEX, DIALOG_STYLE_LIST, "Alege sexul caracterului", "Barbat\nFemeie", "Alege", "Inchide");
	}
	if(WatchingTV[playerid] == 1)
	{
		TogglePlayerSpectating(playerid, false);
		if(pUseFly[playerid] == 1)
		{
	    	StartFly(playerid);
	    }
   		TextDrawHideForPlayer(playerid, info[playerid]);
		TextDrawHideForPlayer(playerid, viata[playerid]);
		TextDrawHideForPlayer(playerid, wantedjail[playerid]);
		TextDrawHideForPlayer(playerid, carspeed[playerid]);
		TextDrawHideForPlayer(playerid, carinfo[playerid]);
  		SetPlayerPos(playerid, s_pos[playerid][retx], s_pos[playerid][rety],s_pos[playerid][retz]);
	    SetPlayerFacingAngle(playerid,s_pos[playerid][retang]);
	    SetPlayerVirtualWorld(playerid,s_pos[playerid][retworld]);
	    SetPlayerInterior(playerid, s_pos[playerid][retint]);



		WatchingTV[playerid] = 0;
	    Spectate[playerid] = -1;
		return ( true ) ;
    }
    if(playerVariables[playerid][pDuty] == 0)
	{
		SetPlayerHealthEx(playerid, 100);
	}
	else
	{
		SetPlayerHealthEx(playerid, 100);
		SetPlayerArmourEx(playerid, 100);
		GivePlayerWeaponEx(playerid, 24, 500);
		GivePlayerWeaponEx(playerid, 31, 500);
		GivePlayerWeaponEx(playerid, 29, 500);
		GivePlayerWeaponEx(playerid, 41, 500);
	}

	if(playerVariables[playerid][pPrisonID] == 2)
	{
 		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 0);
		new spawn = random(sizeof(JailSpawns));
		SetPlayerPos(playerid, JailSpawns[spawn][0], JailSpawns[spawn][1], JailSpawns[spawn][2]);
		SetPlayerFacingAngle(playerid, JailSpawns[spawn][3]);
		InHQ[playerid] = -1;
		return 1;
	}

	if(playerVariables[playerid][pGroup] == 0)
    {
		new spawn = random(sizeof(RandomPos));
		SetPlayerPos(playerid, RandomPos[spawn][0], RandomPos[spawn][1], RandomPos[spawn][2]);
		SetPlayerFacingAngle(playerid, RandomPos[spawn][3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		InHQ[playerid] = -1;
	}
	else
	{
		new group;
		group = playerVariables[playerid][pGroup];
		SetPlayerPos(playerid, groupVariables[group][gGroupInteriorPos][0], groupVariables[group][gGroupInteriorPos][1], groupVariables[group][gGroupInteriorPos][2]);
  		SetPlayerInterior(playerid, groupVariables[group][gGroupHQInteriorID]);
		SetPlayerVirtualWorld(playerid, GROUP_VIRTUAL_WORLD+group);
		InHQ[playerid] = group;
		
		if(playerVariables[playerid][pGroup] == 6)
		{
			GivePlayerWeaponEx(playerid, 43, 10);
		}
	}
	return 1;
}


public OnPlayerDeath(playerid, killerid, reason)
{
    if(killerid != INVALID_PLAYER_ID)
	{

		new var100[256], playername[30], killername[30];
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(killerid, killername, sizeof(killername));
	    mysql_format(handle, var100, sizeof(var100), "INSERT INTO kill_logs (`playerid`,`killerid`,`reason`,`playername`,`killername`) VALUES ('%d','%d','%d','%s','%s')", playerVariables[playerid][pID], playerVariables[killerid][pID], reason, playername, killername);
		mysql_tquery(handle, var100, "","");


		playerdeath[playerid] = 0;
	}







	StopFly(playerid);
	pUseGlasses[playerid] = 0;
	pUseHat[playerid] = 0;
	pizzaprize[playerid] = 0;
	pRepairing[playerid] = 0;
    pUseFly[playerid] = 0;
    RemovePlayerAttachedObject(playerid, 4);
    RemovePlayerAttachedObject(playerid, 0);
    RemovePlayerAttachedObject(playerid, 2);
    
    if(UsingDrugs[playerid] == 1)
	{
	    UsingDrugs[playerid] = 0;
	    KillTimer(usedrugs[playerid]);
	}
    

	if(playerVariables[playerid][pAreMats] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
		playerVariables[playerid][pCheckpoint] = 0;
		playerVariables[playerid][pAreMats] = 0;
		SS(playerid, COLOR_GREY, "Ai pierdut materialele pe care le transportai.", "You lost the materials you were transporting.");
	}
	if(playerVariables[playerid][pAreDrugs] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		playerVariables[playerid][pCheckpoint] = 0;
		playerVariables[playerid][pAreDrugs] = 0;
		SS(playerid, COLOR_GREY, "Ai pierdut drogurile pe care le transportai.", "You lost the drugs you were transporting.");
	}
	if(playerVariables[playerid][pFaina] >= 1)
	{
	    playerVariables[playerid][pFaina] = 0;
	    SS(playerid, -1, "{D1F791}Ai pierdut sacul cu faina.", "{D1F791}You lost the bag of flour you were carying.");
	}
	if(playerVariables[playerid][pCheckpointPizza] == 1)
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    playerVariables[playerid][pCheckpointPizza] = 0;
	    activpizza[playerid] = 0;
	    SS(playerid, COLOR_NOB, "Job esuat!", "Job failed!");
	}
 	if(playerVariables[playerid][pFish] == 1)
    {
        playerVariables[playerid][pAlreadyFish] = 0;
        playerVariables[playerid][pFish] = 0;
        SS(playerid, -1, "{D1F791}Ai pierdut pestele deoarece ai murit.", "{D1F791}You lost your fish because you died.");
   	}
	if(playerVariables[playerid][pAlreadyFish] == 1)
	{
		KillTimer(pescuieste[playerid]);
		SS(playerid, COLOR_GREY, "Job esuat! Nu trebuie sa parasesti zona daca vrei sa prinzi un peste.", "Job failed! You shouldn't leave the area if you want to catch a fish.");

		playerVariables[playerid][pAlreadyFish] = 0;
		RemovePlayerAttachedObject(playerid, 0);
		RemovePlayerAttachedObject(playerid, undita);
	}
	
	
 	new fpm, fkm;
	fpm = playerVariables[playerid][pGroup];
	fkm = playerVariables[killerid][pGroup];
	
	for(new turf = 1; turf < sizeof(TurfInfo); turf++)
	{
     	if(IsPlayerInTurf(playerid, turf) && IsPlayerInTurf(killerid, turf))
     	{
            if(IsAMember(playerid) && IsAMember(killerid))
            {
             	if(WarInfo[turf][wFaction] == fpm && WarInfo[turf][wAttacker] == fkm || WarInfo[turf][wFaction] == fkm && WarInfo[turf][wAttacker] == fpm)
             	{
			     	if(fkm == WarInfo[turf][wAttacker] || fkm == WarInfo[turf][wFaction])
				 	{
				     	WarScoreF[fkm][turf] += 1;
				 	}
                 	ucideri[killerid][turf] ++;
                 	decese[playerid][turf] ++;
                 	foreach(Player, i)
                 	{
                 	    new fpm2;
                 	    fpm2 = playerVariables[i][pGroup];
                 	    if(IsAMember(i))
            			{
            			    if(WarInfo[turf][wFaction] == fpm2 || WarInfo[turf][wAttacker] == fpm2)
							{
            			    	SendDeathMessageToPlayer(i, killerid, playerid, reason);
							}
						}
					}
                 	if(playerVariables[killerid][pGroup] == WarInfo[turf][wAttacker])
                 	{
	                 	if((ucideri[killerid][turf]-decese[killerid][turf]) > bestscoreat[turf])
	                 	{
	                     	bestscoreat[turf] = (ucideri[killerid][turf]-decese[killerid][turf]);
	                     	bestmemberat[turf] = killerid;
	                 	}
                 	}
                 	if(playerVariables[killerid][pGroup] == WarInfo[turf][wFaction])
                 	{
	                 	if((ucideri[killerid][turf]-decese[killerid][turf]) > bestscoredf[turf])
	                 	{
	                     	bestscoredf[turf] = (ucideri[killerid][turf]-decese[killerid][turf]);
	                     	bestmemberdf[turf] = killerid;
	                 	}
                 	}
                 	if(playerVariables[playerid][pGroup] == WarInfo[turf][wAttacker])
                 	{
                 		if((ucideri[playerid][turf]-decese[playerid][turf]) < worstscoreat[turf])
						{
							worstscoreat[turf] = (ucideri[playerid][turf]-decese[playerid][turf]);
							worstmemberat[turf] = playerid;
						}
					}
                 	if(playerVariables[playerid][pGroup] == WarInfo[turf][wFaction])
                 	{
                 		if((ucideri[playerid][turf]-decese[playerid][turf]) < worstscoredf[turf])
						{
							worstscoredf[turf] = (ucideri[playerid][turf]-decese[playerid][turf]);
							worstmemberdf[turf] = playerid;
						}
					}
					
					new string[256];
                 	format(string, sizeof(string), "You have killed %s (%d).", GetName(playerid), playerid);
                 	S(killerid, COLOR_GENANNOUNCE, string);

					format(string, sizeof(string), "You have been killed by %s (%d).", GetName(killerid), killerid);
                 	S(playerid, COLOR_GENANNOUNCE, string);

					playerVariables[killerid][pWKills] += 1;
					Update(killerid, pWKillsx);
					
					playerVariables[playerid][pWDeaths] += 1;
					Update(playerid, pWDeathsx);
                 	return 1;
				}
         	}
     	}
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
	{
		case 427, 428, 432, 601, 528: SetVehicleHealth(vehicleid, 5000.0); 
	}
	
	Radio[vehicleid]= 0;
	Refueling[vehicleid] = 0;
	
 	if(vehicleVariables[vehicleid][vVehicleGroup] >= 1)
	{
		Gas[vehicleid] = 100;
	}
	if(vehicleVariables[vehicleid][vVehicleGroup] == 0 && vehicleVariables[vehicleid][vVehicleJob] != 8)
	{
		Gas[vehicleid] = 50 + random(50);
	}
	if(vehicleVariables[vehicleid][vVehicleJob] >= 8)
	{
		Gas[vehicleid] = 50 + random(50);
	}

	if(vPersonal[vehicleid])
	{
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    	ChangeVehicleColor(vehicleid, carVariables[vPersonal[vehicleid]][cColour][0], carVariables[vPersonal[vehicleid]][cColour][1]);
		SetVehiclePos(vehicleid, carVariables[vPersonal[vehicleid]][cPos][0], carVariables[vPersonal[vehicleid]][cPos][1], carVariables[vPersonal[vehicleid]][cPos][2]);
		SetVehicleZAngle(vehicleid, carVariables[vPersonal[vehicleid]][cRotate]);
		Gas[vehicleid] = carVariables[vPersonal[vehicleid]][cFuel];
		SetVehicleHealth(vehicleid, carVariables[vPersonal[vehicleid]][cHP]);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, carVariables[vPersonal[vehicleid]][cLock], bonnet, boot, objective);
	}
	
	if(Carspawn[vehicleid] != 0)
	{
		DestroyVehicle(Carspawn[vehicleid]);
		Carspawn[vehicleid] = 0;
	}
	return 1;
}


public OnVehicleDeath(vehicleid, killerid)
{
	Radio[vehicleid]= 0;
	StopAudioStreamForPlayersInCar(vehicleid);


	if(vPersonal[vehicleid])
	{
		carVariables[vPersonal[vehicleid]][cHP] = 1000.0;

		if(carVariables[vPersonal[vehicleid]][cInsurancePoints] >= 1)
		{
			carVariables[vPersonal[vehicleid]][cInsurancePoints] --;
		}

		vUpdate(vPersonal[vehicleid], cInsurancePointsx);
		vUpdate(vPersonal[vehicleid], cHPx);
	}
	return 1;
}

public FiveSecondsTimer()
{
	foreach(Player, x)
	{
		if(playerVariables[x][pQuest] == 3 && playerVariables[x][pQuestValue] == 0)
  		{
  		    new drunk = GetPlayerDrunkLevel(x);
			if(drunk >= 4000)
			{
	  			new string[256];
		        SS(x, COLOR_YELLOW, "Misiunea [Mergi intr-un bar si imbata-te] a fost terminata!", "Quest [Go to a bar and get drunk] was finished!");

				playerVariables[x][pQuestValue] = 1;
				Update(x, pQuestValuex);

				playerVariables[x][pQuestPoint] ++;
				Update(x, pQuestPointx);

				playerVariables[x][pRespectPoints] ++;
				Update(x, pRespectPointsx);

	            new value = 5000 * playerVariables[x][pLevel];
	            GivePlayerCash(x, value);

				if(playerVariables[x][pLimba] == 1)
				{
					format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
					S(x, COLOR_YELLOW, string);
				}
				if(playerVariables[x][pLimba] == 2)
				{
					format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
					S(x, COLOR_YELLOW, string);
				}
				
				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Mergi intr-un bar si imbata-te] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[x][pUsername], playerVariables[x][pID], NumberFormat(value), playerVariables[x][pID]);
				mysql_query(handle, szLargeString);
			}
  		}
	
		if(IsPlayerInRangeOfPoint(x, 30.0, -2329.7458, -1639.9537, 483.7031))
		{
		    if(playerVariables[x][pQuest] == 1 && playerVariables[x][pQuestValue] == 0)
		    {
		        new string[256];
		        SS(x, COLOR_YELLOW, "Misiunea [Urca pe muntele Chilliad] a fost terminata!", "Quest [Climb the Chilliad mountain] was finished!");

				playerVariables[x][pQuestValue] = 1;
				Update(x, pQuestValuex);

				playerVariables[x][pQuestPoint] ++;
				Update(x, pQuestPointx);

				playerVariables[x][pRespectPoints] ++;
				Update(x, pRespectPointsx);

	            new value = 5000 * playerVariables[x][pLevel];
	            GivePlayerCash(x, value);

				if(playerVariables[x][pLimba] == 1)
				{
					format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
					S(x, COLOR_YELLOW, string);
				}
				if(playerVariables[x][pLimba] == 2)
				{
					format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
					S(x, COLOR_YELLOW, string);
				}
				
				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Urca pe muntele Chilliad] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[x][pUsername], playerVariables[x][pID], NumberFormat(value), playerVariables[x][pID]);
				mysql_query(handle, szLargeString);
			}
		}
  		if(IsPlayerInRangeOfPoint(x, 20.0, 154.0952,-1946.5842,5.3664))
		{
		    if(playerVariables[x][pQuest] == 4 && playerVariables[x][pQuestValue] == 0)
		    {
		        new string[256];
		        SS(x, COLOR_YELLOW, "Misiunea [Mergi la farul de pe plaja Santa Maria Beach] a fost terminata!", "Quest [Go to the lighthouse on the Santa Maria Beach] was finished!");

				playerVariables[x][pQuestValue] = 1;
				Update(x, pQuestValuex);

				playerVariables[x][pQuestPoint] ++;
				Update(x, pQuestPointx);

				playerVariables[x][pRespectPoints] ++;
				Update(x, pRespectPointsx);

	            new value = 5000 * playerVariables[x][pLevel];
	            GivePlayerCash(x, value);

				if(playerVariables[x][pLimba] == 1)
				{
					format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
					S(x, COLOR_YELLOW, string);
				}
				if(playerVariables[x][pLimba] == 2)
				{
					format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
					S(x, COLOR_YELLOW, string);
				}
				
				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Mergi la farul de pe plaja Santa Maria Beach] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[x][pUsername], playerVariables[x][pID], NumberFormat(value), playerVariables[x][pID]);
				mysql_query(handle, szLargeString);
			}
		}
  		if(IsPlayerInRangeOfPoint(x, 50.0, 1925.8018,-1402.9552,13.5703))
		{
			new vehicle = GetPlayerVehicleID(x);
			
			if(GetVehicleModel(vehicle) == 509)
    		{
			    if(playerVariables[x][pQuest] == 6 && playerVariables[x][pQuestValue] == 0)
			    {
			        new string[256];
			        SS(x, COLOR_YELLOW, "Misiunea [Mergi la skate-park cu un Bike] a fost terminata!", "Quest [Go to the skate-park with a Bike] was finished!");

					playerVariables[x][pQuestValue] = 1;
					Update(x, pQuestValuex);

					playerVariables[x][pQuestPoint] ++;
					Update(x, pQuestPointx);

					playerVariables[x][pRespectPoints] ++;
					Update(x, pRespectPointsx);

		            new value = 5000 * playerVariables[x][pLevel];
		            GivePlayerCash(x, value);

					if(playerVariables[x][pLimba] == 1)
					{
						format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
						S(x, COLOR_YELLOW, string);
					}
					if(playerVariables[x][pLimba] == 2)
					{
						format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
						S(x, COLOR_YELLOW, string);
					}
					
					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Mergi la skate-park cu un Bike] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[x][pUsername], playerVariables[x][pID], NumberFormat(value), playerVariables[x][pID]);
					mysql_query(handle, szLargeString);
				}
			}
		}
		if(GetPlayerAnimationIndex(x)== 971)
		{
			if(playerVariables[x][pQuest] == 7 && playerVariables[x][pQuestValue] == 0)
   			{
          		new string[256];
		        SS(x, COLOR_YELLOW, "Misiunea [Sari cu parasuta] a fost terminata!", "Quest [Jump with a parachute] was finished!");

				playerVariables[x][pQuestValue] = 1;
				Update(x, pQuestValuex);
				
				playerVariables[x][pQuestPoint] ++;
				Update(x, pQuestPointx);

				playerVariables[x][pRespectPoints] ++;
				Update(x, pRespectPointsx);

	            new value = 5000 * playerVariables[x][pLevel];
	            GivePlayerCash(x, value);

				if(playerVariables[x][pLimba] == 1)
				{
					format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
					S(x, COLOR_YELLOW, string);
				}
				if(playerVariables[x][pLimba] == 2)
				{
					format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
					S(x, COLOR_YELLOW, string);
				}

				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Sari cu parasuta] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[x][pUsername], playerVariables[x][pID], NumberFormat(value), playerVariables[x][pID]);
				mysql_query(handle, szLargeString);
   			}
   		}
	}

		
		

    new query[300], playerid, giverid;
	// -------------------------------- Emails --------------------------
	
	format(query, sizeof(query), "SELECT * FROM `emails` WHERE `EmailRead` = '1' ORDER BY `ID`");
	new Cache: stringresult2 = mysql_query(handle, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
   			playerid = cache_get_field_content_int(i, "playerid");
   			giverid = cache_get_field_content_int(i, "giverid");

			foreach(Player, idd)
   			{
   			    if(playerVariables[idd][pID] == playerid && playerVariables[idd][pNextNotification] < 1 && playerVariables[idd][pStatus] == 1 || playerVariables[idd][pID] == giverid && playerVariables[idd][pNextNotification] < 1)
   			    {
		        	S(idd, COLOR_YELLOW, "{FF6200}** {FFFF00}You have a new email. Use /email to read it. {FF6200}**");
	               	playerVariables[idd][pNextNotification] = 3600;
				}
			}
		}
	}
	cache_delete(stringresult2);
	
	//---------------------------------------------------------------------

}

forward FareUpdate(playerid);
public FareUpdate(playerid)
{
	GetPlayerPos(playerid, NewX[playerid], NewY[playerid], NewZ[playerid]);
	new Float:totdistance = GetDistanceBetweenPoints(OldX[playerid], OldY[playerid], OldZ[playerid], NewX[playerid], NewY[playerid], NewZ[playerid]);
    if(totdistance > 100.0)
    {
    	TransportMoney[playerid] += TransportValue[playerid];

    	GivePlayerCash(playerid, TransportValue[playerid]);

		new formatted[128];
		PlayerTextDrawShow(playerid, taxifare[playerid]);
		format(formatted, sizeof(formatted), "Money earned: ~g~$%d", TransportMoney[playerid]);
		PlayerTextDrawSetString(playerid, taxifare[playerid], formatted);
		GetPlayerPos(playerid, Float:OldX[playerid], Float:OldY[playerid], Float:OldZ[playerid]);
	}
	return 1;
}

IsNum(textchar)
{
   if(textchar == '0') return 1;
   if(textchar == '1') return 1;
   if(textchar == '2') return 1;
   if(textchar == '3') return 1;
   if(textchar == '4') return 1;
   if(textchar == '5') return 1;
   if(textchar == '6') return 1;
   if(textchar == '7') return 1;
   if(textchar == '8') return 1;
   if(textchar == '9') return 1;
   return 0;
}
AntiDeAMX()
{
	new a[][] =
 	{
 		"Unarmed (Fist)",
 		"Brass K"
 	};
	#pragma unused a
}
GasesteReclama(Text[])
{
	if(strfind(Text, "bugged", true) != -1 || strfind(Text, ":7777", true) != -1 || strfind(Text, "bzone", true) != -1 || strfind(Text, "b-zone", true) != -1 || strfind(Text, "og-times", true) != -1 || strfind(Text, "ogtimes", true) != -1 || strfind(Text, "bigzone", true) != -1 ||
	strfind(Text, "bagd", true) != -1 || strfind(Text, "rpg1", true) != -1 || strfind(Text, "rpg2", true) != -1 || strfind(Text, "rpg3", true) != -1 || strfind(Text, "rpg4", true) != -1 || strfind(Text, "old-school", true) != -1 || strfind(Text, "oldschool", true) != -1 ||
	strfind(Text, "time4play", true) != -1 || strfind(Text, "progaming", true) != -1 || strfind(Text, "pro-gaming", true) != -1 || strfind(Text, "just2play", true) != -1 || strfind(Text, "playnion", true) != -1 || strfind(Text, "tp4", true) != -1) return 1;

	return 0;
}
FindIP(StrToChk[])
{
	new IpLevel = 0;
    for(new a = 0; a < strlen(StrToChk); a++)
    {
		switch(IpLevel)
      	{
       		case 0:
            {
       			if(IsNum(StrToChk[a])) IpLevel++;
         	}
          	case 1, 2:
            {
            	if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 4;
                else IpLevel = 0;
         	}
            case 3:
            {
 				if(StrToChk[a] == '.') IpLevel++;
              	else IpLevel = 0;
   	 		}
         	case 4:
         	{
          		if(IsNum(StrToChk[a])) IpLevel++;
             	else IpLevel = 0;
     	 	}
         	case 5, 6:
         	{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 8;
                else IpLevel = 0;
      	 	}
         	case 7:
         	{
             	if(StrToChk[a] == '.') IpLevel++;
             	else IpLevel = 0;
         	}
         	case 8:
         	{
             	if(IsNum(StrToChk[a])) IpLevel++;
             	else IpLevel = 0;
         	}
         	case 9, 10:
	 		{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 12;
                else IpLevel = 0;
         	}
         	case 11:
         	{
             	if(StrToChk[a] == '.') IpLevel++;
             	else IpLevel = 0;
         	}
         	case 12:
         	{
          		if(IsNum(StrToChk[a])) return 1;
                else IpLevel = 0;
   			}
  		}
   	}
    return 0;
}





public OnPlayerText(playerid, text[])
{
    if(playerVariables[playerid][pTutorial] == 0) return 0;
    
    if(text[0] && !strcmp (text, LastText[playerid]) && LastTextTime[playerid] > GetTickCount () && playerVariables[playerid][pAdminLevel] < 1) return 0;
    LastTextTime[playerid] = GetTickCount() + SECONDS_BETWEEN_SAME_MSGS * 1000;
	strcpy(LastText[playerid], text, 128);

	if(playerVariables[playerid][pMuted] >= 1)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(szMessage, 256, "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",playerVariables[playerid][pMuted]);
			S(playerid,COLOR_IN2,szMessage);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(szMessage, 256, "You can not write on the chat at the moment (mute). You can write on the chat over %d seconds.",playerVariables[playerid][pMuted]);
			S(playerid,COLOR_IN2,szMessage);
		}
		return 0;
	}
	
	if(FindIP(text) || GasesteReclama(text))
	{
	    if(playerVariables[playerid][pMuted] == 0)
	    {
			format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], text);
			submitToStaff(szMessage, COLOR_RED);
		}
		SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
		playerVariables[playerid][pMuted] += 20;
		return 0;
	}
	
	if(TalkingLive[playerid] != 0)
	{
	    new string[256];
		if(playerVariables[playerid][pGroup] == 6)
		{
		    format(string, sizeof(string), "NR %s: %s", GetName(playerid), text);
			OOCNews(COLOR_LIVE, string);
			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO chat_logs (playerid, text, type) VALUES('%d', '%s', 'live')", playerVariables[playerid][pID], string);
			mysql_query(handle, szLargeString);
		}
		else
		{
		    format(string, sizeof(string), "LivePlayer %s: %s", GetName(playerid), text);
			OOCNews(COLOR_LIVE, string);
			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO chat_logs (playerid, text, type) VALUES('%d', '%s', 'live')", playerVariables[playerid][pID], string);
			mysql_query(handle, szLargeString);
		}
		return 0;
	}
	
	if(playerVariables[playerid][pMuted] == 0)
	{
	    if(playerVariables[playerid][pAdminDuty] < 1)
		{
			if(Undercover[playerid] == 0)
			{
				if(playerVariables[playerid][pColor] == 0)
			    {
			        format(szMessage, sizeof(szMessage), "{FFFFFF}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 1)
			    {
			        format(szMessage, sizeof(szMessage), "{4890E7}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 2)
			    {
			        format(szMessage, sizeof(szMessage), "{FFFF00}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 3)
			    {
			        format(szMessage, sizeof(szMessage), "{17E81E}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 4)
			    {
			        format(szMessage, sizeof(szMessage), "{EA2685}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 5)
			    {
			        format(szMessage, sizeof(szMessage), "{777274}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 6)
			    {
			        format(szMessage, sizeof(szMessage), "{FF9E00}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 7)
			    {
			        format(szMessage, sizeof(szMessage), "{EE5DDB}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 8)
			    {
			        format(szMessage, sizeof(szMessage), "{6F00AB}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 9)
			    {
			        format(szMessage, sizeof(szMessage), "{4D8E14}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 100)
			    {
			        format(szMessage, sizeof(szMessage), "{F00000}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 101)
			    {
			        format(szMessage, sizeof(szMessage), "{AA0000}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
			    else if(playerVariables[playerid][pColor] == 102)
			    {
			        format(szMessage, sizeof(szMessage), "{FF3F3F}%s:{FFFFFF} %s", GetName(playerid), text);
			    }
		    	nearByMessage(playerid, COLOR_WHITE, szMessage);
				format(szMessage, sizeof(szMessage), "%s", text);

				if(playerVariables[playerid][pAdminLevel] < 6)
				{
					SetPlayerChatBubble(playerid, text, 0xFFFFFFFF, 15.0, 10000);
				}
				else
				{
					SetPlayerChatBubble(playerid, text, 0x9BE9DEFF, 15.0, 10000);
				}
				new string[256];
		    	format(string,sizeof(string),"%s: %s", GetName(playerid), text);
				chatlogs(string, COLOR_WHITE);
				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO chat_logs (playerid, text, type) VALUES('%d', '%s', 'chat')", playerVariables[playerid][pID], string);
				mysql_query(handle, szLargeString);
			}	
			else
			{
			    new string2[256];
				format(string2, sizeof(string2), "Unknown: {FFFFFF}%s", text);
				nearByMessage(playerid, -1, string2);

				new string[256];
		    	format(string,sizeof(string),"%s: %s", GetName(playerid), text);
				chatlogs(string, COLOR_WHITE);
				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO chat_logs (playerid, text, type) VALUES('%d', '%s', 'undercover')", playerVariables[playerid][pID], string);
				mysql_query(handle, szLargeString);
			}	
		}
		else
		{
		    new string2[256];
			format(string2, sizeof(string2), "Admin %s says: (( %s ))", GetName(playerid), text);
			nearByMessage(playerid, COLOR_YELLOW, string2);
		}
		
		playerVariables[playerid][pSpamCount]++;
	}
	return 0;
}


public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    new i = vehicleid;
	if(!ispassenger)
	{
   		if(vehicleVariables[i][vVehicleDMV] != 0 && vehicleVariables[i][vVehicleDMV])
		{
			if(playerVariables[playerid][pLicentaCondus] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
		    	GetPlayerPos(playerid, slx, sly, slz);
		    	SetPlayerPos(playerid, slx, sly, slz+2);
				PlayerPlaySoundEx(1190, slx, sly, slz);
				SetTimerEx("unfreezeint", 1000, false, "i", playerid);
				TogglePlayerControllable(playerid,0) ;
				if(playerVariables[playerid][pLimba] == 1)
				{
					S(playerid, COLOR_GREY, "Ai deja permisul de conducere. Nu poti conduce aceasta masina.");
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					S(playerid, COLOR_GREY, "You already have a Driver's Licence! This car is for people that want to take the exam!");
				}
			}
		}
		if(IsAPlane(vehicleid))
		{
			if(playerVariables[playerid][pLicentaFly] == 0)
			{
				new Float:slx, Float:sly, Float:slz;
			    GetPlayerPos(playerid, slx, sly, slz);
			    SetPlayerPos(playerid, slx, sly, slz+2);
				PlayerPlaySoundEx(1190, slx, sly, slz);
				SetTimerEx("unfreezeint", 1000, false, "i", playerid);
				TogglePlayerControllable(playerid,0);
				S(playerid, COLOR_WHITE, "Ai nevoie de permis de pilot pentru a putea conduce un avion / elicopter.");
				return 1;
			}
		}
  		if(IsABoat(vehicleid))
		{
			if(playerVariables[playerid][pLicentaBoat] == 0)
			{
				new Float:slx, Float:sly, Float:slz;
 				GetPlayerPos(playerid, slx, sly, slz);
 				SetPlayerPos(playerid, slx, sly, slz+2);
				PlayerPlaySoundEx(1190, slx, sly, slz);
				SetTimerEx("unfreezeint", 1000, false, "i", playerid);
				TogglePlayerControllable(playerid,0) ;
				S(playerid, COLOR_WHITE, "Ai nevoie de licenta de navigat.");
				return 1;
			}
		}
		if(!IsABike(vehicleid) && !IsAFaggio(vehicleid) && !IsABoat(vehicleid) && !IsAPlane(vehicleid))
		{
			if(playerVariables[playerid][pLicentaCondus] == 0)
			{
				new Float:slx, Float:sly, Float:slz;
			    GetPlayerPos(playerid, slx, sly, slz);
			    SetPlayerPos(playerid, slx, sly, slz+2);
				PlayerPlaySoundEx(1190, slx, sly, slz);
				SetTimerEx("unfreezeint", 1000, false, "i", playerid);
				TogglePlayerControllable(playerid,0);

				if(playerVariables[playerid][pLimba] == 1)
				{
					if(playerVariables[playerid][pCheckpoint] == 2)
					{
						S(playerid, COLOR_GREY, "Ai nevoie de un permis de conducere pentru a putea conduce aceasta masina.");
					}
					else
					{
					    S(playerid, COLOR_GREY, "Ai nevoie de un permis de conducere pentru a putea conduce aceasta masina.");
						S(playerid, COLOR_GREY, "Urmareste checkpoint-ul rosu de pe minimap pentru a ajunge la scoala de soferi.");
					}
					SetPlayerCheckpoint(playerid, 1219.2067,-1812.0403,16.5938, 3.0);
					playerVariables[playerid][pCheckpoint] = 2;
	            }
	            if(playerVariables[playerid][pLimba] == 2)
				{
				    if(playerVariables[playerid][pCheckpoint] == 2)
					{
						S(playerid, COLOR_GREY, "You need a driver's licence to drive this car.");
					}
					else
					{
					    S(playerid, COLOR_GREY, "You need a driver's licence to drive this car.");
						S(playerid, COLOR_GREY, "A checkpoint was placed on the map at the driving school.");
					}
					SetPlayerCheckpoint(playerid, 1219.2067,-1812.0403,16.5938, 3.0);
					playerVariables[playerid][pCheckpoint] = 2;
			 	}
				return 1;
			}
		}
		if(vehicleVariables[i][vVehicleGroup] != 0 && vehicleVariables[i][vVehicleGroup] != playerVariables[playerid][pGroup])
		{
			if(playerVariables[playerid][pAdminLevel] >= 1 && playerVariables[playerid][pAdminDuty] >= 1)
			{
			    return 1;
			}
			else
			{
    			new Float:slx, Float:sly, Float:slz;
		    	GetPlayerPos(playerid, slx, sly, slz);
		    	SetPlayerPos(playerid, slx, sly, slz+2);
				PlayerPlaySoundEx(1190, slx, sly, slz);
				SetTimerEx("unfreezeint", 1000, false, "i", playerid);
				TogglePlayerControllable(playerid,0) ;
				format(szMessage, sizeof(szMessage), "Aceasta masina poate fi condusa doar de membrii %s.", groupVariables[vehicleVariables[i][vVehicleGroup]][gGroupName]);
				S(playerid, COLOR_WHITE, szMessage);
			}
		}
		if((playerVariables[playerid][pGroup] == 1 || playerVariables[playerid][pGroup] == 2) && (vehicleVariables[i][vVehicleGroup] == 1 || vehicleVariables[i][vVehicleGroup] == 2))
		{
			if(playerVariables[playerid][pDuty] == 0)
			{
				S(playerid, COLOR_BLUE,"Trebuie sa fii on duty pentru a conduce acest vehicul.");
				new Float:slx, Float:sly, Float:slz;
		    	GetPlayerPos(playerid, slx, sly, slz);
		    	SetPlayerPos(playerid, slx, sly, slz+2);
				PlayerPlaySoundEx(1190, slx, sly, slz);
				SetTimerEx("unfreezeint", 1000, false, "i", playerid);
				TogglePlayerControllable(playerid,0) ;
			}
		}
		if(vehicleVariables[i][vVehicleJob] != 0 && vehicleVariables[i][vVehicleJob] != playerVariables[playerid][pJob])
		{
			if(playerVariables[playerid][pAdminLevel] >= 1 && playerVariables[playerid][pAdminDuty] >= 1)
			{
			    return 1;
			}
			else
			{
				new Float:slx, Float:sly, Float:slz;
		    	GetPlayerPos(playerid, slx, sly, slz);
		    	SetPlayerPos(playerid, slx, sly, slz+2);
				PlayerPlaySoundEx(1190, slx, sly, slz);
				SetTimerEx("unfreezeint", 1000, false, "i", playerid);
				TogglePlayerControllable(playerid,0) ;
				if(playerVariables[playerid][pLimba] == 1)
				{
					format(szMessage, sizeof(szMessage), "Nu poti conduce aceasta masina pentru ca nu ai jobul %s.", jobVariables[vehicleVariables[i][vVehicleJob]][jJobName]);
					S(playerid, COLOR_GREY, szMessage);
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					format(szMessage, sizeof(szMessage), "You don't have job %s to drive this vehicle.", jobVariables[vehicleVariables[i][vVehicleJob]][jJobName]);
					S(playerid, COLOR_GREY, szMessage);
				}
			}
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    playerVariables[playerid][pBelt] = 0;
    StopAudioStreamForPlayer(playerid);
    pRepairing[playerid] = 0;
    TransportDuty[playerid] = 0;

    if(playerVariables[playerid][pCheckpointJob] > 1)
    {
        if(playerVariables[playerid][pLimba] == 1)
		{
		    S(playerid, COLOR_IN2, "Poti folosi /killcp pentru anularea jobului.");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
		    S(playerid, COLOR_IN2, "You can use /killcp to cancel the job.");
		}
    }

    if(vehicleVariables[vehicleid][vVehicleJob] == 8)
	{
	    if(farmerc[playerid] == 1)
		{
		    SS(playerid, COLOR_NOB, "Job esuat!", "Job failed!");
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			farmerc[playerid] = 0;
			playerVariables[playerid][pFarmTime] = 0;
			KillTimer(timerfarm[playerid]);
            PlayerTextDrawHide(playerid, farmtime[playerid]);
			PlayerTextDrawHide(playerid, farmbox[playerid]);
		    PlayerTextDrawHide(playerid, farmjob[playerid]);
			PlayerTextDrawHide(playerid, farmspeedro[playerid]);
			PlayerTextDrawHide(playerid, farmspeeden[playerid]);
			PlayerTextDrawHide(playerid, farmwantedro[playerid]);
			PlayerTextDrawHide(playerid, farmwanteden[playerid]);
		}
	}


 	if(IsADmvCar(vehicleid))
	{
		DisablePlayerRaceCheckpoint(playerid);
		if(GetPlayerState(playerid) == 2)
		{
			SS(playerid, COLOR_RED, "Ai picat examenul deoarece ai coborat din masina. Incearca din nou!","You failed the exam because you get off the car. Try again!");
			SetVehicleToRespawn(vehicleid);
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    new vehicle = GetPlayerVehicleID(playerid);

	RemovePlayerAttachedObject(playerid, 4);
	

	new string[256], vehicless;

	vehicless = GetVehicleModel(vehicle) - 400;

	if(GetVehicleModel(vehicle) >= 400 && GetVehicleModel(vehicle) < 500)
	{
		format(string, sizeof(string),"~g~~h~%s", VehicleNames[vehicless]);
		GameTextForPlayer(playerid, string, 1000, 1);
	}
	if(GetVehicleModel(vehicle) >= 500 && GetVehicleModel(vehicle) < 600)
	{
		format(string, sizeof(string),"~b~~h~%s", VehicleNames[vehicless]);
		GameTextForPlayer(playerid, string, 1000, 1);
	}
	if(GetVehicleModel(vehicle) >= 600)
	{
		format(string, sizeof(string),"~p~~h~%s", VehicleNames[vehicless]);
		GameTextForPlayer(playerid, string, 1000, 1);
	}

	if(vPersonal[vehicle])
	{
	  	new const id = vPersonal[vehicle];

	  	//new price = carVariables[id][cInsurance] + (50 * carVariables[id][cDays]) +

	  	if(carVariables[id][cColour][0] >= 128 || carVariables[id][cColour][1] >= 128)
	  	{
	  		format(string, sizeof(string), "This %s (ID %d) is owned by %s | Age: %d days | Odometer: %d km | Insurance: $%s (%d points) | Hidden colors: %d, %d.",  VehicleNames[GetVehicleModel(vehicle) - 400], carVariables[id][cID], carVariables[id][cOwner], carVariables[id][cDays], carVariables[id][cKM], NumberFormat(carVariables[id][cInsurance]), carVariables[id][cInsurancePoints], carVariables[id][cColour][0], carVariables[id][cColour][1]);
	    	SendSplitMessage(playerid, -1, string);
	  	}
	  	else
	  	{
	  		format(string, sizeof(string), "This %s (ID %d) is owned by %s | Age: %d days | Odometer: %d km | Insurance: $%s (%d points) | Car colors: %d, %d.",  VehicleNames[GetVehicleModel(vehicle) - 400], carVariables[id][cID], carVariables[id][cOwner], carVariables[id][cDays], carVariables[id][cKM], NumberFormat(carVariables[id][cInsurance]), carVariables[id][cInsurancePoints], carVariables[id][cColour][0], carVariables[id][cColour][1]);
	    	SendSplitMessage(playerid, -1, string);
	  	}
	  	if(carVariables[id][cLock] == 1 && playerVariables[playerid][pAdminDuty] == 0)
	  	{
	  		RemovePlayerFromVehicle(playerid);
	  		SS(playerid, COLOR_GREY, "Acest vehicul este inchis!", "This vehicle is locked!");
	  	}
	}

	if(oldstate == PLAYER_STATE_DRIVER)
    {
		if((GetTickCount()-PlayerEnterTime[playerid]) < 220)
        {
			new anticar[300];

        	format(anticar, sizeof(anticar), "(N) %s (%d, level %d) may be using vehicle teleport (Car Circle, Floating cars etc).", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel]);
			submitToAdmins(anticar, COLOR_BOSS2);
		}
		return 1;
    }
    if(newstate == PLAYER_STATE_PASSENGER)
	{
	    foreach(Player, i)
	    {
	        if(IsPlayerInVehicle(i, vehicle) && GetPlayerState(i) == 2 && TransportValue[i] > 0)
	        {
	            if(playerVariables[playerid][pCash] < TransportValue[i])
	            {
	                format(string, sizeof(string), "* You need $%d to enter.", TransportValue[i]);
					S(playerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicleEx(playerid);
	            }
	            else
	            {
	                if(TransportDuty[i] == 1)
	                {
	                	TransportMoney[i] += TransportValue[i];
	                }
	            }
	        }
	    }
	}
    
	if(GetVehicleModel(vehicle) == 448)
    {
        if(playerVariables[playerid][pCheckpointPizza] != 1)
        {
			if(playerVariables[playerid][pLimba] == 1)
			{
			    S(playerid,-1, "Scrie /pizza pentru a incepe sa muncesti.");
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				S(playerid,-1, "Type /pizza to start working.");
			}
		}
    }
    
	if(vehicleVariables[vehicle][vVehicleJob] == 8 && playerVariables[playerid][pJob] == 8)
	{
		if(playerVariables[playerid][pFaina] == 0)
		{
		    Lock[vehicle] = 1;
			GetVehicleParamsEx(farmCar[vehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(farmCar[vehicle], engine, lights, alarm, 1, bonnet, boot, objective);

			farmerc[playerid] = 1;
			playerVariables[playerid][pFarmTime] = 10; //trebuiemodificat
			timerfarm[playerid] = SetTimerEx("Farmer", 1000, true, "i", playerid);
		}
		else
		{
  			SS(playerid, COLOR_GREY, "Vinde faina inainte de a munci din nou.", "Sell flour before working again.");
  			RemovePlayerFromVehicle(playerid);
 			KillTimer(timerfarm[playerid]);
		}
	}




 	if(GetVehicleModel(vehicle) == 442)
    {
        GivePlayerWeaponEx(playerid, 6, 1);
    }
    if(IsAPlane(vehicle))
	{
	    GivePlayerWeaponEx(playerid, 46, 1);
 	}

	new vehicleid = GetPlayerVehicleID(playerid);
	if(newstate == PLAYER_STATE_DRIVER)
 	{
	    if(IsABike(vehicleid))
		{
			new vid = GetPlayerVehicleID(playerid);
			GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
		if(vehicleVariables[vehicleid][vVehicleJob] == 7 && playerVariables[playerid][pJob] == 7)
		{
			if(playerVariables[playerid][pCheckpoint] == 0)
			{
			    if(playerVariables[playerid][pCheckpointJob] == 0)
			    {
					if(playerVariables[playerid][pLimba] == 1)
		   		    {
		   		        S(playerid, COLOR_IN2, "Mergi la checkpoint pentru a incepe munca.");
					}
					if(playerVariables[playerid][pLimba] == 2)
		   		    {
		   		        S(playerid, COLOR_IN2, "Go to the checkpoint to start the job.");
					}
					SetPlayerCheckpoint(playerid, -131.2804,-1116.8022,3.9212, 5.0);
					playerVariables[playerid][pCheckpointJob] = 1;
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
	   		    {
	   		        S(playerid, COLOR_YELLOW, "Pentru a lucra ca trucker, foloseste /killcp si apoi urca din nou in masina.");
				}
				if(playerVariables[playerid][pLimba] == 2)
	   		    {
	   		        S(playerid, COLOR_YELLOW, "To start this job, use /killcp  to remove current checkpoint then enter the truck again.");
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_DRIVER)
	{
     	new VID;
		VID = GetPlayerVehicleID(playerid);

	    if(Radio[VID] >= 1)
	    {
	        if(Radio[VID] == 1)
			{
				PlayAudioStreamForPlayer(playerid,"http://stream.profm.ro:8012/profm.mp3");
	        }
	        if(Radio[VID] == 2)
	        {
       	 		PlayAudioStreamForPlayer(playerid,"http://radiotaraf.no-ip.biz:7100");
	        }
	        if(Radio[VID] == 3)
	        {
       	 		PlayAudioStreamForPlayer(playerid,"http://rbandit.dyndns.tv:8000");
	        }
	        if(Radio[VID] == 4)
	        {
       	 		PlayAudioStreamForPlayer(playerid,"http://radioromanian.net/popular.pls");
	        }
	        if(Radio[VID] == 5)
	        {
       	 		PlayAudioStreamForPlayer(playerid,"http://stream.radiozu.ro:8020/");
	        }
			if(Radio[VID] == 6)
	        {
       	 		PlayAudioStreamForPlayer(playerid,"http://80.86.106.136:80");
	        }
			if(Radio[VID] == 7)
            {
			    PlayAudioStreamForPlayer(playerid,"http://dance.radiogangsta.ro:8800");
			}
			if(Radio[VID] == 8)
            {
			    PlayAudioStreamForPlayer(playerid,"http://www.radiotequila.ro/hiphop.m3u");
			}
			if(Radio[VID] == 9)
            {
			    PlayAudioStreamForPlayer(playerid,"http://nextgen.go.ro:8012");
			}
			if(Radio[VID] == 10)
            {
			    PlayAudioStreamForPlayer(playerid, "http://dubstep.fm/128.pls");
			}
	    }
	    else
	    {
	        if(playerVariables[playerid][pMP3] == 1)
 	    	{
 	    		StopAudioStreamForPlayer(playerid);
 	    	}
	    }
     	new gun, tmp;
        GetPlayerWeaponData(playerid, 5, gun, tmp);
        #pragma unused tmp
        if(gun)SetPlayerArmedWeapon(playerid, gun);
        else SetPlayerArmedWeapon(playerid, 0);
	    return 1;
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	switch(playerVariables[playerid][pCheckpointJob])
	{
		case 1:
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(vehicleVariables[GetPlayerVehicleID(playerid)][vVehicleJob] == 7)
				{
					new string[256];
					new Float: fDistance = GetPlayerDistanceFromPoint(playerid, 340.8437,849.1292,20.2363);
					new Float: fDistance2 = GetPlayerDistanceFromPoint(playerid, 794.2119,1899.7739,5.0583);

					format(string, sizeof(string), "LV Mine (%.0fm) - {00FF00}legal\nLV Gun Shop (%.0fm) - {00FF00}legal", fDistance, fDistance2);
					ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_LIST, "Chose destination", string, "Ok", "Cancel");
				}
			}
		}
  		case 2:
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(vehicleVariables[GetPlayerVehicleID(playerid)][vVehicleJob] == 7)
				{
					new string[256];
					new Float: fDistance = GetPlayerDistanceFromPoint(playerid, -103.9257,-1189.5878,2.2677);

					format(string, sizeof(string), "LS Gas station (%.0fm) - {00FF00}legal", fDistance);
					ShowPlayerDialog(playerid, 1001, DIALOG_STYLE_LIST, "Chose destination", string, "Ok", "Cancel");
				}
			}
		}
 		case 100:
		{
  			if(vehicleVariables[GetPlayerVehicleID(playerid)][vVehicleJob] == 7)
	    	{
	    		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
		    		new trk = GetPlayerVehicleID(playerid);
		    		if(IsTrailerAttachedToVehicle(trk))
					{
						DisablePlayerCheckpoint(playerid);
						DestroyVehicle(trucker[playerid]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

  					 	playerVariables[playerid][pTruckPct] += 1;
        				Update(playerid, pTruckPctx);


        				SetPlayerCheckpoint(playerid, 374.7271,936.4169,24.8199, 5.0);
						playerVariables[playerid][pCheckpointJob] = 2;


   						if(playerVariables[playerid][pTruckSkill] == 1)
				        {
  							new cash = random(5000) + 15000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 2)
				        {
  							new cash = random(6000) + 17000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 3)
				        {
  							new cash = random(7000) + 19000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 4)
				        {
  							new cash = random(11000) + 19000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 5)
				        {
  							new cash = random(15000) + 20000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 6)
				        {
  							new cash = random(18000) + 20000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }



			            if(playerVariables[playerid][pTruckPct] == 25)
				        {
				            playerVariables[playerid][pTruckSkill] = 2;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 2 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 50)
				        {
				            playerVariables[playerid][pTruckSkill] = 3;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 3 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 105)
				        {
				            playerVariables[playerid][pTruckSkill] = 4;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 4 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 175)
				        {
				            playerVariables[playerid][pTruckSkill] = 5;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 5 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 250)
				        {
				            playerVariables[playerid][pTruckSkill] = 6;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 6 la job-ul 'Trucker'.");
				        }
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
						{
							S(playerid, COLOR_NOB, "Nu ai niciun trailer atasat!");
						}
						if(playerVariables[playerid][pLimba] == 2)
						{
							S(playerid, COLOR_NOB, "You have no trailer attached!");
						}
					}
				}
				else return S(playerid, COLOR_NOB, "Error! You are not the driver!");
			}
			else return S(playerid, COLOR_NOB, "You are not in a truck!");
		}
		case 101:
		{
  			if(vehicleVariables[GetPlayerVehicleID(playerid)][vVehicleJob] == 7)
	    	{
	    		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
		    		new trk = GetPlayerVehicleID(playerid);
		    		if(IsTrailerAttachedToVehicle(trk))
					{
						DisablePlayerCheckpoint(playerid);
						DestroyVehicle(trucker[playerid]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

  					 	playerVariables[playerid][pTruckPct] += 1;
        				Update(playerid, pTruckPctx);


        				SetPlayerCheckpoint(playerid, -131.2804,-1116.8022,3.9212, 5.0);
						playerVariables[playerid][pCheckpointJob] = 1;


   						if(playerVariables[playerid][pTruckSkill] == 1)
				        {
  							new cash = random(5000) + 15000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 2)
				        {
  							new cash = random(6000) + 17000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 3)
				        {
  							new cash = random(7000) + 19000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 4)
				        {
  							new cash = random(11000) + 19000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 5)
				        {
  							new cash = random(15000) + 20000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 6)
				        {
  							new cash = random(18000) + 20000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }



			            if(playerVariables[playerid][pTruckPct] == 25)
				        {
				            playerVariables[playerid][pTruckSkill] = 2;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 2 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 50)
				        {
				            playerVariables[playerid][pTruckSkill] = 3;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 3 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 105)
				        {
				            playerVariables[playerid][pTruckSkill] = 4;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 4 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 175)
				        {
				            playerVariables[playerid][pTruckSkill] = 5;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 5 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 250)
				        {
				            playerVariables[playerid][pTruckSkill] = 6;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 6 la job-ul 'Trucker'.");
				        }
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
						{
							S(playerid, COLOR_NOB, "Nu ai niciun trailer atasat!");
						}
						if(playerVariables[playerid][pLimba] == 2)
						{
							S(playerid, COLOR_NOB, "You have no trailer attached!");
						}
					}
				}
				else return S(playerid, COLOR_NOB, "Error! You are not the driver!");
			}
			else return S(playerid, COLOR_NOB, "You are not in a truck!");
		}
  		case 102:
		{
  			if(vehicleVariables[GetPlayerVehicleID(playerid)][vVehicleJob] == 7)
	    	{
	    		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
		    		new trk = GetPlayerVehicleID(playerid);
		    		if(IsTrailerAttachedToVehicle(trk))
					{
						DisablePlayerCheckpoint(playerid);
						DestroyVehicle(trucker[playerid]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

  					 	playerVariables[playerid][pTruckPct] += 1;
        				Update(playerid, pTruckPctx);


        				SetPlayerCheckpoint(playerid, 753.0400,1917.9897,5.5398, 5.0);
						playerVariables[playerid][pCheckpointJob] = 1;


   						if(playerVariables[playerid][pTruckSkill] == 1)
				        {
  							new cash = random(5000) + 15000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 2)
				        {
  							new cash = random(6000) + 17000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 3)
				        {
  							new cash = random(7000) + 19000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 4)
				        {
  							new cash = random(11000) + 19000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 5)
				        {
  							new cash = random(15000) + 20000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }
         				if(playerVariables[playerid][pTruckSkill] == 6)
				        {
  							new cash = random(18000) + 20000;
							playerVariables[playerid][pCash] += cash;
							Update(playerid, pCashx);
							GivePlayerCash(playerid, cash);

					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	format(szMessage,sizeof(szMessage),"(+) Ai primit $%s pentru livrarea marfii.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Mergi la checkpoint pentru a incepe munca.");
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    format(szMessage,sizeof(szMessage),"(+) You got $%s for finishing the trip.", NumberFormat(cash));
								S(playerid,COLOR_ATTACK,szMessage);
								S(playerid,COLOR_IN2,"Go to the checkpoint to start the job.");
						 	}
				        }



			            if(playerVariables[playerid][pTruckPct] == 25)
				        {
				            playerVariables[playerid][pTruckSkill] = 2;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 2 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 50)
				        {
				            playerVariables[playerid][pTruckSkill] = 3;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 3 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 105)
				        {
				            playerVariables[playerid][pTruckSkill] = 4;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 4 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 175)
				        {
				            playerVariables[playerid][pTruckSkill] = 5;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 5 la job-ul 'Trucker'.");
				        }
				        if(playerVariables[playerid][pTruckPct] == 250)
				        {
				            playerVariables[playerid][pTruckSkill] = 6;
				        	Update(playerid, pTruckSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 6 la job-ul 'Trucker'.");
				        }
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
						{
							S(playerid, COLOR_NOB, "Nu ai niciun trailer atasat!");
						}
						if(playerVariables[playerid][pLimba] == 2)
						{
							S(playerid, COLOR_NOB, "You have no trailer attached!");
						}
					}
				}
				else return S(playerid, COLOR_NOB, "Error! You are not the driver!");
			}
			else return S(playerid, COLOR_NOB, "You are not in a truck!");
		}
	}
	switch(playerVariables[playerid][pCheckpoint])
	{
	    case 1:
		{
	        DisablePlayerCheckpoint(playerid);
	        playerVariables[playerid][pCheckpoint] = 0;
	        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 10.0);
	    }
	    case 2:
		{
	        DisablePlayerCheckpoint(playerid);
	        playerVariables[playerid][pCheckpoint] = 0;
	        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 10.0);
	        if(playerVariables[playerid][pLimba] == 1)
			{
            	S(playerid, COLOR_YELLOW,"Foloseste comanda /exam pentru a sustine examenul de condus.");
            }
            if(playerVariables[playerid][pLimba] == 2)
			{
			    S(playerid, COLOR_YELLOW,"Use the command /exam to exam drive.");
		 	}
	    }
     	case 3:
		{
	        DisablePlayerCheckpoint(playerid);
	        playerVariables[playerid][pCheckpoint] = 0;
	        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 10.0);
	        if(playerVariables[playerid][pLimba] == 1)
			{
            	S(playerid, COLOR_YELLOW,"Foloseste /getmats aici pentru a colecta materiale!");
            }
            if(playerVariables[playerid][pLimba] == 2)
			{
			    S(playerid, COLOR_YELLOW,"Use /getmats here to get mats!");
		 	}
	    }
     	case 4:
		{
			if(playerVariables[playerid][pMatsTime] < 30)
			{
				new string[128];
				SetTimerEx("KickPublic", 1000, 0, "d", playerid);
				DisablePlayerCheckpoint(playerid);
		        playerVariables[playerid][pCheckpoint] = 0;

		        format(string, sizeof(string), "%s has been kicked by AdmBot, reason: possible teleport cheats (#1)", GetName(playerid));
				submitToAdmins(string, COLOR_BOSS2);

				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'cheats', '%d')", string, playerVariables[playerid][pID]);
				mysql_query(handle, szLargeString);

				foreach(Player, i)
				{
     				if(IsPlayerConnected(i))
				   	{
				 		if(playerVariables[i][pAdminLevel] == 0)
						{
							format(string, sizeof(string), "%s has been kicked by AdmBot, reason: possible teleport cheats (#1)", GetName(playerid));
							S(i, COLOR_LIGHTRED, string);
						}
					}
				}
			}
		    else
			{

				DisablePlayerCheckpoint(playerid);
		        playerVariables[playerid][pCheckpoint] = 0;
		        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        playerVariables[playerid][pAreMats] = 0;

		        playerVariables[playerid][pArmsPuncteSkill] += 1;
		        Update(playerid, pArmsPuncteSkillx);

		        if(playerVariables[playerid][pArmsDealerSkill] == 1) return SS(playerid, -1, "{048E24}(+) Ai colectat 1.000 materiale.", "{048E24}(+) You collected 1.000 materials."); playerVariables[playerid][pMaterials] += 1000; Update(playerid, pMaterialsx);
	      		if(playerVariables[playerid][pArmsDealerSkill] == 2) return SS(playerid, -1, "{048E24}(+) Ai colectat 1.100 materiale.", "{048E24}(+) You collected 1.100 materials."); playerVariables[playerid][pMaterials] += 1100; Update(playerid, pMaterialsx);
	         	if(playerVariables[playerid][pArmsDealerSkill] == 3) return SS(playerid, -1, "{048E24}(+) Ai colectat 1.300 materiale.", "{048E24}(+) You collected 1.300 materials."); playerVariables[playerid][pMaterials] += 1300; Update(playerid, pMaterialsx);
	         	if(playerVariables[playerid][pArmsDealerSkill] == 4) return SS(playerid, -1, "{048E24}(+) Ai colectat 1.500 materiale.", "{048E24}(+) You collected 1.500 materials."); playerVariables[playerid][pMaterials] += 1500; Update(playerid, pMaterialsx);
	         	if(playerVariables[playerid][pArmsDealerSkill] == 5) return SS(playerid, -1, "{048E24}(+) Ai colectat 1.700 materiale.", "{048E24}(+) You collected 1.700 materials."); playerVariables[playerid][pMaterials] += 1700; Update(playerid, pMaterialsx);
	         	if(playerVariables[playerid][pArmsDealerSkill] == 6) return SS(playerid, -1, "{048E24}(+) Ai colectat 2.000 materiale.", "{048E24}(+) You collected 2.000 materials."); playerVariables[playerid][pMaterials] += 2000; Update(playerid, pMaterialsx);
		        


            	if(playerVariables[playerid][pArmsPuncteSkill] == 25)
		        {
		            playerVariables[playerid][pArmsDealerSkill] = 2;
		        	Update(playerid, pArmsDealerSkillx);
		        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 2 la job-ul 'Arms Dealer'.");
		        }
		        if(playerVariables[playerid][pArmsPuncteSkill] == 50)
		        {
		            playerVariables[playerid][pArmsDealerSkill] = 3;
		        	Update(playerid, pArmsDealerSkillx);
		        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 3 la job-ul 'Arms Dealer'.");
		        }
		        if(playerVariables[playerid][pArmsPuncteSkill] == 105)
		        {
		            playerVariables[playerid][pArmsDealerSkill] = 4;
		        	Update(playerid, pArmsDealerSkillx);
		        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 4 la job-ul 'Arms Dealer'.");
		        }
		        if(playerVariables[playerid][pArmsPuncteSkill] == 175)
		        {
		            playerVariables[playerid][pArmsDealerSkill] = 5;
		        	Update(playerid, pArmsDealerSkillx);
		        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 5 la job-ul 'Arms Dealer'.");
		        }
		        if(playerVariables[playerid][pArmsPuncteSkill] == 250)
		        {
		            playerVariables[playerid][pArmsDealerSkill] = 6;
		        	Update(playerid, pArmsDealerSkillx);
		        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 6 la job-ul 'Arms Dealer'.");
		        }
      		}
	    }
	    case 5:
		{
		    new newcar = GetPlayerVehicleID(playerid);
			if(IsATowtruck(newcar))
			{
       			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
				    new playerTowTruck = GetPlayerVehicleID(playerid);
					if(IsTrailerAttachedToVehicle(playerTowTruck))
					{
					    new targetVehicle = GetClosestVehicle(playerid, playerTowTruck);

						SetVehicleToRespawn(targetVehicle);
					    playerVariables[playerid][pDeelayMechanic] = 60;




						DisablePlayerCheckpoint(playerid);
	        			playerVariables[playerid][pCheckpoint] = 0;
	        			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

						playerVariables[playerid][pMechanicPctSkill] += 1;
	        			Update(playerid, pMechanicPctSkillx);

				        if(playerVariables[playerid][pMechanicSkill] == 1)
				        {
					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	S(playerid, -1,"{048E24}(+) Bine lucrat! Ai primit $10.000 pe masina tractata. Poti tracta o alta masina in 60 secunde.");
				            	playerVariables[playerid][pCash] += 10000;
				            	GivePlayerCash(playerid, 10000);
				            	Update(playerid, pCashx);
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    S(playerid, -1,"{048E24}(+) Good job! You got $10.000 for towing this car. You can tow another car in 60 seconds.");
							    playerVariables[playerid][pCash] += 10000;
				            	GivePlayerCash(playerid, 10000);
				            	Update(playerid, pCashx);
						 	}
				        }
			      		if(playerVariables[playerid][pMechanicSkill] == 2)
				        {
					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	S(playerid, -1,"{048E24}(+) Bine lucrat! Ai primit $12.000 pe masina tractata. Poti tracta o alta masina in 60 secunde.");
				            	playerVariables[playerid][pCash] += 12000;
				            	GivePlayerCash(playerid, 12000);
				            	Update(playerid, pCashx);
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    S(playerid, -1,"{048E24}(+) Good job! You got $12.000 for towing this car. You can tow another car in 60 seconds.");
							    playerVariables[playerid][pCash] += 12000;
				            	GivePlayerCash(playerid, 12000);
				            	Update(playerid, pCashx);
						 	}
				        }
			         	if(playerVariables[playerid][pMechanicSkill] == 3)
				        {
					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	S(playerid, -1,"{048E24}(+) Bine lucrat! Ai primit $14.000 pe masina tractata. Poti tracta o alta masina in 60 secunde.");
				            	playerVariables[playerid][pCash] += 14000;
				            	GivePlayerCash(playerid, 14000);
				            	Update(playerid, pCashx);
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    S(playerid, -1,"{048E24}(+) Good job! You got $14.000 for towing this car. You can tow another car in 60 seconds.");
							    playerVariables[playerid][pCash] += 14000;
				            	GivePlayerCash(playerid, 14000);
				            	Update(playerid, pCashx);
						 	}
				        }
			         	if(playerVariables[playerid][pMechanicSkill] == 4)
				        {
					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	S(playerid, -1,"{048E24}(+) Bine lucrat! Ai primit $16.000 pe masina tractata. Poti tracta o alta masina in 60 secunde.");
				            	playerVariables[playerid][pCash] += 16000;
				            	GivePlayerCash(playerid, 16000);
				            	Update(playerid, pCashx);
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    S(playerid, -1,"{048E24}(+) Good job! You got $16.000 for towing this car. You can tow another car in 60 seconds.");
							    playerVariables[playerid][pCash] += 16000;
				            	GivePlayerCash(playerid, 16000);
				            	Update(playerid, pCashx);
						 	}
				        }
			         	if(playerVariables[playerid][pMechanicSkill] == 5)
				        {
					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	S(playerid, -1,"{048E24}(+) Bine lucrat! Ai primit $18.000 pe masina tractata. Poti tracta o alta masina in 60 secunde.");
				            	playerVariables[playerid][pCash] += 18000;
				            	GivePlayerCash(playerid, 18000);
				            	Update(playerid, pCashx);
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    S(playerid, -1,"{048E24}(+) Good job! You got $18.000 for towing this car. You can tow another car in 60 seconds.");
							    playerVariables[playerid][pCash] += 18000;
				            	GivePlayerCash(playerid, 18000);
				            	Update(playerid, pCashx);
						 	}
				        }
			         	if(playerVariables[playerid][pMechanicSkill] == 6)
				        {
					        if(playerVariables[playerid][pLimba] == 1)
							{
				            	S(playerid, -1,"{048E24}(+) Bine lucrat! Ai primit $20.000 pe masina tractata. Poti tracta o alta masina in 60 secunde.");
				            	playerVariables[playerid][pCash] += 20000;
				            	GivePlayerCash(playerid, 20000);
				            	Update(playerid, pCashx);
				            }
				            if(playerVariables[playerid][pLimba] == 2)
							{
							    S(playerid, -1,"{048E24}(+) Good job! You got $20.000 for towing this car. You can tow another car in 60 seconds.");
							    playerVariables[playerid][pCash] += 20000;
				            	GivePlayerCash(playerid, 20000);
				            	Update(playerid, pCashx);
						 	}
				        }

		            	if(playerVariables[playerid][pMechanicPctSkill] == 25)
				        {
				            playerVariables[playerid][pMechanicSkill] = 2;
				        	Update(playerid, pMechanicSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 2 la job-ul 'Mechanic'.");
				        }
				        if(playerVariables[playerid][pMechanicPctSkill] == 50)
				        {
				            playerVariables[playerid][pMechanicSkill] = 3;
				        	Update(playerid, pMechanicSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 3 la job-ul 'Mechanic'.");
				        }
				        if(playerVariables[playerid][pMechanicPctSkill] == 105)
				        {
				            playerVariables[playerid][pMechanicSkill] = 4;
				        	Update(playerid, pMechanicSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 4 la job-ul 'Mechanic'.");
				        }
				        if(playerVariables[playerid][pMechanicPctSkill] == 175)
				        {
				            playerVariables[playerid][pMechanicSkill] = 5;
				        	Update(playerid, pMechanicSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 5 la job-ul 'Mechanic'.");
				        }
				        if(playerVariables[playerid][pMechanicPctSkill] == 250)
				        {
				            playerVariables[playerid][pMechanicSkill] = 6;
				        	Update(playerid, pMechanicSkillx);
				        	S(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 6 la job-ul 'Mechanic'.");
				        }
	       			}
	       			else return S(playerid, -1, "Trebuie sa tractezi o masina pentru a primi banii.");
	       		}
	       	}
		}
		case 6:
		{
	        S(playerid, COLOR_WHITE, "You have reached your vehicle.");
	        DisablePlayerCheckpoint(playerid);
	        playerVariables[playerid][pCheckpoint] = 0;
	        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 10.0);
		}
		case 7:
		{
			DisablePlayerCheckpoint(playerid);
	        playerVariables[playerid][pCheckpoint] = 0;
	        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 10.0);
		}
		case 8:
		{
			if(playerVariables[playerid][pDrugsTime] < 30)
			{
				new string[128];
				SetTimerEx("KickPublic", 1000, 0, "d", playerid);
				DisablePlayerCheckpoint(playerid);
		        playerVariables[playerid][pCheckpoint] = 0;

		        format(string, sizeof(string), "%s has been kicked by AdmBot, reason: possible teleport cheats (#1)", GetName(playerid));
				submitToAdmins(string, COLOR_BOSS2);

				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'cheats', '%d')", string, playerVariables[playerid][pID]);
				mysql_query(handle, szLargeString);

				foreach(Player, i)
				{
     				if(IsPlayerConnected(i))
				   	{
				 		if(playerVariables[i][pAdminLevel] == 0)
						{
							format(string, sizeof(string), "%s has been kicked by AdmBot, reason: possible teleport cheats (#1)", GetName(playerid));
							S(i, COLOR_LIGHTRED, string);
						}
					}
				}
			}
		    else
			{
				DisablePlayerCheckpoint(playerid);
		        playerVariables[playerid][pCheckpoint] = 0;
		        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        playerVariables[playerid][pAreDrugs] = 0;


		        if(playerVariables[playerid][pArmsDealerSkill] == 1) return SS(playerid, -1, "{048E24}(+) Ai colectat 1.000 materiale.","{048E24}(+) You collected 1.000 materials."); playerVariables[playerid][pMaterials] += 1000; Update(playerid, pMaterialsx);

      		}
		}
	}
	return 1;
}
public Farmer(playerid)
{
    if(farmerc[playerid] == 1)
	{
		PlayerTextDrawShow(playerid, farmjob[playerid]);
		PlayerTextDrawShow(playerid, farmbox[playerid]);
		
		new string[256];

		if(playerVariables[playerid][pLimba] == 1)
		{
			format(string, sizeof(string),"Munceste pentru inca ~r~%d ~w~secunde pentru a fi platit", playerVariables[playerid][pFarmTime]);
			PlayerTextDrawSetString(playerid, farmtime[playerid], string);
			PlayerTextDrawShow(playerid, farmtime[playerid]);
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			format(string, sizeof(string),"Work ~r~%d ~w~more seconds to get your reward", playerVariables[playerid][pFarmTime]);
			PlayerTextDrawSetString(playerid, farmtime[playerid], string);
			PlayerTextDrawShow(playerid, farmtime[playerid]);
		}

		if(IsPlayerInRangeOfPoint(playerid, 190, jobVariables[8][jJobPosition][0], jobVariables[8][jJobPosition][1], jobVariables[8][jJobPosition][2]))
		{
			new vehicleid = GetPlayerVehicleID(playerid), invehcile = IsPlayerInAnyVehicle(playerid), speed = GetSpeed(playerid);
			
			if(invehcile && speed > 24)
			{
   				PlayerTextDrawHide(playerid, farmspeedro[playerid]);
   				PlayerTextDrawHide(playerid, farmspeeden[playerid]);
			    PlayerTextDrawHide(playerid, farmwantedro[playerid]);
			    PlayerTextDrawHide(playerid, farmwanteden[playerid]);

    			if(playerVariables[playerid][pFarmTime] >= 1)
				{
				    if(!IsPlayerAFK[playerid])
					{
						playerVariables[playerid][pFarmTime] --;
	    			}
				}
				else if(playerVariables[playerid][pFarmTime] == 0)
				{
					new randomtransport = random(10);
					if(randomtransport > 8)
					{
						new randfarmer = 30000 + random(30000);

						if(playerVariables[playerid][pLimba] == 1)
						{
							format(string, sizeof(string),"(+) Detinatorii fermei au fost foarte multumiti de calitatea muncii prestate. Ai primit $%s.", NumberFormat(randfarmer));
							S(playerid, COLOR_ATTACK, string);
						}
						if(playerVariables[playerid][pLimba] == 2)
						{
							format(string, sizeof(string),"(+) The farm owners were very happy with your work. You got $%s.", NumberFormat(randfarmer));
							S(playerid, COLOR_ATTACK, string);
						}
						
						GivePlayerCash(playerid, randfarmer);
					}
					else if(randomtransport >= 0 && randomtransport <= 8)
					{
						new faina = 15 + random(15);
						playerVariables[playerid][pFaina] = faina;

		    			SS(playerid, COLOR_ATTACK, "Detinatorii fermei nu au bani pentru a te plati, dar iti pot oferi un sac cu faina drept rasplata.", "The farm owners don't have any money to give you, but they can give you a bag of flour.");

						if(playerVariables[playerid][pLimba] == 1)
						{
							format(string, sizeof(string),"Ai primit un sac ce contine %d kg de faina.", faina);
							S(playerid, COLOR_ATTACK, string);
						}
						if(playerVariables[playerid][pLimba] == 2)
						{
							format(string, sizeof(string),"You have received a bag that contains %d kg of flour.", faina);
							S(playerid, COLOR_ATTACK, string);
						}
						
						SS(playerid, COLOR_YELLOW, "Mergi la un fast-food pentru a vinde faina obtinuta.", "Go to a fast-food to sell the flour bag.");
					}
					farmerc[playerid] = 0;
					SetVehicleToRespawn(vehicleid);
					PlayerTextDrawHide(playerid, farmtime[playerid]);
					PlayerTextDrawHide(playerid, farmjob[playerid]);
					PlayerTextDrawHide(playerid, farmbox[playerid]);
					PlayerTextDrawHide(playerid, farmspeeden[playerid]);
					PlayerTextDrawHide(playerid, farmspeedro[playerid]);
					PlayerTextDrawHide(playerid, farmwantedro[playerid]);
					PlayerTextDrawHide(playerid, farmwanteden[playerid]);
					KillTimer(timerfarm[playerid]);
				}
			}
			else
			{
			    if(playerVariables[playerid][pLimba] == 1)
				{
					PlayerTextDrawShow(playerid, farmspeedro[playerid]);
					PlayerTextDrawHide(playerid, farmspeeden[playerid]);
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					PlayerTextDrawShow(playerid, farmspeeden[playerid]);
					PlayerTextDrawHide(playerid, farmspeedro[playerid]);
				}
			}
		}
		else
		{
			PlayerTextDrawHide(playerid, farmspeedro[playerid]);
			PlayerTextDrawHide(playerid, farmspeeden[playerid]);
			
			if(playerVariables[playerid][pLimba] == 1)
			{
				PlayerTextDrawShow(playerid, farmwantedro[playerid]);
				PlayerTextDrawHide(playerid, farmwanteden[playerid]);
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				PlayerTextDrawShow(playerid, farmwanteden[playerid]);
				PlayerTextDrawHide(playerid, farmwantedro[playerid]);
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	switch(playerVariables[playerid][pCheckpointPizza])
	{
		case 1:
		{
		    new Float: fDistance = GetVehicleDistanceFromPoint(playerizza[playerid], PizzaCP[playerid][0], PizzaCP[playerid][1], PizzaCP[playerid][2]);
		    
		    if(GetPlayerVehicleID(playerid) == playerizza[playerid] || fDistance <= 25)
   			{
				new string[128];
				DisablePlayerRaceCheckpoint(playerid);
				activpizza[playerid] = 0;
				playerVariables[playerid][pCheckpointPizza] = 0;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				playerVariables[playerid][pPizzaPct] += 1;
				Update(playerid, pPizzaPctx);
				GivePlayerCash(playerid, pizzaprize[playerid]);

				if(playerVariables[playerid][pLimba] == 1)
				{
					format(string,sizeof(string),"{048E24}Pizza livrata! Ai primit $%s! Poti folosi din nou /pizza pentru a livra.", NumberFormat(pizzaprize[playerid]));
					S(playerid, COLOR_WHITE,string);
				}
	            if(playerVariables[playerid][pLimba] == 2)
				{
					format(string,sizeof(string),"{048E24}Pizza delivered! You have received $%s! You can use /pizza again to deliver another pizza.", NumberFormat(pizzaprize[playerid]));
					S(playerid, COLOR_WHITE,string);
		 		}
		 		
		 		if(playerVariables[playerid][pQuest] == 9 && playerVariables[playerid][pQuestFinalizat] == 0)
				{
					playerVariables[playerid][pQuestValue] ++;
					Update(playerid, pQuestValuex);
					
					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string, sizeof(string), "Progres pentru misiunea [Transporta %d pizza]: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string, sizeof(string), "Quest [Transport %d pizza]: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}
				}

					
		 		
		 		pizzaprize[playerid] = 0;
		 		
	        	if(playerVariables[playerid][pPizzaPct] == 25)
		        {
		            playerVariables[playerid][pPizzaSkill] = 2;
		        	Update(playerid, pPizzaSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 2 la job-ul 'Pizza Boy'.", "Congratulations! Now you have skill 2 on the Pizza Boy job.");
		        }
		        if(playerVariables[playerid][pPizzaPct] == 50)
		        {
		            playerVariables[playerid][pPizzaSkill] = 3;
		        	Update(playerid, pPizzaSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 3 la job-ul 'Pizza Boy'.", "Congratulations! Now you have skill 3 on the Pizza Boy job.");
		        }
		        if(playerVariables[playerid][pPizzaPct] == 105)
		        {
		            playerVariables[playerid][pPizzaSkill] = 4;
		        	Update(playerid, pPizzaSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 4 la job-ul 'Pizza Boy'.", "Congratulations! Now you have skill 4 on the Pizza Boy job.");
		        }
		        if(playerVariables[playerid][pPizzaPct] == 175)
		        {
		            playerVariables[playerid][pPizzaSkill] = 5;
		        	Update(playerid, pPizzaSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 5 la job-ul 'Pizza Boy'.", "Congratulations! Now you have skill 5 on the Pizza Boy job.");
		        }
		        if(playerVariables[playerid][pPizzaPct] == 250)
		        {
		            playerVariables[playerid][pPizzaSkill] = 6;
		        	Update(playerid, pPizzaSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 6 la job-ul 'Pizza Boy'.", "Congratulations! Now you have skill 6 on the Pizza Boy job.");
		        }
		        
          		if(playerVariables[playerid][pQuest] == 9 && playerVariables[playerid][pQuestValue] == playerVariables[playerid][pQuestPrins] && playerVariables[playerid][pQuestFinalizat] == 0)
		  		{
				    if(playerVariables[playerid][pLimba] == 1)
				    {
						format(string, sizeof(string), "Misiunea [Transporta %d pizza] a fost terminata!", playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
						format(string, sizeof(string), "Quest [Transport %d pizza] was finished!", playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}

					playerVariables[playerid][pRespectPoints] ++;
					Update(playerid, pRespectPointsx);

					playerVariables[playerid][pQuestPoint] ++;
					Update(playerid, pQuestPointx);
					
					playerVariables[playerid][pQuestFinalizat] = 1;
					Update(playerid, pQuestFinalizatx);

		            new value = 5000 * playerVariables[playerid][pLevel];
		            GivePlayerCash(playerid, value);

					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
						S(playerid, COLOR_YELLOW, string);
					}

					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Transporta %d pizza] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[playerid][pUsername], playerVariables[playerid][pID], playerVariables[playerid][pQuestPrins], NumberFormat(value), playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);
	  			}
	       	}
	       	else
	       	{
	       	    if(playerVariables[playerid][pLimba] == 1)
	       	    {
	       	        S(playerid, -1, "{BFFF8B}Trebuie sa livrezi pizza folosind scooterul de pizza!");
	       	    }
	       	    if(playerVariables[playerid][pLimba] == 2)
	       	    {
					S(playerid, -1, "{BFFF8B}You need to deliver the pizza using the Pizza scooter!");
	       	    }
	       	}
		}
	}

	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsADmvCar(vehicleid))
	{
	    new string[256];
		if(CP[playerid] == 1)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 2;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[1][0],checkexam[1][1],checkexam[1][2],checkexam[2][0],checkexam[2][1],checkexam[2][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~1~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);

		}
		else if(CP[playerid] == 2)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 3;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[2][0],checkexam[2][1],checkexam[2][2],checkexam[3][0],checkexam[3][1],checkexam[3][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~2~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 3)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 4;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[3][0],checkexam[3][1],checkexam[3][2],checkexam[4][0],checkexam[4][1],checkexam[4][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~3~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 4)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 5;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[4][0],checkexam[4][1],checkexam[4][2],checkexam[5][0],checkexam[5][1],checkexam[5][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~4~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 5)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 6;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[5][0],checkexam[5][1],checkexam[5][2],checkexam[6][0],checkexam[6][1],checkexam[6][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~5~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 6)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 7;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[6][0],checkexam[6][1],checkexam[6][2],checkexam[7][0],checkexam[7][1],checkexam[7][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~6~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 7)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 8;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[7][0],checkexam[7][1],checkexam[7][2],checkexam[8][0],checkexam[8][1],checkexam[8][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~7~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 8)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 9;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[8][0],checkexam[8][1],checkexam[8][2],checkexam[9][0],checkexam[9][1],checkexam[9][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~8~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 9)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 10;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[9][0],checkexam[9][1],checkexam[9][2],checkexam[10][0],checkexam[10][1],checkexam[10][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~9~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 10)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 11;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[10][0],checkexam[10][1],checkexam[10][2],checkexam[11][0],checkexam[11][1],checkexam[11][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~10~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 11)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 12;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[11][0],checkexam[11][1],checkexam[11][2],checkexam[12][0],checkexam[12][1],checkexam[12][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~11~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 12)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 13;
			SetPlayerRaceCheckpoint(playerid, 0,checkexam[12][0],checkexam[12][1],checkexam[12][2],checkexam[13][0],checkexam[13][1],checkexam[13][2],5.0);

			format(string, sizeof(string), "Checkpoints: ~r~12~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 13)
		{
			DisablePlayerRaceCheckpoint(playerid);
			CP[playerid] = 14;
			SetPlayerRaceCheckpoint(playerid, 1,checkexam[13][0],checkexam[13][1],checkexam[13][2],0,0,0,5.0);

			format(string, sizeof(string), "Checkpoints: ~r~13~w~/~r~14");
			PlayerTextDrawSetString(playerid, DMV2[playerid], string);
			PlayerTextDrawShow(playerid, DMV2[playerid]);
		}
		else if(CP[playerid] == 14)
		{
			DisablePlayerRaceCheckpoint(playerid);

			new currentveh;
			currentveh = GetPlayerVehicleID(playerid);

			SetVehicleToRespawn(currentveh);
			StopAudioStreamForPlayer(playerid);

			playerVariables[playerid][pLicentaCondus] = 100;
			Update(playerid, pLicentaCondusx);

			CP[playerid] = 0;

			if(playerVariables[playerid][pLimba] == 1)
			{
				S(playerid,COLOR_LIGHTBLUE,"Felicitari! Ai primit permisul de conducere pentru 100 ore.");
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				S(playerid,COLOR_LIGHTBLUE,"Congratulations! Did you get your driver's license for 100 hours.");
			}
		}
	}
	return 1;
}
public vUpdate(vehicleid, type)
{
	new gQuery[1024];
	switch(type)
	{
	    case cLocationXx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vPosX`='%f' WHERE `vID`='%d'", carVariables[vehicleid][cPos][0], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cLocationYx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vPosY`='%f' WHERE `vID`='%d'", carVariables[vehicleid][cPos][0], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cLocationZx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vPosZ`='%f' WHERE `vID`='%d'", carVariables[vehicleid][cPos][0], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cRotatex:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vPosAngle`='%f' WHERE `vID`='%d'", carVariables[vehicleid][cRotate], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cOwnerIDx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vOwnerID`='%d' WHERE `vID`='%d'", carVariables[vehicleid][cOwnerID], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cColour1x:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vColour1`='%d' WHERE `vID`='%d'", carVariables[vehicleid][cColour][0], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cColour2x:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vColour2`='%d' WHERE `vID`='%d'", carVariables[vehicleid][cColour][1], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cKMx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vKM`='%d' WHERE `vID`='%d'", carVariables[vehicleid][cKM], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cDaysx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vDays`='%d' WHERE `vID`='%d'", carVariables[vehicleid][cDays], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cFuelx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vFuel`='%d' WHERE `vID`='%d'", carVariables[vehicleid][cFuel], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cLockx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vLock`='%d' WHERE `vID`='%d'", carVariables[vehicleid][cLock], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cOwnerx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vOwnerName`='%s' WHERE `vID`='%d'", carVariables[vehicleid][cOwner], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cPlatex:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vPlate`='%s' WHERE `vID`='%d'", carVariables[vehicleid][cPlate], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cHPx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vHP`='%f' WHERE `vID`='%d'", carVariables[vehicleid][cHP], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	    case cInsurancePointsx:
	    {
	        mysql_format(handle, gQuery, sizeof(gQuery),"UPDATE `vehicule` SET `vInsurancePoints`='%d' WHERE `vID`='%d'", carVariables[vehicleid][cInsurancePoints], vehicleid);
			mysql_tquery(handle, gQuery, "","");
	    }
	}
	return 1;
}

public DistanceCheck()
{
    for(new i=0; i<MAX_PLAYERS; i++)
    {
    	new saveQuery[369];
        if(IsPlayerConnected(i))
        {
            if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
	            new Float:dist, Float:X, Float:Y, Float:Z;

	            if(IsPlayerInAnyVehicle(i))
	            {
	                GetVehiclePos(GetPlayerVehicleID(i), X, Y, Z);
	            }
	            else
	            {
	                GetPlayerPos(i, X, Y, Z);
	            }
	            dist = floatsqroot(floatpower(floatabs(floatsub(PosX[i],X)),2)+floatpower(floatabs(floatsub(PosY[i],Y)),2)+floatpower(floatabs(floatsub(PosZ[i],Z)),2));
	            
	            if(CheckDelay[i] >= 1)
	            {
	                CheckDelay[i]--;
	            }
	            else
	            {
	                if(floatround(dist) < 1000) Distancee[i] += floatround(dist);
	            }

	            GetPlayerPos(i,PosX[i],PosY[i],PosZ[i]);
	            new dist2;
	            dist2 = Distancee[i] / 500;
	            if(dist2 >= 1)
	            {
		            if(!IsPlayerAFK[i])
		   			{
						if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
						{
				  			if(vPersonal[GetPlayerVehicleID(i)])
							{
								Distancee[i] = 0;
								carVariables[vPersonal[GetPlayerVehicleID(i)]][cKM] ++;
								vUpdate(vPersonal[GetPlayerVehicleID(i)], cKMx);		
							}
				  		}	
		        	}
		        }
		    }
        }
    }
}
stock InsertCar(playerid, stockid)
{
	new model = Stock[stockid][vModel];
	new value = Stock[stockid][vPrice];
	new rand1 = random(sizeof(spawncardsx));
    new rand2 = random(sizeof(spawncardsy));
    new rand3 = random(sizeof(spawncardsz));
    new rand4 = random(sizeof(rotatecar));
    new string[500];

	new Cache:r, query[512];
	mysql_format(handle, query, sizeof(query), "INSERT INTO `vehicule` (`vOwnerName`) VALUES ('%s')", playerVariables[playerid][pUsername]);
	r = mysql_query( handle, query );
	new i = cache_insert_id();


	carVariables[i][cID] = i;
	carVariables[i][cPos][0] = spawncardsx[rand1][0];
	carVariables[i][cPos][1] = spawncardsy[rand2][0];
	carVariables[i][cPos][2] = spawncardsz[rand3][0];
	carVariables[i][cRotate] = rotatecar[rand4][0];
	carVariables[i][cOwnerID] = playerVariables[playerid][pID];
	carVariables[i][cColour][0] = random(125);
	carVariables[i][cColour][1] = random(125);
	carVariables[i][cKM]= 0;
	carVariables[i][cDays] = 0;
	carVariables[i][cLock] = 1;
	carVariables[i][cFuel] = 200;
	carVariables[i][cModel] = model;
	carVariables[i][cHP] = 1000.0;
	carVariables[i][cInsurance] = 5000;
	carVariables[i][cInsurancePoints] = 10;

	strmid(carVariables[i][cPlate], "NewCar", 0, 10, 255);

	format(carVariables[i][cOwner], MAX_PLAYER_NAME, "%s", playerVariables[playerid][pUsername]);

	mysql_format(handle, string, sizeof(string), "UPDATE vehicule SET vPosX = '%f', vPosY = '%f', vPosZ = '%f', vPosAngle = '%f', vInsurance = '%d', vInsurancePoints = '%d' WHERE vID = %d", carVariables[i][cPos][0], carVariables[i][cPos][1], carVariables[i][cPos][2], carVariables[i][cRotate], carVariables[i][cInsurance], carVariables[i][cInsurancePoints], i);
	mysql_tquery(handle, string, "", "");
	mysql_format(handle, string, sizeof(string), "UPDATE vehicule SET vPlate = '%s', vModel = '%d', vOwnerID = '%d', vColour1 = '%d', vColour2 = '%d', vKM = '%d', vDays = '%d', vLock = '%d', vFuel = '%d' WHERE vID = %d", carVariables[i][cPlate], carVariables[i][cModel], carVariables[i][cOwnerID], carVariables[i][cColour][0], carVariables[i][cColour][1], carVariables[i][cKM], carVariables[i][cDays], carVariables[i][cLock], carVariables[i][cFuel], i);
	mysql_tquery(handle, string, "", "");

	vUpdate(i, cHPx);

	new car = CreateVehicle(carVariables[i][cModel], carVariables[i][cPos][0], carVariables[i][cPos][1], carVariables[i][cPos][2], carVariables[i][cRotate], carVariables[i][cColour][0], carVariables[i][cColour][1], -1);
	SetVehicleNumberPlate(car, carVariables[i][cPlate]);
	SetVehicleHealth(car, carVariables[i][cHP]);
	GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
	vPersonal[car] = i;
	Gas[car] = carVariables[i][cFuel];
	SetVehicleParamsEx(car, 0, lights, alarm, 1, bonnet, boot, objective);
	cache_delete(r);


	playerVariables[playerid][pCash] -=value;
	Update(playerid, pCashx);
	GivePlayerCash(playerid, -value);

	Stock[stockid][vStock]--;
	mysql_format(handle, string, sizeof(string), "UPDATE `stock` SET `Stock` = '%d' WHERE Model = '%d'", Stock[stockid][vStock], model);
	mysql_tquery(handle, string, "","");


    format(string, sizeof(string), "%s [user:%d] bought a %s [car:%d] for $%s.", N(playerid), playerVariables[playerid][pID], VehicleNames[model - 400], carVariables[i][cID], NumberFormat(value));
	submitToAdmins(string, COLOR_YELLOW);

	new string2[256];
	format(string2,256,"[user:%d] bought a %s [car:%d] for $%s.", playerVariables[playerid][pID], VehicleNames[model - 400], carVariables[i][cID], NumberFormat(value));
	chatlogs(string2, -1);

	mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'car', '%d')", string2, playerVariables[playerid][pID]);
	mysql_query(handle, szLargeString);

	return 1;
}
stock CheckIfIsOwner(playerid, vehicleid)
{
    if(!vPersonal[vehicleid]) return 0;
    if(!strcmp(playerVariables[playerid][pUsername], carVariables[vPersonal[vehicleid]][cOwner], true))
    {
        return 1;
    }
    return 0;
}
stock incarcaPersonale( playerid )
{
	for( new i; i < MAX_PVEHS; ++i )
	{
	    if( !strcmp( playerVariables[ playerid ][ pUsername ], carVariables[ i ][ cOwner ], true ) )
	    {
			new troaca = CreateVehicle(  carVariables[ i ][ cModel ], carVariables[ i ][ cPos ][ 0 ], carVariables[ i ][ cPos ][ 1 ], carVariables[ i ][ cPos ][ 2 ], carVariables[ i ][ cRotate ], carVariables[ i ][ cColour ][ 0 ], carVariables[ i ][ cColour ][ 1 ], -1 );
	        vPersonal[ troaca ] = carVariables [ i ][ cID ];
	    }
	}
	printf( "Loaded PCars for %s", playerVariables[ playerid ][ pUsername ] );
	return 1;
}


public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(playerVariables[playerid][pStatus] == 0)
	{
	    Kick(playerid);
 	}
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}


public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	#if defined DEBUG
	    printf("[debug] OnPlayerInteriorChange(%d, %d, %d)", playerid, newinteriorid, oldinteriorid);
	#endif

	if(Undercover[playerid] == 1)
	{
		foreach(Player, i)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
	}
	return 1;
}






public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if((IsACBUGWeapon(playerid) && RELEASED(KEY_FIRE)) && newkeys != KEY_FIRE && newkeys & KEY_CROUCH)
    {
    	ApplyAnimation(playerid , "PED" , "getup" , 4.1 , 0 , 0 , 0 , 0 , 0 ) ;
     	S(playerid, COLOR_RED,"Este interzis sa faci C-BUG.");
    }
    if(newkeys & KEY_FIRE || newkeys & KEY_AIM)
   	{
 		new weapon = GetPlayerWeapon(playerid), slot = GetWeaponSlot(weapon);
 		new gunname[50], string[256];
   		GetWeaponNameEx(weapon, gunname, sizeof(gunname));

	   	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && WeaponData[playerid][slot] == false && slot != 0 && weapon != 46  && GetPlayerWeapon(playerid) != 9)
       	{
       	    ResetPlayerWeaponsEx(playerid);
      		ResetPlayerWeapons(playerid);
			SetTimerEx("KickPublic", 1000, 0, "d", playerid);

	        format(string, sizeof(string), "%s has been kicked by AdmBot, reason: weapon cheats (%s).", playerVariables[playerid][pUsername], gunname);
			submitToAdmins(string, COLOR_BOSS2);

			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'cheats', '%d')", string, playerVariables[playerid][pID]);
			mysql_query(handle, szLargeString);

			foreach(Player, i)
			{
				if(IsPlayerConnected(i))
			   	{
			 		if(playerVariables[i][pAdminLevel] == 0)
					{
						format(string, sizeof(string), "%s has been kicked by AdmBot, reason: weapon cheats (%s).", playerVariables[playerid][pUsername], gunname);
						S(i, COLOR_LIGHTRED, string);
					}
				}
			}
   			return 1;
	   	}
	}
	if(newkeys & KEY_HANDBRAKE)
    {
        new string[256], weapon = GetPlayerWeapon(playerid), slot = GetWeaponSlot(weapon);
        
    	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && WeaponData[playerid][slot] == false)
	    {
	        ResetPlayerWeaponsEx(playerid);
      		ResetPlayerWeapons(playerid);
      		
     		SetTimerEx("KickPublic", 1000, 0, "d", playerid);

	        format(string, sizeof(string), "%s has been kicked by AdmBot, reason: created a jetpack.", playerVariables[playerid][pUsername]);
			submitToAdmins(string, COLOR_BOSS2);

			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'cheats', '%d')", string, playerVariables[playerid][pID]);
			mysql_query(handle, szLargeString);

			foreach(Player, i)
			{
				if(IsPlayerConnected(i))
			   	{
			 		if(playerVariables[i][pAdminLevel] == 0)
					{
						format(string, sizeof(string), "%s has been kicked by AdmBot, reason: created a jetpack.", playerVariables[playerid][pUsername]);
						S(i, COLOR_LIGHTRED, string);
					}
				}
			}
	    }
    }
    if (newkeys & KEY_CROUCH)
	{
		if(groupVariables[playerVariables[playerid][pGroup]][gGroupType] == 1)
		{
		   if(IsPlayerInRangeOfPoint(playerid, 15.0, 1544.7007, -1630.7527, 13.2983))
           {
               MoveObject(lspdbar,1544.7007, -1630.7527, 13.2983,1,0.0000, 0.0000, 90.0000);
               SetTimer("lspdbarclose" , 8000 ,false);
               return 1;
           }
		}
		return 1;
	}
	if ((newkeys==KEY_CTRL_BACK )&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_CARRADIO, DIALOG_STYLE_LIST, "Radio Vehicul", "{DC143C}Turn off Radio\n{FFFFFF}Pro FM Romania\nRadio Taraf Romania\nRadio Bandit\nRadio Romania Popular\nRadio ZU [Audio Plugin]\nKiss FM [Audio Plugin]\nRadio Gangsta Dance\nRadio Tequilla Romania Hip Hop\nRadio Greu de Difuzat Hip Hop\nDubstep.fm", "Alege", "Inchide");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			ShowPlayerDialog(playerid, DIALOG_CARRADIO, DIALOG_STYLE_LIST, "Vehicle Radio", "{DC143C}Turn off Radio\n{FFFFFF}Pro FM Romania\nRadio Taraf Romania\nRadio Bandit\nRadio Romania Popular\nRadio ZU [Audio Plugin]\nKiss FM [Audio Plugin]\nRadio Gangsta Dance\nRadio Tequilla Romania Hip Hop\nRadio Greu de Difuzat Hip Hop\nDubstep.fm", "Choose", "Cancel");
		}
	}
	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
	{
		if(playerVariables[playerid][pAdminLevel] >= 1)
		{
			if(pUseFly[playerid] == 1)
			{
				pUseFly[playerid] = 0;
				S(playerid,COLOR_IN2,"Fly mode off.");
				ClearAnimations(playerid);
				SetCameraBehindPlayer(playerid);
				new Float:slx, Float:sly, Float:slz;
			    GetPlayerPos(playerid, slx, sly, slz);
			    SetPlayerPos(playerid, slx, sly, slz);
				SetTimerEx("unfreezeint", 100, false, "i", playerid);
				TogglePlayerControllable(playerid,0) ;
				StopFly(playerid);
				SetPlayerHealthEx(playerid, 100);
				SetPlayerArmourEx(playerid, 0);
			}
		}
		
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 286.1366,-29.9750,1001.5156)) // gun shop
  		{
			SetPlayerPos(playerid, 286.0566,-23.6882,1001.5229);
	   	}
	   	if(IsPlayerInRangeOfPoint(playerid, 2.0, 286.0566,-23.6882,1001.5229)) // gun shop
  		{
			SetPlayerPos(playerid, 286.1366,-29.9750,1001.5156);
	   	}
		
		
		
		
		
		
		
		
		
		
		
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 2138.9810,-1697.6166,15.0859))
		{
		    SetPlayerPos(playerid, 318.6228,1114.7640,1083.8828);
		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 318.6228,1114.7640,1083.8828))
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 2138.9810,-1697.6166,15.0859);
		    SetPlayerVirtualWorld(playerid, 0);
		}
		
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 2780.6975,-1812.4325,11.8438))
	    {
  			if(areape == 1)
		    {
		        if(playerVariables[playerid][pWanted] == 0)
				{
					ResetPlayerWeaponsEx(playerid);
				    SetPlayerHealthEx(playerid, 100);
      				SetPlayerInterior(playerid, 15);
			    	SetPlayerPos(playerid, -1444.0680,931.7065,1036.4912);
				}
				else return S(playerid, -1, "Nu poti intra deoarece ai wanted!");
		    }
		    else return S(playerid, COLOR_GREY, "Event Place is closed.");
	    }
     	if(IsPlayerInRangeOfPoint(playerid, 3.0, -1444.0680,931.7065,1036.4912))
	    {
	        ResetPlayerWeaponsEx(playerid);
  			SetPlayerInterior(playerid, 0);
	    	SetPlayerPos(playerid, 2780.6975,-1812.4325,11.8438);
	    }
	    
    	if (IsPlayerInRangeOfPoint(playerid, 1, 1541.9508,-1644.4480,13.9816) && GetPlayerVirtualWorld(playerid) == 0) // dozator
  		{
  		    if(playerVariables[playerid][pCash] >= 200)
  		    {
	   			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
	   			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
	   			SetPlayerFacingAngle(playerid, 272.63);
	   		}
	   		else return S(playerid, COLOR_GREY,"You don't have money needed.");
	   	}


		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1554.7539,-1675.6672,16.1953))// LSPD
		{
			SetPlayerPos(playerid, 246.7919,62.6653,1003.6406);
  			SetPlayerInterior(playerid,6);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 246.7919,62.6653,1003.6406))// LSPD
		{
  			SetPlayerPos(playerid, 1554.7539,-1675.6672,16.1953);
  			SetPlayerInterior(playerid,0);
		}
		for(new x = 0; x < MAX_BUSINESSES; x++)
		{
		    new string[256];
			if(IsPlayerInRangeOfPoint(playerid, 2.0, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2]) && businessVariables[x][bType] != 10 && businessVariables[x][bType] != 11 && businessVariables[x][bType] != 12)
			{
				if(businessVariables[x][bLocked] == 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "This business is locked.");
				}
				else
				{
				    if(playerVariables[playerid][pCash] >= businessVariables[x][bFee])
				    {
				        if(LastBiz[playerid] != x)
						{
							businessTypeMessages(x, playerid);
							SetPlayerPos(playerid, businessVariables[x][bInteriorPos][0], businessVariables[x][bInteriorPos][1], businessVariables[x][bInteriorPos][2]);
							SetPlayerInterior(playerid, businessVariables[x][bInterior]);
							SetPlayerVirtualWorld(playerid, BUSINESS_VIRTUAL_WORLD+x);

							GivePlayerCash(playerid,-businessVariables[x][bFee]);
				   			businessVariables[x][bVault] += businessVariables[x][bFee];
						   	format(string,sizeof(string),"~r~-$%d", businessVariables[x][bFee]);
						   	GameTextForPlayer(playerid, string, 3500, 1);
						   	saveBusiness(x);
						   	LastBiz[playerid] = x;
						   	
						   	timebiz = SetTimerEx("timerbusiness", 60000, false, "i", playerid);
				   		}
				   		else
				   		{
				   		    businessTypeMessages(x, playerid);
							SetPlayerPos(playerid, businessVariables[x][bInteriorPos][0], businessVariables[x][bInteriorPos][1], businessVariables[x][bInteriorPos][2]);
							SetPlayerInterior(playerid, businessVariables[x][bInterior]);
							SetPlayerVirtualWorld(playerid, BUSINESS_VIRTUAL_WORLD+x);
					   		GameTextForPlayer(playerid, "welcome back", 3500, 1);
					   		KillTimer(timebiz);
					   		timebiz2 = SetTimerEx("timerbusiness2", 60000, false, "i", playerid);
					   		
				   		}
				   	}
				   	else return S(playerid, COLOR_GREY, "You don't have enough money for entry.");
				}
				return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, businessVariables[x][bInteriorPos][0], businessVariables[x][bInteriorPos][1], businessVariables[x][bInteriorPos][2]) && GetPlayerVirtualWorld(playerid) == BUSINESS_VIRTUAL_WORLD+x)
			{
			    if(RobTime[playerid] <= 0)
			    {
					SetPlayerPos(playerid, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2]);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
				    SS(playerid, COLOR_GREY, "Trebuie sa astepti 10 secunde!", "You must wait 10 seconds!");
				}
				return 1;
			}
		}
		for(new x = 0; x < MAX_GROUPS; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2]))
			{
				if(groupVariables[x][gGroupHQLockStatus] == 1)
				{
					if(playerVariables[playerid][pGroup] == x)
				 	{
						SetPlayerPos(playerid, groupVariables[x][gGroupInteriorPos][0], groupVariables[x][gGroupInteriorPos][1], groupVariables[x][gGroupInteriorPos][2]);
						SetPlayerInterior(playerid, groupVariables[x][gGroupHQInteriorID]);
						SetPlayerVirtualWorld(playerid, GROUP_VIRTUAL_WORLD+x);
						InHQ[playerid] = x;
					}
					else if(playerVariables[playerid][pAdminLevel] >= 1 && playerVariables[playerid][pAdminDuty] == 1)
					{
					    SetPlayerPos(playerid, groupVariables[x][gGroupInteriorPos][0], groupVariables[x][gGroupInteriorPos][1], groupVariables[x][gGroupInteriorPos][2]);
						SetPlayerInterior(playerid, groupVariables[x][gGroupHQInteriorID]);
						SetPlayerVirtualWorld(playerid, GROUP_VIRTUAL_WORLD+x);
						InHQ[playerid] = x;
					}
				}
				else
				{
					SetPlayerPos(playerid, groupVariables[x][gGroupInteriorPos][0], groupVariables[x][gGroupInteriorPos][1], groupVariables[x][gGroupInteriorPos][2]);
					SetPlayerInterior(playerid, groupVariables[x][gGroupHQInteriorID]);
					SetPlayerVirtualWorld(playerid, GROUP_VIRTUAL_WORLD+x);
					InHQ[playerid] = x;
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, groupVariables[1][gGroupInteriorPos][0], groupVariables[1][gGroupInteriorPos][1], groupVariables[1][gGroupInteriorPos][2]) && GetPlayerVirtualWorld(playerid) == GROUP_VIRTUAL_WORLD+1)
			{
				SetPlayerPos(playerid, groupVariables[1][gGroupExteriorPos][0], groupVariables[1][gGroupExteriorPos][1], groupVariables[1][gGroupExteriorPos][2]);
				SetPlayerInterior(playerid, 6);
				SetPlayerVirtualWorld(playerid, 0);
				InHQ[playerid] = -1;
			}
			else
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, groupVariables[x][gGroupInteriorPos][0], groupVariables[x][gGroupInteriorPos][1], groupVariables[x][gGroupInteriorPos][2]) && GetPlayerVirtualWorld(playerid) == GROUP_VIRTUAL_WORLD+x)
				{
					SetPlayerPos(playerid, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2]);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					InHQ[playerid] = -1;
				}
			}
		}
		for(new x = 0; x < MAX_HOUSES; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2]))
			{
				if(houseVariables[x][hHouseLocked] == 1)
				{
					S(playerid, COLOR_GREY, "This house is locked.");
				}
				else
				{
					SetPlayerPos(playerid, houseVariables[x][hHouseInteriorPos][0], houseVariables[x][hHouseInteriorPos][1], houseVariables[x][hHouseInteriorPos][2]);
					SetPlayerInterior(playerid, houseVariables[x][hHouseInterior]);
					SetPlayerVirtualWorld(playerid, HOUSE_VIRTUAL_WORLD+x);
				}
				return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, houseVariables[x][hHouseInteriorPos][0], houseVariables[x][hHouseInteriorPos][1], houseVariables[x][hHouseInteriorPos][2]) && GetPlayerVirtualWorld(playerid) == HOUSE_VIRTUAL_WORLD+x)
			{
				SetPlayerPos(playerid, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
		}
	}

	if(IsKeyJustDown(KEY_WALK, newkeys, oldkeys))
    {
		if(WatchingTV[playerid] == 1)
		{
	   		TogglePlayerSpectating(playerid, false);
	   		if(pUseFly[playerid] == 1)
			{
		    	StartFly(playerid);
		    }
	   		TextDrawHideForPlayer(playerid, info[playerid]);
			TextDrawHideForPlayer(playerid, viata[playerid]);
			TextDrawHideForPlayer(playerid, wantedjail[playerid]);
			TextDrawHideForPlayer(playerid, carspeed[playerid]);
			TextDrawHideForPlayer(playerid, carinfo[playerid]);

      		SetPlayerPos(playerid, s_pos[playerid][retx], s_pos[playerid][rety],s_pos[playerid][retz]+1);
		    SetPlayerFacingAngle(playerid, s_pos[playerid][retang]);
		    SetPlayerVirtualWorld(playerid, s_pos[playerid][retworld]);
		    SetPlayerInterior(playerid, s_pos[playerid][retint]);



			Spectate[playerid] = -1;
			return 1;
		}
    }
	if(newkeys & KEY_ACTION)
 	{	
 		if(GetPlayerVehicleSeat(playerid) == 0)
 		{
 			Light(playerid);	
 		}
  		return 1;
    }
    if((newkeys == KEY_SUBMISSION)&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
        Engine(playerid);
        return 1;
    }
    if(newkeys & KEY_ANALOG_UP)
	{
		Hood(playerid);
		return 1;
	}
	if(newkeys & KEY_ANALOG_DOWN)
	{
		Trunk(playerid);
		return 1;
	}
	if(newkeys & KEY_NO)
	{
		new vehicleid = GetClosestVehicle(playerid), string[256];
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	 
		if(IsPlayerInRangeOfVehicle(playerid, vehicleid, 3.0))
		{
			if(CheckIfIsOwner(playerid, vehicleid))
			{
				switch(carVariables[vPersonal[vehicleid]][cLock])
			    {
			        case 0:
			        {
			            carVariables[vPersonal[vehicleid]][cLock] = 1;
			            Lock[vPersonal[vehicleid]] = 1;

			            format(string, sizeof(string), "%s~n~~r~locked", VehicleNames[GetVehicleModel(vehicleid) - 400]);
						GameTextForPlayer(playerid, string, 4000, 3);

		   				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			            SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
			        }
					case 1:
					{
					    carVariables[vPersonal[vehicleid]][cLock] = 0;
					    Lock[vPersonal[vehicleid]] = 0;

					    format(string, sizeof(string), "%s~n~~g~unlocked", VehicleNames[GetVehicleModel(vehicleid) - 400]);
						GameTextForPlayer(playerid, string, 4000, 3);

						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

					    SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
					}
			    }
			}
		} 
		return 1;
	}
	if(newkeys & KEY_JUMP)
	{
		if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pHelperLevel] >= 1)
		{
				//
		}
		return 1;
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    
    if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID && GetPlayerWeapon(playerid) != 0)
	{
	    new Float: slx, Float: sly, Float:slz;
	    GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPosEx(playerid, slx, sly, slz+3);
	    SetPlayerArmedWeapon(playerid, 0);
		SS(playerid, COLOR_RED, "Nu poti folosi armele pe o masina!", "You can't use weapons while sitting on a car!");
	}
    
	if(playerVariables[playerid][pAlreadyFish] == 1)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 30.0, jobVariables[6][jJobPosition][0], jobVariables[6][jJobPosition][1], jobVariables[6][jJobPosition][2]))
		{
			KillTimer(pescuieste[playerid]);
			SS(playerid, COLOR_GREY, "Job esuat! Nu trebuie sa parasesti zona daca vrei sa prinzi un peste.", "Job failed! You shouldn't leave the area if you want to catch a fish.");

			playerVariables[playerid][pAlreadyFish] = 0;
			RemovePlayerAttachedObject(playerid, 0);
			RemovePlayerAttachedObject(playerid, undita);
		}
	}
 	
    if(farmerc[playerid] == 1)
	{
		if(vehicleVariables[vehicleid][vVehicleJob] != 8)
		{
		    SS(playerid, COLOR_NOB, "Job esuat!", "Job failed!");
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			farmerc[playerid] = 0;
			playerVariables[playerid][pFarmTime] = 0;
			KillTimer(timerfarm[playerid]);
            PlayerTextDrawHide(playerid, farmtime[playerid]);
			PlayerTextDrawHide(playerid, farmbox[playerid]);
		    PlayerTextDrawHide(playerid, farmjob[playerid]);
			PlayerTextDrawHide(playerid, farmspeedro[playerid]);
			PlayerTextDrawHide(playerid, farmspeeden[playerid]);
			PlayerTextDrawHide(playerid, farmwantedro[playerid]);
			PlayerTextDrawHide(playerid, farmwanteden[playerid]);
		}
	}
    
    
    if(pUseFind[playerid] == 1)
	{
		foreach(Player, i)
	    {
            if(JucatorCautat[i] >= 0)
            {
            	new tinta;
                tinta = JucatorCautat[i];
                
            	if(InHQ[tinta] > 0)
			    {
				    new j;
					j = InHQ[tinta];
					
					new Float: x, Float: y, Float: z;
					GetPlayerPos(playerid,x,y,z);
					new Float: distanta = GetPlayerDistanceFromPoint(playerid, groupVariables[j][gGroupExteriorPos][0], groupVariables[j][gGroupExteriorPos][1], groupVariables[j][gGroupExteriorPos][2]);

					new str[500];

					format(str, sizeof(str),"TARGET: ~y~%s (%d)", playerVariables[tinta][pUsername], tinta);
					PlayerTextDrawSetString(i, findplayer2[i], str);
					PlayerTextDrawShow(i, findplayer2[i]);


					format(str,sizeof(str),"DISTANCE: ~y~%.0fm", distanta);
					PlayerTextDrawSetString(i, findplayer[i], str);
					PlayerTextDrawShow(i, findplayer[i]);
				}
			    else
			    {
					new Float: Distance = GetDistanceBetweenPlayers(playerid, tinta);
				    new str[500];

					format(str, sizeof(str),"TARGET: ~y~%s (%d)", playerVariables[tinta][pUsername], tinta);
					PlayerTextDrawSetString(i, findplayer2[i], str);
					PlayerTextDrawShow(i, findplayer2[i]);


					format(str,sizeof(str),"DISTANCE: ~y~%.0fm", Distance);
					PlayerTextDrawSetString(i, findplayer[i], str);
					PlayerTextDrawShow(i, findplayer[i]);
            	}
			}
		}
	}
    
    if(playerVariables[playerid][pOrganizator] == 1)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 200.0, -1403.0852,988.6870,1024.0004))
     	{
     	    if(GetPlayerWeapon(playerid) > 0)
     	    {
     			ResetPlayerWeaponsEx(playerid);
     			S(playerid, COLOR_RED, "Armele tale au fost confiscate deoarece esti creatorul evenimentului.");
     	    }
		}
	}
    
	if(pUseFly[playerid] == 1)
	{
	    SetPlayerHealthEx(playerid, 5000);
		SetPlayerArmourEx(playerid, 5000);
	}

    
  	if(!IsPlayerInVehicle(playerid, vehicleid))
 	{
 	    if(playerVariables[playerid][pMP3] == 0)
 	    {
 	    	StopAudioStreamForPlayer(playerid);
 	    }
 	    TextDrawHideForPlayer(playerid, TextDrawCar[playerid][0]);
		TextDrawHideForPlayer(playerid, TextDrawCar[playerid][1]);
		TextDrawHideForPlayer(playerid, TextDrawCar[playerid][2]);
		TextDrawHideForPlayer(playerid, TextDrawCar[playerid][3]);
		TextDrawHideForPlayer(playerid, TextDrawCar[playerid][4]);
		TextDrawHideForPlayer(playerid, TextDrawCar[playerid][5]);
		TextDrawHideForPlayer(playerid, TextDrawCar[playerid][6]);
		TextDrawHideForPlayer(playerid, TextDrawCar[playerid][7]);
		TextDrawHideForPlayer(playerid, TextDrawCar[playerid][8]);
  		PlayerTextDrawHide(playerid, DMV2[playerid]);
        PlayerTextDrawHide(playerid, DMV1[playerid]);
        playerVariables[playerid][pBelt] = 0;
	}


	if(IsADmvCar(vehicleid))
	{
     	new Float:vhp;
		GetVehicleHealth(vehicleid, vhp);

		if(playerVariables[playerid][pLevel] <= 3 && vhp < 500)
		{
			SetVehicleToRespawn(vehicleid);
			DisablePlayerRaceCheckpoint(playerid);
			SS(playerid, COLOR_RED, "Ai picat examenul pentru ca ai lovit masina.", "Exam failed! You damaged the car!");
		}
		else if(playerVariables[playerid][pLevel] > 3 && vhp < 600)
		{
			SetVehicleToRespawn(vehicleid);
			DisablePlayerRaceCheckpoint(playerid);
			SS(playerid, COLOR_RED, "Ai picat examenul pentru ca ai lovit masina.", "Exam failed! You damaged the car!");
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(Undercover[playerid] == 1) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(issuerid != INVALID_PLAYER_ID)
    {
	    if(weaponid == 54 && GetPlayerState(issuerid) != PLAYER_STATE_DRIVER)
		{
		    if(playerdeath[issuerid] == 0)
		    {
				new Float:HP, Float:AP, Float:remainHP;
		 		GetPlayerHealthEx(issuerid, HP);
		 		GetPlayerArmourEx(issuerid, AP);

				if(AP >= amount)
				{
					SetPlayerArmourEx(issuerid, AP - amount);
					SetPlayerHealthEx(issuerid, HP );
				}
				else if(AP <= 0)
				{
					remainHP = HP - amount;
					SetPlayerHealthEx(issuerid, remainHP);

					if(remainHP <= 0 && playerdeath[issuerid] == 0)
					{
						OnPlayerDeath(playerid, issuerid, weaponid);
						playerdeath[playerid] = 1;
					}
				}
				else
				{
					remainHP = HP + (AP - amount);
					SetPlayerArmourEx(issuerid, 0.0);
					SetPlayerHealthEx(issuerid, remainHP);
					if(remainHP <= 0 && playerdeath[issuerid] == 0)
					{
						OnPlayerDeath(playerid, issuerid, weaponid);
						playerdeath[issuerid] = 1;
					}
				}
			}
		}
	}
 	if(weaponid == 49 || weaponid == 50 || weaponid == 51 || weaponid == 52 || weaponid == 53 || weaponid == 54 || GetPlayerState(issuerid) == PLAYER_STATE_DRIVER)
	{
	    if(playerdeath[playerid] == 0)
	    {
			new Float:HP, Float:AP, Float:remainHP;
		 	GetPlayerHealthEx(playerid,HP);
		 	GetPlayerArmourEx(playerid,AP);
			if ( AP >= amount )
			{
				SetPlayerArmourEx( playerid, AP - amount );
				SetPlayerHealthEx( playerid, HP );
			}
			else if ( AP <= 0 )
			{
				remainHP = HP - amount;
				SetPlayerHealthEx( playerid, remainHP );
				if ( remainHP <= 0 && playerdeath[playerid] == 0 )
				{
					OnPlayerDeath( playerid, issuerid, weaponid );
					playerdeath[playerid] = 1;
				}
			}
			else
			{
				remainHP = HP + ( AP - amount );
				SetPlayerArmourEx( playerid, 0.0 );
				SetPlayerHealthEx( playerid, remainHP );
				if ( remainHP <= 0 && playerdeath[playerid] == 0 )
				{
					OnPlayerDeath( playerid, issuerid, weaponid );
					playerdeath[playerid] = 1;
				}
			}
		}
	}
	return 1;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(playerdeath[damagedid] == 0)
	{
		if(weaponid == 34)
  		{
    		SetPlayerHealthEx(damagedid, 0.0);
      		SetPlayerArmourEx(damagedid, 0.0);
        	OnPlayerDeath(damagedid, playerid, weaponid);
			playerdeath[damagedid] = 1;
			return 1;
   		}
	 	new Float: HP, Float: AP ;
		GetPlayerHealthEx(damagedid, HP);
		GetPlayerArmourEx(damagedid, AP);
		
		if(AP >= amount)
		{
			SetPlayerArmourEx(damagedid, AP - amount);
		}
		else if (AP <= 0)
		{
			new const Float: remainHP = HP - amount;
			SetPlayerHealthEx(damagedid, remainHP);
			
			if(remainHP <= 0)
			{
				OnPlayerDeath(damagedid, playerid, weaponid);
				playerdeath[damagedid] = 1;
				return 1;
			}
		}
		else
		{
			new const Float: remainHP = HP + (AP - amount);
			
			SetPlayerArmourEx(damagedid, 0.0 );
			SetPlayerHealthEx(damagedid, remainHP);
			
			if(remainHP <= 0)
			{
				OnPlayerDeath(damagedid, playerid, weaponid);
				playerdeath[damagedid] = 1;
				return 1;
			}
		}
	}
	return 1;
}


public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	for(new i; i < sizeof(antisqlinjection); i++)
    {
		if(strfind(inputtext, antisqlinjection[i], true) != -1)
		{
			S(playerid, COLOR_LIGHT, "SERVER: Invalid dialog input.");
			return 1;
   		}
    }
 	if(dialogid == DIALOG_LOGIN)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!response)
	            return Kick(playerid);

   			if(strlen(inputtext) >= 4 && strlen(inputtext) <= 20)
     		{
     		    if(strfind(inputtext, "'", true) != -1)
     		    {
     		        new pName[64];
					GetPlayerName(playerid, pName, sizeof(pName));
					ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Logheaza-te", "Introdu parola contului mai jos.\nParola introdusa de tine nu este corecta.", "Logare", "Exit");
				}
     		    new tmppass[64];
      			mysql_real_escape_string(inputtext, tmppass);
      			if(strlen(tmppass) < 3)
     		    {
     		        new loginname[64];
					GetPlayerName(playerid,loginname,sizeof(loginname));
					ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"Logheaza-te", "Introdu parola contului mai jos.\nParola introdusa de tine nu este corecta.", "Logare", "Exit");
				}
				OnPlayerLogin(playerid, tmppass);
    		}
      		else
      		{
				new loginname[64];
				GetPlayerName(playerid,loginname,sizeof(loginname));
				ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Logheaza-te", "Introdu parola contului mai jos.\nParola introdusa de tine nu este corecta.", "Logare", "Exit");
			}
		}
	}

	if(dialogid == DIALOG_REGISTER)
	{
 		if(!response)
  			return Kick(playerid);
  			
  		if((strlen(inputtext) >= 4) && (strlen(inputtext) <= 20))
	    {
	    
	     	new tmppass[64];
		    new pName[30], string[256];
			GetPlayerName(playerid, pName, sizeof(pName));

		    mysql_real_escape_string(inputtext, tmppass);

		    if(strlen(tmppass) < 4)
			{
       			format(string,sizeof(string),"{BECBFC}Welcome, {95A3FF}%s{BECBFC}!\n\nPlease enter your password below to login to your account.\n\n* {FFFFFF}Last login: %s *", pName);
				ShowPlayerDialog(playerid, DIALOG_LOGIN ,DIALOG_STYLE_PASSWORD,"Login", string, "Login", "Exit");
			}

			OnPlayerRegister(playerid,tmppass);
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Inregistrare", "Parola trebuie sa contina cel putin 4 caractere.\nIncearca din nou folosind o parola cu mai multe caractere.", "Register", "Exit");
  		}
	}



 	if(dialogid == DIALOG_SEX)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					S(playerid, COLOR_YELLOW, "Sex setat: barbat");
					playerVariables[playerid][pSex] = 1;
		        	Update(playerid, pSexx);
		        	ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Varsta", "Scrie varsta caracterului tau:", "Ok", "");
					SetPlayerSkin(playerid, 170);
	   				playerVariables[playerid][pSkin] = 170;
	   				Update(playerid, pSkinx);
				}
				case 1:
				{
				    S(playerid, COLOR_YELLOW, "Sex setat: femeie");
				    playerVariables[playerid][pSex] = 2;
		        	Update(playerid, pSexx);
					ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Varsta", "Scrie varsta caracterului tau:", "Ok", "");
					SetPlayerSkin(playerid,13);
			    	playerVariables[playerid][pSkin] = 13;
			    	Update(playerid, pSkinx);
				}
			}
		}
		else
		{
			Kick(playerid);
			return 1;
		}
	}
	if(dialogid == DIALOG_SHOP)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{

				}
    			case 1:
				{
					if(playerVariables[playerid][pPremiumPoints] >= 30)
					{
					    if(playerVariables[playerid][pDonate] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUYPREMIUM, DIALOG_STYLE_MSGBOX, "Premium account", "Do you want to pay 30 premium points to get Premium Account?", "Yes", "No");
						}
						else return S(playerid, COLOR_WHITE, "You already have a premium account.");
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
				case 2:
				{
    				if(playerVariables[playerid][pPremiumPoints] >= 20)
					{
						ShowPlayerDialog(playerid, DIALOG_IPHONE, DIALOG_STYLE_INPUT, "iPhone", "Once you've purchased an iPhone, you have to choose a number.\n\nRequirements:\n- the number must be made of 4 digits\n- the number must be unique\n\nType it in the box.", "Done", "");
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
				case 3:
				{
    				if(playerVariables[playerid][pPremiumPoints] >= 10)
					{
						ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Change your name", "Type your new name in the box. An admin will accept it soon!", "Ok", "Cancel");
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
    			case 4:
				{
    				if(playerVariables[playerid][pPremiumPoints] >= 20)
					{
						if(playerVariables[playerid][pFactionPunish] <= 0)
						{
							S(playerid, COLOR_WHITE, "You don't have any faction punish.");
							return 1;
						}
   						playerVariables[playerid][pPremiumPoints] -= 20;
						Update(playerid, pPremiumPointsx);
						
		    			playerVariables[playerid][pFactionPunish] -= 20;
		    			Update(playerid, pFactionPunishx);
		    			
		    			S(playerid, COLOR_YELLOW, "Shop: You bought clear 20 faction punish for 20 premium points.");
		    			
		    			new string[256];
		    			
		    			format(string, sizeof(string), "/shop: %s paid 20 premium points to clear 20 FP.", playerVariables[playerid][pUsername]);
						submitToAdmins(string, COLOR_ADMCHAT);

						mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'clearfp', '%d')", string, playerVariables[playerid][pID]);
						mysql_query(handle, string);
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
    			case 5:
				{
    				if(playerVariables[playerid][pPremiumPoints] >= 10)
					{
						if(playerVariables[playerid][pFactionPunish] <= 0)
						{
							S(playerid, COLOR_WHITE, "You don't have any faction punish.");
							return 1;
						}
   						playerVariables[playerid][pPremiumPoints] -= 10;
						Update(playerid, pPremiumPointsx);

		    			playerVariables[playerid][pFactionPunish] -= 10;
		    			Update(playerid, pFactionPunishx);

		    			S(playerid, COLOR_YELLOW, "Shop: You bought clear 10 faction punish for 10 premium points.");

		    			new string[256];

		    			format(string, sizeof(string), "/shop: %s paid 10 premium points to clear 10 FP.", playerVariables[playerid][pUsername]);
						submitToAdmins(string, COLOR_ADMCHAT);

						mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'clearfp', '%d')", string, playerVariables[playerid][pID]);
						mysql_query(handle, string);
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
    			case 6:
				{
    				if(playerVariables[playerid][pPremiumPoints] >= 20)
					{
						if(playerVariables[playerid][pWarns] <= 0)
						{
							S(playerid, COLOR_WHITE, "You don't have any warn.");
							return 1;
						}
							
						playerVariables[playerid][pPremiumPoints] -= 20;
						Update(playerid, pPremiumPointsx);
						
						playerVariables[playerid][pWarns] = 0;
						Update(playerid, pWarnsx);
						
						S(playerid, COLOR_YELLOW, "Shop: You bought clear warns for 20 premium points.");

						new string[256];

		    			format(string, sizeof(string), "/shop: %s paid 20 premium points to clear warns.", playerVariables[playerid][pUsername]);
						submitToAdmins(string, COLOR_ADMCHAT);

						mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'clearwarns', '%d')", string, playerVariables[playerid][pID]);
						mysql_query(handle, string);
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
	  	 		case 7:
				{
					if(playerVariables[playerid][pPremiumPoints] >= 10)
					{
					    playerVariables[playerid][pPremiumPoints] -= 10;
	                	Update(playerid, pPremiumPointsx);

	  					playerVariables[playerid][pHidden] += 1;
	  					Update(playerid, pHiddenx);
	  					
	  					S(playerid, COLOR_YELLOW, "Shop: You bought 1 hidden color for 10 premium points.");
	  					
	  					new string[256];

		    			format(string, sizeof(string), "/shop: %s bought 1 hidden color for 10 premium points.", playerVariables[playerid][pUsername]);
						submitToAdmins(string, COLOR_ADMCHAT);

						mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'hidden', '%d')", string, playerVariables[playerid][pID]);
						mysql_query(handle, string);

					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
				case 8:
				{
					if(playerVariables[playerid][pPremiumPoints] >= 1)
					{
	                	playerVariables[playerid][pPremiumPoints] -= 1;
	                	Update(playerid, pPremiumPointsx);

	  					playerVariables[playerid][pFireworks] += 5;
	  					Update(playerid, pFireworksx);

		    			S(playerid, COLOR_YELLOW, "Shop: You bought 5 fireworks for 1 premium points. Use /placefireworks.");

		    			new string[256];

		    			format(string, sizeof(string), "/shop: %s bought 5 fireworks.", playerVariables[playerid][pUsername]);
						submitToAdmins(string, COLOR_ADMCHAT);

						mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'shop', '%d')", string, playerVariables[playerid][pID]);
						mysql_query(handle, string);
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
    			case 9:
				{
					if(playerVariables[playerid][pPremiumPoints] >= 30)
					{
					    if(playerVariables[playerid][pSpecialSkin] == 289) return SS(playerid, COLOR_GREY, "Ai deja acest skin special cumparat!", "You have already bought this special skin!");

						SetPlayerSkin(playerid, 289);
					    playerVariables[playerid][pSpecialSkin] = 289;
					    Update(playerid, pSpecialSkinx);
					    
	                	playerVariables[playerid][pPremiumPoints] -= 30;
	                	Update(playerid, pPremiumPointsx);
	                	
	                	S(playerid, COLOR_RED, "Shop: You bought Zero's skin for 30 premium points.");
	                	
	                	new string[256];

		    			format(string, sizeof(string), "/shop: %s bought Zero's skin.", playerVariables[playerid][pUsername]);
						submitToAdmins(string, COLOR_ADMCHAT);

						mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'shop', '%d')", string, playerVariables[playerid][pID]);
						mysql_query(handle, string);
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
    			case 10:
				{
					if(playerVariables[playerid][pPremiumPoints] >= 30)
					{
					    if(playerVariables[playerid][pSpecialSkin] == 0) return SS(playerid, COLOR_GREY, "Ai deja acest skin special cumparat!", "You have already bought this special skin!");

						SetPlayerSkin(playerid, 0);
					    playerVariables[playerid][pSpecialSkin] = 0;
					    Update(playerid, pSpecialSkinx);

	                	playerVariables[playerid][pPremiumPoints] -= 30;
	                	Update(playerid, pPremiumPointsx);

	                	S(playerid, COLOR_RED, "Shop: You bought CJ's skin for 30 premium points.");

	                	new string[256];

		    			format(string, sizeof(string), "/shop: %s bought CJ's skin.", playerVariables[playerid][pUsername]);
						submitToAdmins(string, COLOR_ADMCHAT);

						mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'shop', '%d')", string, playerVariables[playerid][pID]);
						mysql_query(handle, string);
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
    			case 11:
				{
					if(playerVariables[playerid][pPremiumPoints] >= 50)
					{
					    
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
    			case 12:
				{
				    if(playerVariables[playerid][pLevel] < 3) return S(playerid, COLOR_GREY, "You need to have level 3+ to buy a plane.");
				    
					if(playerVariables[playerid][pPremiumPoints] >= 200)
					{
      					
      					playerVariables[playerid][pPremiumPoints] -= 200;
	                	Update(playerid, pPremiumPointsx);
	                	
                  		S(playerid, COLOR_RED, "Shop: You bought a Dodo plane for 200 premium points.");

                  		if(playerVariables[playerid][pCarKey1] == 1 && playerVariables[playerid][pCarKey2] == 1 && playerVariables[playerid][pDonate] == 0) return SS(playerid, COLOR_GREY,"Ai nevoie de cont premium pentru a putea detine 4 vehicule.","You need to have a premium account to be able to own 4 vehicles.");
			        	if(playerVariables[playerid][pCarKey1] == 1 && playerVariables[playerid][pCarKey2] == 1 && playerVariables[playerid][pCarKey3] == 1 && playerVariables[playerid][pCarKey4] == 1) return SS(playerid, COLOR_GREY,"Nu poti detine mai mult de 4 vehicule.","You can't own more than 4 vehicles.");
			        	if(playerVariables[playerid][pCarKey1] == 0)
			        	{
			        		InsertCar(playerid, 593);
			        		playerVariables[playerid][pCarKey1] = 1;
			        		Update(playerid, pCarKey1x);
			        	}
			        	else if(playerVariables[playerid][pCarKey2] == 0)
			        	{
			        		InsertCar(playerid, 593);
			        		playerVariables[playerid][pCarKey2] = 1;
			        		Update(playerid, pCarKey2x);
			        	}
			        	
			        	else if(playerVariables[playerid][pDonate] == 1)
			        	{
			        		if(playerVariables[playerid][pCarKey3] == 0)
			        		{
			        			InsertCar(playerid, 593);
			        			playerVariables[playerid][pCarKey3] = 1;
			        			Update(playerid, pCarKey3x);
			        		}
			        		else if(playerVariables[playerid][pCarKey4] == 0)
				        	{
				        		InsertCar(playerid, 593);
				        		playerVariables[playerid][pCarKey4] = 1;
				        		Update(playerid, pCarKey4x);
				        	} 
						}

					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
    			case 13:
				{
				    if(playerVariables[playerid][pPrisonID] != 2) return SS(playerid, COLOR_GREY, "Nu te afli in jailul adminilor!", "You are not present in admin's jail.");

					if(playerVariables[playerid][pPremiumPoints] >= 10)
					{
						playerVariables[playerid][pPrisonID] = 0;
						Update(playerid, pPrisonIDx);

						playerVariables[playerid][pPrisonTime] = 0;
						Update(playerid, pPrisonTimex);
						
						playerVariables[playerid][pLicentaArme] = 10;
						Update(playerid, pLicentaArmex);

      					playerVariables[playerid][pPremiumPoints] -= 10;
	                	Update(playerid, pPremiumPointsx);
	                	
	                	OnPlayerSpawn(playerid);

						S(playerid, COLOR_WHITE, "Your time is up! You have been released from jail.");
						TextDrawHideForPlayer(playerid, jailstat[playerid]);
						
						new string[256];
						mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s a fost eliberat pentru 10 premium points.', 'shop', '%d')", playerVariables[playerid][pUsername], playerVariables[playerid][pID]);
						mysql_query(handle, string);
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					}
				}
			}
		}
	}
	if(dialogid == DIALOG_CHANGENAME)
	{
		if(response)
		{
  			new querySz[150];
			format(querySz, sizeof(querySz), "SELECT username FROM players WHERE username = '%s'", inputtext);
			
			if(strlen(inputtext) >= 3 && strlen(inputtext) <= 20)
     		{
				new Cache: resultooo = mysql_query (handle, querySz);
				if(cache_get_row_count() > 0)
				{
				    if(playerVariables[playerid][pLimba] == 1)
				    {
						S(playerid, COLOR_GREY, "Acest nickname exista deja. Incearca din nou!");
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
				    	S(playerid, COLOR_GREY, "This nickname already exists. Try again!");
				    }
					return 1;
				}
				cache_delete(resultooo);
				mysql_escape_string(inputtext, szPlayerName);

				format(playerVariables[playerid][pNewName], MAX_PLAYER_NAME, szPlayerName);

				playerVariables[playerid][pRequestName] = 1;

				if(playerVariables[playerid][pLimba] == 1)
	   			{
					S(playerid, COLOR_YELLOW, "Cerere trimisa! Un admin iti va aproba schimbare nick-ului in curand.");
				}
				if(playerVariables[playerid][pLimba] == 2)
	   			{
	   				S(playerid, COLOR_YELLOW, "Request sent! An admin will approve change your nickname soon.");
				}

				format(szMessage, sizeof(szMessage), "NameChange: %s [%d] wants to change his name to %s.", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pNewName]);
				submitToAdmins(szMessage, COLOR_BOSS2);
			}
			else return S(playerid, COLOR_GREY, "The name must contain at least 3 characters.");
		}
	}
	if(dialogid == DIALOG_QUITGROUP)
	{
 		if(response)
		{
			new query[256], string[500], string2[500];
			if(playerVariables[playerid][pGroup] < 7)
			{
			    format(query, 256, "SELECT * FROM `players` WHERE `Group` = '%d' AND `GroupRank` = '7'", playerVariables[playerid][pGroup]);


				if(cache_get_row_count() >= 1)
				{
					format(string2, sizeof(string2), "%s left faction %s (rank %d) after %d days using /quitgroup, with 20 FP.", GetName(playerid), groupVariables[playerVariables[playerid][pGroup]][gGroupName], playerVariables[playerid][pGroupRank], playerVariables[playerid][pGroupDays]);
					mysql_format(handle, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`) VALUES ('%s','%d')", string2, playerVariables[playerid][pID]);
					mysql_tquery(handle, query, "","");

					format(string, sizeof(string),"%s left faction %s (rank %d) after %d days using /quitgroup, WITH 20 FP.", GetName(playerid), groupVariables[playerVariables[playerid][pGroup]][gGroupName], playerVariables[playerid][pGroupRank], playerVariables[playerid][pGroupDays]);
					SendToGroup(playerVariables[playerid][pGroup], COLOR_GENANNOUNCE, string);
					
					playerVariables[playerid][pFactionPunish] = 20;
					Update(playerid, pFactionPunishx);
				}
				else
				{
    				format(string2, sizeof(string2), "%s left faction %s (rank %d) after %d days using /quitgroup, without FP. The faction had no leader when he/she left.", GetName(playerid), groupVariables[playerVariables[playerid][pGroup]][gGroupName], playerVariables[playerid][pGroupRank], playerVariables[playerid][pGroupDays]);
					mysql_format(handle, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`) VALUES ('%s','%d')", string2, playerVariables[playerid][pID]);
					mysql_tquery(handle, query, "","");
					
					format(string,sizeof(string),"%s left faction %s (rank %d) after %d days using /quitgroup, without FP.", GetName(playerid), groupVariables[playerVariables[playerid][pGroup]][gGroupName], playerVariables[playerid][pGroupRank], playerVariables[playerid][pGroupDays]);
					SendToGroup(playerVariables[playerid][pGroup], COLOR_GENANNOUNCE, string);
					
					playerVariables[playerid][pFactionPunish] = 0;
					Update(playerid, pFactionPunishx);
				}

				playerVariables[playerid][pGroup] = 0;
				Update(playerid, pGroupx);

				playerVariables[playerid][pGroupRank] = 0;
				Update(playerid, pGroupRankx);

				playerVariables[playerid][pGroupDays] = 0;
				Update(playerid, pGroupDaysx);

				playerVariables[playerid][pFWarns] = 0;
				Update(playerid, pFWarnsx);

				if(playerVariables[playerid][pSex] == 1)
				{
					SetPlayerSkin(playerid, 170);
	   				playerVariables[playerid][pSkin] = 170;
	   				Update(playerid, pSkinx);
	   			}
	   			if(playerVariables[playerid][pSex] == 2)
				{
					SetPlayerSkin(playerid, 13);
	   				playerVariables[playerid][pSkin] = 13;
	   				Update(playerid, pSkinx);
	   			}

	   			playerVariables[playerid][pWKills] = 0;
	   			Update(playerid, pWKillsx);

				playerVariables[playerid][pWDeaths] = 0;
				Update(playerid, pWDeathsx);
			}
		}
	}
	if(dialogid == DIALOG_BUY)
	{
		if(response)
		{
		    new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	 		switch(listitem)
	 		{
				case 0:
			 	{
                    if(playerVariables[playerid][pCash] >= 500)
					{
					    new string[256];
						GivePlayerCash(playerid, -500);
						businessVariables[businessID][bVault] += 500;
				        playerVariables[playerid][pPhoneNumber] = random(89999)+10000;
				        Update(playerid, pPhoneNumberx);
				        
				        playerVariables[playerid][pPhone] = 1;
				        Update(playerid, pPhonex);

						format(string, sizeof(string), "You have purchased a cellphone! Now, your number is %d.", playerVariables[playerid][pPhoneNumber]);
					    S(playerid, COLOR_WHITE, string);
					    saveBusiness(businessID);
					    
					    GameTextForPlayer(playerid,"~r~-$500", 1500, 1);
					    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
    				else return S(playerid, COLOR_GREY, "You don't have enough money to purchase this product.");
			 	}
    		 	case 1:
			 	{
                    if(playerVariables[playerid][pCash] >= 100)
					{
					    if(playerVariables[playerid][pPhoneBook] == 0)
					    {
							GivePlayerCash(playerid, -100);
							businessVariables[businessID][bVault] += 100;
							
							playerVariables[playerid][pPhoneBook] = 1;
							Update(playerid, pPhoneBookx);

							S(playerid, COLOR_WHITE, "You have purchased a phonebook. Use /number to trace a number down!");
						    saveBusiness(businessID);

						    GameTextForPlayer(playerid,"~r~-$100", 1500, 1);
						    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						}
						else return S(playerid, -1, "You have a phone book.");
					}
    				else return S(playerid, COLOR_GREY, "You don't have enough money to purchase this product.");
			 	}
     			case 2:
			 	{
                    if(playerVariables[playerid][pCash] >= 250)
					{
					    if(playerVariables[playerid][pPhoneNumber] == 0)
		    				return S(playerid, COLOR_GREY, "You do not have a phone.");
		    			
						GivePlayerCash(playerid, -250);
						businessVariables[businessID][bVault] += 250;
						
						playerVariables[playerid][pCredit] += 30;
						Update(playerid, pCreditx);


					    saveBusiness(businessID);
					    
					    S(playerid,COLOR_WHITE,"You have purchased a phone credit voucher.");

					    GameTextForPlayer(playerid,"~r~-$250", 1500, 1);
					    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
    				else return S(playerid, COLOR_GREY, "You don't have enough money to purchase this product.");
			 	}
     			case 3:
			 	{
                    if(playerVariables[playerid][pCash] >= 2000)
					{
						GivePlayerCash(playerid, -2000);
						businessVariables[businessID][bVault] += 2000;

					    saveBusiness(businessID);
						GivePlayerWeaponEx(playerid, 43, 10);
					    S(playerid,-1,"You have purchased a foto camera.");

					    GameTextForPlayer(playerid,"~r~-$2000", 1500, 1);
					    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
    				else return S(playerid, COLOR_GREY, "You don't have enough money to purchase this product.");
			 	}
     			case 4:
			 	{
                    if(playerVariables[playerid][pCash] >= 2000)
					{
					    if(playerVariables[playerid][pWalkieTalkie] != -1)
		    				return S(playerid, COLOR_GREY, "You are unable to purchase another walkie talkie.");

						GivePlayerCash(playerid, -2000);
						businessVariables[businessID][bVault] += 2000;
						
						playerVariables[playerid][pWalkieTalkie] = 0;
						Update(playerid, pWalkieTalkiex);
						
						S(playerid, COLOR_WHITE, "You have purchased a walkie talkie - use /setfreq to tune it, and /wt to speak.");

					    saveBusiness(businessID);
					    GameTextForPlayer(playerid,"~r~-$2000", 1500, 1);
					    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
    				else return S(playerid, COLOR_GREY, "You don't have enough money to purchase this product.");
			 	}
			 	case 5:
			 	{
                    if(playerVariables[playerid][pCash] >= 3000)
					{
						GivePlayerCash(playerid, -3000);
						businessVariables[businessID][bVault] += 3000;

						S(playerid, COLOR_WHITE, "You bought a parachute.");
						GivePlayerWeaponEx(playerid, 46, 1);

					    saveBusiness(businessID);
					    GameTextForPlayer(playerid,"~r~-$3000", 1500, 1);
					    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
    				else return S(playerid, COLOR_GREY, "You don't have enough money to purchase this product.");
			 	}
	 		}
		}
	}
	if(dialogid == DIALOG_BUYTOYS)
	{
		if(response)
		{
		    new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	 		switch(listitem)
	 		{
     			case 0:
			 	{
			 	    if(playerVariables[playerid][pCash] < 500) return S(playerid, COLOR_GREY, "You don't have enough money.");
			 		GivePlayerCash(playerid, -500);
			 		businessVariables[businessID][bVault] += 500;
			 		GameTextForPlayer(playerid, "~r~-$500", 1500, 1);
			 		GivePlayerWeaponEx(playerid, 10, 1);

			 	    saveBusiness(businessID);
	 	   		}
	 	   		case 1:
			 	{
			 	    if(playerVariables[playerid][pCash] < 100) return S(playerid, COLOR_GREY, "You don't have enough money.");
			 		GivePlayerCash(playerid, -100);
			 		businessVariables[businessID][bVault] += 100;
			 		GameTextForPlayer(playerid, "~r~-$100", 1500, 1);
			 		GivePlayerWeaponEx(playerid, 11, 1);

			 	    saveBusiness(businessID);
	 	   		}
	 	   		case 2:
			 	{
			 	    if(playerVariables[playerid][pCash] < 100) return S(playerid, COLOR_GREY, "You don't have enough money.");
			 		GivePlayerCash(playerid, -100);
			 		businessVariables[businessID][bVault] += 100;
			 		GameTextForPlayer(playerid, "~r~-$100", 1500, 1);
			 		GivePlayerWeaponEx(playerid, 13, 1);

			 	    saveBusiness(businessID);
	 	   		}
        		case 3:
			 	{
			 	    if(playerVariables[playerid][pCash] < 100) return S(playerid, COLOR_GREY, "You don't have enough money.");
			 		GivePlayerCash(playerid, -100);
			 		businessVariables[businessID][bVault] += 100;
			 		GameTextForPlayer(playerid, "~r~-$100", 1500, 1);
			 		GivePlayerWeaponEx(playerid, 12, 1);

			 	    saveBusiness(businessID);
	 	   		}
        		case 4:
			 	{
			 	    if(playerVariables[playerid][pCash] < 150) return S(playerid, COLOR_GREY, "You don't have enough money.");
			 		GivePlayerCash(playerid, -150);
			 		businessVariables[businessID][bVault] += 150;
			 		GameTextForPlayer(playerid, "~r~-$150", 1500, 1);
			 		GivePlayerWeaponEx(playerid, 14, 1);

			 	    saveBusiness(businessID);
	 	   		}
	 	   	}
		}
	}
	if(dialogid == DIALOG_BUYDRINK)
	{
		if(response)
		{
		    new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	 		switch(listitem)
	 		{
	 			case 0:
			 	{
			 	    if(playerVariables[playerid][pCash] < 50) return S(playerid, COLOR_GREY, "You don't have enough money.");
			 		GivePlayerCash(playerid, -50);
			 		businessVariables[businessID][bVault] += 50;
			 		GameTextForPlayer(playerid, "~r~-$50", 1500, 1);
			 	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			 	    
			 	    saveBusiness(businessID);
	 	   		}
	 	   		case 1:
			 	{
         			if(playerVariables[playerid][pCash] < 80) return S(playerid, COLOR_GREY, "You don't have enough money.");
			 		GivePlayerCash(playerid, -80);
			 		businessVariables[businessID][bVault] += 80;
			 		GameTextForPlayer(playerid, "~r~-$80", 1500, 1);
			 	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);

			 	    saveBusiness(businessID);
	 	   		}
	 	   		case 2:
			 	{
         			if(playerVariables[playerid][pCash] < 100) return S(playerid, COLOR_GREY, "You don't have enough money.");
			 		GivePlayerCash(playerid, -100);
			 		businessVariables[businessID][bVault] += 100;
			 		GameTextForPlayer(playerid, "~r~-$100", 1500, 1);
			 	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

			 	    saveBusiness(businessID);
	 	   		}
        		case 3:
			 	{
			 	    if(playerVariables[playerid][pCash] < 50) return S(playerid, COLOR_GREY, "You don't have enough money.");
			 		GivePlayerCash(playerid, -50);
			 		businessVariables[businessID][bVault] += 50;
			 		GameTextForPlayer(playerid, "~r~-$50", 1500, 1);
			 	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

			 	    saveBusiness(businessID);
	 	   		}
	 	   	}
		}
	}
	if(dialogid == DIALOG_BUYGUN)
	{
		if(response)
		{
		    new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	 		switch(listitem)
	 		{
	 			case 0:
			 	{
			 		if(playerVariables[playerid][pCash] >= 2500)
					{
					    new string[256];
						GivePlayerCash(playerid, -2500);
						businessVariables[businessID][bVault] += 2500;

						GivePlayerWeaponEx(playerid, 24, 50);
						
						format(string, sizeof(string), "* %s bought a Desert Eagle.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string);
						saveBusiness(businessID);
					}
					else
					{
						S(playerid, COLOR_GREY, "You don't have enough money to purchase this gun!");
					}
				}
    			case 1:
			 	{
			 		if(playerVariables[playerid][pCash] >= 5000)
					{
					    new string[256];
						GivePlayerCash(playerid, -5000);
						businessVariables[businessID][bVault] += 5000;

						GivePlayerWeaponEx(playerid, 31, 150);

						format(string, sizeof(string), "* %s bought a M4.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string);
						saveBusiness(businessID);
					}
					else
					{
						S(playerid, COLOR_GREY, "You don't have enough money to purchase this gun!");
					}
				}
    			case 2:
			 	{
			 		if(playerVariables[playerid][pCash] >= 5000)
					{
					    new string[256];
						GivePlayerCash(playerid, -5000);
						businessVariables[businessID][bVault] += 5000;

						GivePlayerWeaponEx(playerid, 30, 150);

						format(string, sizeof(string), "* %s bought a AK47.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string);
						saveBusiness(businessID);
					}
					else
					{
						S(playerid, COLOR_GREY, "You don't have enough money to purchase this gun!");
					}
				}
    			case 3:
			 	{
			 		if(playerVariables[playerid][pCash] >= 1500)
					{
					    new string[256];
						GivePlayerCash(playerid, -1500);
						businessVariables[businessID][bVault] += 1500;

						GivePlayerWeaponEx(playerid, 25, 50);

						format(string, sizeof(string), "* %s bought a Shotgun.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string);
						saveBusiness(businessID);
					}
					else
					{
						S(playerid, COLOR_GREY, "You don't have enough money to purchase this gun!");
					}
				}
    			case 4:
			 	{
			 		if(playerVariables[playerid][pCash] >= 2000)
					{
					    new string[256];
						GivePlayerCash(playerid, -2000);
						businessVariables[businessID][bVault] += 2000;

						GivePlayerWeaponEx(playerid, 29, 100);

						format(string, sizeof(string), "* %s bought a MP5.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string);
						saveBusiness(businessID);
					}
					else
					{
						S(playerid, COLOR_GREY, "You don't have enough money to purchase this gun!");
					}
				}
    			case 5:
			 	{
			 		if(playerVariables[playerid][pCash] >= 500)
					{
					    new string[256];
						GivePlayerCash(playerid, -500);
						businessVariables[businessID][bVault] += 500;

						GivePlayerWeaponEx(playerid, 5, 1);

						format(string, sizeof(string), "* %s bought a Baseball Bat.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string);
						saveBusiness(businessID);
					}
					else
					{
						S(playerid, COLOR_GREY, "You don't have enough money to purchase this gun!");
					}
				}
			}
		}
	}
	if(dialogid == DIALOG_FIGHTSTYLE)
	{
		if(response)
		{
	 		switch(listitem)
	 		{
	 			case 0:
			 	{
					if(playerVariables[playerid][pFightStyle] != FIGHT_STYLE_BOXING)
					{
						if(playerVariables[playerid][pCash] >= 10000)
						{
							new business = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;
								
							GivePlayerCash(playerid, -10000);
							
							playerVariables[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
							Update(playerid, pFightStylex);

							businessVariables[business][bVault] += 10000;
							
							S(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
							SetPlayerFightingStyle(playerid, playerVariables[playerid][pFightStyle]);
							saveBusiness(business);
						}
						else S(playerid, COLOR_GREY, "You do not have enough money to purchase this.");
					}
					else S(playerid, COLOR_GREY, "You are already using this style.");
				}
    			case 1:
			 	{
					if(playerVariables[playerid][pFightStyle] != FIGHT_STYLE_KUNGFU)
					{
						if(playerVariables[playerid][pCash] >= 10000)
						{
							new business = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

							GivePlayerCash(playerid, -10000);

							playerVariables[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
							Update(playerid, pFightStylex);

							businessVariables[business][bVault] += 10000;

							S(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
							SetPlayerFightingStyle(playerid, playerVariables[playerid][pFightStyle]);
							saveBusiness(business);
						}
						else S(playerid, COLOR_GREY, "You do not have enough money to purchase this.");
					}
					else S(playerid, COLOR_GREY, "You are already using this style.");
				}
    			case 2:
			 	{
					if(playerVariables[playerid][pFightStyle] != FIGHT_STYLE_KNEEHEAD)
					{
						if(playerVariables[playerid][pCash] >= 15000)
						{
							new business = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

							GivePlayerCash(playerid, -15000);

							playerVariables[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
							Update(playerid, pFightStylex);

							businessVariables[business][bVault] += 15000;

							S(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
							SetPlayerFightingStyle(playerid, playerVariables[playerid][pFightStyle]);
							saveBusiness(business);
						}
						else S(playerid, COLOR_GREY, "You do not have enough money to purchase this.");
					}
					else S(playerid, COLOR_GREY, "You are already using this style.");
				}
    			case 3:
			 	{
					if(playerVariables[playerid][pFightStyle] != FIGHT_STYLE_GRABKICK)
					{
						if(playerVariables[playerid][pCash] >= 10000)
						{
							new business = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

							GivePlayerCash(playerid, -10000);

							playerVariables[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
							Update(playerid, pFightStylex);

							businessVariables[business][bVault] += 10000;

							S(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
							SetPlayerFightingStyle(playerid, playerVariables[playerid][pFightStyle]);
							saveBusiness(business);
						}
						else S(playerid, COLOR_GREY, "You do not have enough money to purchase this.");
					}
					else S(playerid, COLOR_GREY, "You are already using this style.");
				}
    			case 4:
			 	{
					if(playerVariables[playerid][pFightStyle] != FIGHT_STYLE_ELBOW)
					{
						if(playerVariables[playerid][pCash] >= 10000)
						{
							new business = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

							GivePlayerCash(playerid, -10000);

							playerVariables[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
							Update(playerid, pFightStylex);

							businessVariables[business][bVault] += 10000;

							S(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
							SetPlayerFightingStyle(playerid, playerVariables[playerid][pFightStyle]);
							saveBusiness(business);
						}
						else S(playerid, COLOR_GREY, "You do not have enough money to purchase this.");
					}
					else S(playerid, COLOR_GREY, "You are already using this style.");
				}
    			case 5:
			 	{
					if(playerVariables[playerid][pFightStyle] != FIGHT_STYLE_NORMAL)
					{
						if(playerVariables[playerid][pCash] >= 5000)
						{
							new business = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

							GivePlayerCash(playerid, -5000);

							playerVariables[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
							Update(playerid, pFightStylex);

							businessVariables[business][bVault] += 5000;

							S(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
							SetPlayerFightingStyle(playerid, playerVariables[playerid][pFightStyle]);
							saveBusiness(business);
						}
						else S(playerid, COLOR_GREY, "You do not have enough money to purchase this.");
					}
					else S(playerid, COLOR_GREY, "You are already using this style.");
				}
			}
		}
	}
	if(dialogid == DIALOG_BUYPREMIUM)
	{
		if(response)
		{
		    new string[256];
			playerVariables[playerid][pPremiumPoints] -= 30;
			Update(playerid, pPremiumPointsx);
			
			playerVariables[playerid][pDonate] = 1;
			Update(playerid, pDonatex);
			
			format(string, sizeof(string), "/shop: %s bought premium account.", playerVariables[playerid][pUsername]);
			submitToAdmins(string, COLOR_ADMCHAT);
			
			mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'premium', '%d')", string, playerVariables[playerid][pID]);
			mysql_query(handle, string);
			
			if(playerVariables[playerid][pLimba] == 1)
			{
 				S(playerid, COLOR_BLUE, "Felicitari! Acum ai cont premium!");
			}
   			if(playerVariables[playerid][pLimba] == 2)
			{
 				S(playerid, COLOR_BLUE, "Congratulations! Now you premium account!");
			}
		}
	}
 	if(dialogid == DIALOG_EMAILS)
	{
	    if(response)
	    {
	        new query[256], read, message[256];
			format(query, sizeof(query), "SELECT * FROM `emails` WHERE `ID` = '%d'", EmailId[playerid][listitem]);
			new Cache: emailresult = mysql_query(handle, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
			    cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
				read = cache_get_field_content_int(i, "EmailRead");


				if(read > 0)
		    	{
		    	    mysql_format(handle, query, sizeof(query), "UPDATE `emails` SET `EmailRead`='0' WHERE `ID`= '%d'", EmailId[playerid][listitem]);
					mysql_tquery(handle, query, "","");
				}
			}
			cache_delete(emailresult);
			playerVariables[playerid][pNextNotification] = 0;
			ShowPlayerDialog(playerid, DIALOG_EMAILS2, DIALOG_STYLE_MSGBOX, "Read email", message, "Back","Exit");
		}
		return 1;
	}
	if(dialogid == DIALOG_DSINFO)
	{
	    if(response)
		{
		    SelectTextDraw(playerid, 0xFF0000FF);
		}
		else
		{
		    SelectTextDraw(playerid, 0xFF0000FF);
		}
	}
 	if(dialogid == DIALOG_EMAILS2)
	{
	    if(response)
	    {
	     	new message[300], string[2000], read, message2[40], finalmessage[40], query[500], emailid, idd=0;

		    format(query, sizeof(query), "SELECT * FROM `emails` WHERE `playerid` = '%d' ORDER BY `ID` DESC LIMIT 10", playerVariables[playerid][pID]);
			new Cache: emailresult = mysql_query(handle, query);
			if(cache_get_row_count() > 0)
			{
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
			    	cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
			    	read                    = cache_get_field_content_int(i, "EmailRead");
			    	emailid                 = cache_get_field_content_int(i, "ID");
			    	EmailId[playerid][idd] = emailid;
			    	idd++;
			    	if(strlen(message) > 28)
			    	{
			    		strmid(message2, message, 0, 29, sizeof(message2));
	      				format(finalmessage,sizeof(finalmessage), "%s...",message2);
					}
			   	 	if(read > 0)
			    	{
			    		format(string, sizeof(string), "%s[NECITIT] %s\n", string, finalmessage);
					}
					else
					{
				    	format(string, sizeof(string), "%s%s\n", string, finalmessage);
					}
				}
			}
			else return S(playerid, COLOR_WHITE, "You don't have a email!");
			cache_delete(emailresult);
	        ShowPlayerDialog(playerid, DIALOG_EMAILS, DIALOG_STYLE_LIST, "Emails",string,"Read","Exit");
		}
	}
	if(dialogid == DIALOG_IPHONE)
	{
 		if(response)
		{
			if(IsNumeric(inputtext))
			{
				if(strlen(inputtext) == 4)
				{
					new numb = strval(inputtext);

					if(numb >= 1000)
					{

						new query[256];
						format(query, 256, "SELECT * FROM `players` WHERE `PhoneNumber` = '%d' ORDER BY `ID` ASC", numb);
						new Cache: res = mysql_query(handle, query);
						if(cache_get_row_count() != 0)
						{
							if(playerVariables[playerid][pLimba] == 1)
							{
								S(playerid, -1, "Acest numar exista deja. Alege alt numar de telefon!");
							}
							if(playerVariables[playerid][pLimba] == 2)
							{
								S(playerid, -1, "This number already exists. Choose another phone number!");
							}

							ShowPlayerDialog(playerid, DIALOG_IPHONE, DIALOG_STYLE_INPUT, "Server: iPhone", "Once you've purchased an iPhone, you have to choose a number.\n\nRequirements:\n- the number must be made of 4 digits\n- the number must be unique\n\nType it in the box.", "Done", "");
							cache_delete(res);
						}
						else
						{
							cache_delete(res);

							playerVariables[playerid][pPhoneNumber] = numb;
							Update(playerid, pPhoneNumberx);

							format(szMessage, sizeof(szMessage), "Shop: You bought iPhone for 20 premium points. Now, your number is %d.", numb);
							S(playerid, COLOR_BLUE, szMessage);


							new string[256];

							format(string, sizeof(string), "/shop: %s bought an iPhone for 20 premium points. Number: %d", playerVariables[playerid][pUsername], playerVariables[playerid][pPhoneNumber]);
							submitToAdmins(string, COLOR_CIUDAT);

							mysql_format(handle, szMessage, sizeof(szMessage), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'iphone', '%d')", string, playerVariables[playerid][pID]);
							mysql_query(handle, szMessage);


							playerVariables[playerid][pPremiumPoints] -= 20;
							Update(playerid, pPremiumPointsx);

							playerVariables[playerid][pPhone] = 2;
							Update(playerid, pPhonex);
						}
					}
				}
				else
				{
				    if(playerVariables[playerid][pLimba] == 1)
				    {
						S(playerid, -1, "Numarul trebuie sa contina 4 cifre.");
					}
     				if(playerVariables[playerid][pLimba] == 2)
				    {
						S(playerid, -1, "The phone number must contain 4 numbers.");
					}
				}
			}
		}
	}
	if(dialogid == DIALOG_AGE)
	{
    	if(response)
    	{
  		 	new age = strval(inputtext);
  		 	new string[256];
  		 	if(age > 6 && age < 101)
  		 	{
				playerVariables[playerid][pAge] = age;
				Update(playerid, pAgex);

				format(string, sizeof(string), "Varsta setata: %d ani.\n\nIntrodu adresa de email.\nEmailul te poate ajuta sa iti recuperezi parola, in caz ca o uiti.\n\nEmail:\n(ex: my_email@yahoo.com)", age);
				ShowPlayerDialog(playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "Email", string, "Ok", "");
			}
			else return ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Varsta", "Scrie varsta caracterului tau:", "Ok", "");
		}
		else
		{
		    Kick(playerid);
		    return 1;
		}
	}

	if(dialogid == DIALOG_EMAIL)
	{
		if(response)
    	{
    		new string[256];
       		if(strlen(inputtext) < 4 || strlen(inputtext) > 151)
		   	{
		   		SendClientMessage(playerid, COLOR_ERROR, "The name of the email can't pass 150 letters and can't be shorter than 5 letters!");
			  	ShowPlayerDialog(playerid,702,DIALOG_STYLE_INPUT,"Email","Please enter below you email adress:","Next","");
			  	return 1;
			}
			else
       		{
				strmid(playerVariables[playerid][pEmail], inputtext, 0, strlen(inputtext), 999);
				Update(playerid, pEmailx);
				format(string, sizeof(string), "OK, so you're email is %s.", inputtext);
				ShowPlayerDialog(playerid, DIALOG_REGISTER_FINISH, DIALOG_STYLE_MSGBOX,"Email", string, "Next", "");
			}
		}
		else
		{
			Kick(playerid);
		}
	}
	if(dialogid == DIALOG_REGISTER_FINISH)
	{
		if(response)
		{
			TutorialTime[playerid] = 1;
			S(playerid,-1,"Limba setata: {FFFF00}romana.");
			S(playerid,-1,"[EN] To set the language to english, use /en.");
			playerVariables[playerid][pLimba] = 1;
  			Update(playerid, pLimbax);
		}
		else
		{
			TutorialTime[playerid] = 1;
			S(playerid,-1,"Set Language : {FFFF00}english.");
			S(playerid,-1,"[RO] Pentru a seta limba romana, utilizarea /ro.");
			playerVariables[playerid][pLimba] = 2;
  			Update(playerid, pLimbax);
		}
	}
	if(dialogid == DIALOG_HELP2)
	{
		if(response)
		{
			if(playerVariables[playerid][pLimba] == 1)
			{
		    	ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "SERVER: Comenzi", "Comenzile locului de munca\nAnimatii\nComenzi generale\nGroup\nBusiness commands", "Select", "Exit");
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
		    	ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "SERVER: Commands", "Job commands\nAnimations\nGeneral commands\nGroup\nBusiness commands", "Select", "Exit");
			}
		}
	}
	if(dialogid == DIALOG_GMX)
	{
		if(response)
		{
	        foreach(Player, x)
			{
				S(x, COLOR_YELLOW, "---- SERVER RESTART ----");
			}
			iGMXTick = 31;
			iGMXTimer = SetTimer("restartTimer", 1000, true);
	    }
	}
	if(dialogid == DIALOG_HELP)
	{
		if(response)
		{
			switch(listitem)
			{
   				case 0: switch(jobVariables[playerVariables[playerid][pJob]][jJobType])
				{
					case 1:
					{
					    if(playerVariables[playerid][pLimba] == 1)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzile locului de munca:", "/getmats - colectezi materiale\n/sellmats - vinzi materiale unui player\n/sellgun - vinzi o arma unui player\n/skills - skillurile tale\n/quitjob - comanda pentru a renunta la job","Inapoi","Inchide");
					    }
					    if(playerVariables[playerid][pLimba] == 2)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Job commands:", "/getmats - collect materials\n/sellmats - sell a player materials\n/sellgun - sell a gun to a player\n/skills - your skills\n/quitjob - quit a job","Return","Exit");
					    }
					}
					case 2:
					{
					    if(playerVariables[playerid][pLimba] == 1)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzile locului de munca:", "/find <id> - localizezi pe cineva\n/killcp - stergi checkpointul de pe mapa\n/quitjob - comanda pentru a renunta la job","Inapoi","Inchide");
					    }
					    if(playerVariables[playerid][pLimba] == 2)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Job commands:", "/find <id> - locate someone\n/killcp - remove checkpoint on the map\n/quitjob - quit a job","Return","Exit");
					    }
					}
     				case 3:
					{
					    if(playerVariables[playerid][pLimba] == 1)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzile locului de munca:", "/repair - repari masina unui player\n/refill - alimentezi masina unui player\n/tow - tractezi o masina\n/skills - skillurile tale\n/quitjob - comanda pentru a renunta la job","Inapoi","Inchide");
					    }
					    if(playerVariables[playerid][pLimba] == 2)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Job commands:", "/repair - fix a car\n/refill - refill a car\n/tow - tow a player's car\n/skills - your skills\n/quitjob - quit a job","Return","Exit");
					    }
					}
					case 4:
					{
					    if(playerVariables[playerid][pLimba] == 1)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzile locului de munca:", "/getdrugs - cumperi droguri\n/selldrugs - vinzi droguri unui player\n/quitjob - comanda pentru a renunta la job","Inapoi","Inchide");
					    }
					    if(playerVariables[playerid][pLimba] == 2)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Job commands:", "/getdrugs - buy drugs\n/selldrugs - sell drugs to a player\n/quitjob - quit a job","Return","Exit");
					    }
					}
					case 5:
					{
					    if(playerVariables[playerid][pLimba] == 1)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzile locului de munca:", "/pizza - livrezi pizza\n/skills - skillurile tale\n/quitjob - comanda pentru a renunta la job\n\nInfo: Tasteaza /pizza cand te aflii pe un scuter pentru a lua o comanda.","Inapoi","Inchide");
					    }
					    if(playerVariables[playerid][pLimba] == 2)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Job commands:", "/pizza - you deliver pizza\n/skills - your skills\n/quitjob - quit a job\n\nInfo: Type /pizza while on a scooter to do a delivery of pizza.","Return","Exit");
					    }
					}
					case 6:
					{
					    if(playerVariables[playerid][pLimba] == 1)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzile locului de munca:", "/fish - incepi sa pescuiesti\n/skills - skillurile tale\n/quitjob - comanda pentru a renunta la job","Inapoi","Inchide");
					    }
					    if(playerVariables[playerid][pLimba] == 2)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Job commands:", "/fish - you begin to fish\n/skills - your skills\n/quitjob - quit a job","Return","Exit");
					    }
					}
					case 7:
					{
					    if(playerVariables[playerid][pLimba] == 1)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzile locului de munca:", "/killcp - comanda pentru a renunta la traseu\n/skills - skillurile tale\n/quitjob - comanda pentru a renunta la job\n\nInfo: Urca intr-un camion si mergi la checkpoint pentru a alege o destinatie.","Inapoi","Inchide");
					    }
					    if(playerVariables[playerid][pLimba] == 2)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Job commands:", "/killcp - use to give up the course\n/skills - your skills\n/quitjob - quit a job\n\nInfo: Enter a truck and go to the checkpoint to choose a destination.","Return","Exit");
					    }
					}
					default:
					{
     					if(playerVariables[playerid][pLimba] == 1)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzile locului de munca:", "Nu aveti un loc de munca.\n\nPentru a alege un loc de munca, tasteaza /jobs si mergi la punctul rosu.\nAjuns acolo, foloseste /getjob pentru a te angaja.","Inapoi","Inchide");
					    }
					    if(playerVariables[playerid][pLimba] == 2)
					    {
					        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Job commands:", "You don't have a job.\n\nTo choose a job, use /jobs and going to red point.\nGot there, use /getjob to hire.","Return","Exit");
					    }
		   			}
				}
		   		case 1:
		   		{
		   		    if(playerVariables[playerid][pLimba] == 1)
				    {
				        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Animatii:", "/stopanim, /pee, /wank, /dance [1-4], /handsup, /bomb, /drunk, /taichi, /crack, /slapass, /robman, /cry, /box, /bar\n/crabs, /salute, /rap, /gesture, /lay, /wave, /fallover, /pedmove, /getjiggy, /smoke, /dj, /crossarms, /sit, /siteat","Inapoi","Inchide");
				    }
				    if(playerVariables[playerid][pLimba] == 2)
				    {
				        ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Animations:", "/stopanim, /pee, /wank, /dance [1-4], /handsup, /bomb, /drunk, /taichi, /crack, /slapass, /robman, /cry, /box, /bar\n/crabs, /salute, /rap, /gesture, /lay, /wave, /fallover, /pedmove, /getjiggy, /smoke, /dj, /crossarms, /sit, /siteat","Return","Exit");
				    }
		   		}
       			case 2:
		   		{
		   		    if(playerVariables[playerid][pLimba] == 1)
				    {
					    new stringc[3400];
						format(stringc,sizeof(stringc),"/id, /stats, /skills, /buylevel, /time, /accept, /cancel, /pay, /eject, /killcp, /ad, /admins, /helpers, /licenses, /carradio, /eject, /service\n");
						strcat ( stringc, "/colors, /email, /shop, /factions, /jobs, /gps, /fill, /quitgroup, /turfs, /top, /getjob, /quitjob, /premium, /findhouse, /findbiz, /engine\n");
						strcat ( stringc, "/rob, /exam, /reporters, /changepass, /report, /n, /sms, /call, /fontsize, /pagesize, /timestamp, /ro, /en, /usedrugs, /buycar, /wops\n");
						strcat ( stringc, "/putbelt,/puthat, /removehat, /putglasses, /removeglasses, /santahat, /halloweenhat, /dmp, /dm, /getgift\n");
						ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Comenzi generale:",stringc, "Inapoi","Inchide");
					}
				    if(playerVariables[playerid][pLimba] == 2)
				    {
				        new stringc[3400];
						format(stringc,sizeof(stringc),"/id, /stats, /skills, /buylevel, /time, /accept, /cancel, /pay, /eject, /killcp, /ad, /admins, /helpers, /licenses, /carradio, /eject, /service\n");
						strcat ( stringc, "/colors, /email, /shop, /factions, /jobs, /gps, /fill, /quitgroup, /turfs, /top, /getjob, /quitjob, /premium, /findhouse, /findbiz, /engine\n");
						strcat ( stringc, "/rob, /exam, /reporters, /changepass, /report, /n, /sms, /call, /fontsize, /pagesize, /timestamp, /ro, /en, /usedrugs, /buycar, /wops\n");
						strcat ( stringc, "/putbelt,/puthat, /removehat, /putglasses, /removeglasses, /santahat, /halloweenhat, /dmp, /dm, /getgift\n");
						ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "General commands:",stringc, "Inapoi","Inchide");
				    }
		   		}
		   		case 3:
				{
					if(playerVariables[playerid][pGroup] == 1)
	    			{
					    ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "/r, /d, /heal, /wanted, /su, /mdc, /so, /duty, /arrest, /ta, /getgun, /ticket, /frisk, /confiscate\n/cuff, /uncuff, /clear, /punish, /gdeposit, /showmotd, /leaderhelp (rank 7+)", "Return","Exit");
					}
					if(playerVariables[playerid][pGroup] == 2)
	    			{
					    ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "/r, /d, /heal, /wanted, /su, /mdc, /so, /duty, /arrest, /ta, /getgun, /ticket, /frisk, /confiscate\n/cuff, /uncuff, /clear, /punish, /gdeposit, /showmotd, /leaderhelp (rank 7+)", "Return","Exit");
					}
					if(playerVariables[playerid][pGroup] == 3)
	    			{
					    ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "/r, /d, /heal, /medic, /gdeposit, /showmotd, /leaderhelp (rank 7+)", "Return","Exit");
					}
     				if(playerVariables[playerid][pGroup] == 4)
	    			{
					    ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "/f, /heal, /undercover, /order, /find, /cancelhit, /gethit, /mycontract, /contracts, /gdeposit, /showmotd, /leaderhelp (rank 7+)", "Return","Exit");
					}
					if(playerVariables[playerid][pGroup] == 5)
	    			{
					    ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "/f, /heal, /givegun, /givelicence, /startlesson, /gdeposit, /showmotd, /leaderhelp (rank 7+)", "Return","Exit");
					}
					if(playerVariables[playerid][pGroup] == 6)
	    			{
					    ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "/f, /heal, /news, /live, /endlive, /startq, /stopq, /aq, /gdeposit, /showmotd, /leaderhelp (rank 7+)", "Return","Exit");
					}
					if(playerVariables[playerid][pGroup] == 7)
	    			{
					   	ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "/f, /heal, /fare, /gdeposit, /showmotd, /leaderhelp (rank 7+)", "Return","Exit");
					}
					if(playerVariables[playerid][pGroup] == 8)
	    			{
					    ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "/f, /heal, /order, /tie, /untie, /attack, /getdrugs, /gdeposit, /showmotd, /leaderhelp (rank 7+)", "Return","Exit");
					}
					if(playerVariables[playerid][pGroup] == 9)
	    			{
					    ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "/f, /heal, /order, /tie, /untie, /attack, /getdrugs, /gdeposit, /showmotd, /leaderhelp (rank 7+)", "Return","Exit");
					}
     				if(playerVariables[playerid][pGroup] == 0)
	    			{
					    ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "Group commands:", "You're not in a group.", "Return","Exit");
		   			}
				}
				case 4:
				{
      				new stringc[3400];
					format(stringc,sizeof(stringc),"/buybusiness - cumperi un business\n");
					strcat ( stringc, "/sellbusinesstostate - vinzi businessul la stat\n");
					strcat ( stringc, "/sellbusiness - scoti businessul la vanzare\n");
					strcat ( stringc, "/lockbusiness - deschizi/inchizi un business\n");
					strcat ( stringc, "/businessname - setezi un nume la business\n");
					strcat ( stringc, "/bizfee - setezi pretul de intrare in business\n");
					strcat ( stringc, "/bwithdraw - scoti banii din seiful businessului\n");
					strcat ( stringc, "/bbalance - vezi cati bani ai in seiful businessului\n");
					strcat ( stringc, "/business - seteaza un checkpoint la propriul business\n");
					ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX,"Business commands:",stringc,"Return","Exit");
				}
			}
		}
	}
	if(dialogid == 1000)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
				    new idcar = GetPlayerVehicleID(playerid);
				    new col1 = random(255);
					new col2 = random(255);
     				new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);

					trucker[playerid] = AddStaticVehicleEx(435, x,y+30,z, 360,col1,col2,-1,0);
				 	SetTimerEx("AttachTrailTruck", 1500, false, "ii", trucker[playerid], idcar);
					LinkVehicleToInterior ( trucker [ playerid ] , 6 ) ;


     				SetPlayerCheckpoint(playerid, 340.8437,849.1292,20.2363, 5);
					playerVariables[playerid][pCheckpointJob] = 100;
					playerVariables[playerid][pCheckpoint] = 0;

					if(playerVariables[playerid][pLimba] == 1)
					{
						S(playerid,COLOR_BLUE,"Mergi la checkpointul de pe minimap pentru a livra marfa.");
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						S(playerid,COLOR_BLUE,"Follow the checkpoint on your minimap.");
					}
				}
    			case 1:
				{
				    new idcar = GetPlayerVehicleID(playerid);
				    new col1 = random(255);
					new col2 = random(255);
     				new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);

					trucker[playerid] = AddStaticVehicleEx(435, x,y+30,z, 360,col1,col2,-1,0);
				 	SetTimerEx("AttachTrailTruck", 1500, false, "ii", trucker[playerid], idcar);
					LinkVehicleToInterior ( trucker [ playerid ] , 6 ) ;


     				SetPlayerCheckpoint(playerid, 794.2119,1899.7739,5.0583, 5);
					playerVariables[playerid][pCheckpointJob] = 100;
					playerVariables[playerid][pCheckpoint] = 0;

					if(playerVariables[playerid][pLimba] == 1)
					{
						S(playerid,COLOR_BLUE,"Mergi la checkpointul de pe minimap pentru a livra marfa.");
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						S(playerid,COLOR_BLUE,"Follow the checkpoint on your minimap.");
					}
				}
			}
		}
	}
 	if(dialogid == 1001)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
				    new idcar = GetPlayerVehicleID(playerid);
				    new col1 = random(255);
					new col2 = random(255);
     				new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);

					trucker[playerid] = AddStaticVehicleEx(435, x,y+30,z, 360,col1,col2,-1,0);
				 	SetTimerEx("AttachTrailTruck", 1500, false, "ii", trucker[playerid], idcar);
					LinkVehicleToInterior ( trucker [ playerid ] , 6 ) ;


     				SetPlayerCheckpoint(playerid, -103.9257,-1189.5878,2.2677, 5);
					playerVariables[playerid][pCheckpointJob] = 101;
					playerVariables[playerid][pCheckpoint] = 0;

					if(playerVariables[playerid][pLimba] == 1)
					{
						S(playerid,COLOR_BLUE,"Mergi la checkpointul de pe minimap pentru a livra marfa.");
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						S(playerid,COLOR_BLUE,"Follow the checkpoint on your minimap.");
					}
				}
			}
		}
	}
	if(dialogid == DIALOG_GPS)
	{
	  	if(response)
	    {
			if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid, 1219.2067,-1812.0403,16.5938, 3.0);
				playerVariables[playerid][pCheckpoint] = 1;
				S(playerid, -1, "A checkpoint has been set on the Driving School.");
			}
			if(listitem == 1)
			{
                
			}
			if(listitem == 2)
			{
				new szMessage2[500];
				for(new xf = 0; xf < MAX_GROUPS; xf++)
				{
					if(strlen(groupVariables[xf][gGroupName]) >= 1 && strcmp(groupVariables[xf][gGroupName], "None", true))
					{
						format(szMessage2, sizeof(szMessage2), "%s\n%s", szMessage2, groupVariables[xf][gGroupName]);
					}
				}
				ShowPlayerDialog(playerid, DIALOG_HQS, DIALOG_STYLE_LIST, "HQ Locations:", szMessage2, "Find", "Back");
			    return 1;
			}
			if(listitem == 3)
			{
				SetPlayerCheckpoint(playerid, 1111.3481,-1796.9823,16.5938, 3.0);
				playerVariables[playerid][pCheckpoint] = 1;
				S(playerid, -1, "A checkpoint has been set on the Dealership.");
			}
			if(listitem == 4)
			{
				SetPlayerCheckpoint(playerid, 2780.6975,-1812.4325,11.8438, 3.0);
				playerVariables[playerid][pCheckpoint] = 1;
				S(playerid, -1, "A checkpoint has been set on the Event Place.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_CONFIRMARE)
	{
		if(response)
	    {
	        new x = getPlayerBusinessID(playerid), query[256], string[256], labelString[500];
	        businessVariables[x][bPrice] = 10000000;
			businessVariables[x][bLocked] = 0;
			businessVariables[x][bFee] = 1000;
			businessVariables[x][bVault] = 0;
			format(businessVariables[x][bName], 64, "Business de vanzare");
			strcpy(businessVariables[x][bOwner], "AdmBot", MAX_PLAYER_NAME);
	  		mysql_format(handle, query, sizeof(query), "UPDATE `businesses` SET `businessOwner`= 'AdmBot' WHERE `businessID`= '%d'", x);
			mysql_tquery(handle, query, "","");
			saveBusiness(x);
			
	   		if(!strcmp(businessVariables[x][bOwner], "AdmBot", true) && strlen(businessVariables[x][bOwner]) >= 1)
			{
				if(businessVariables[x][bLocked] == 1)
				{
				    if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee]);
					}
				}
				else
				{
					if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bFee]);
					}
				}
			}
			else
			{
	  			if(businessVariables[x][bLocked] == 1)
				{
				    if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
					}
				}
				else
				{
					if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
					}
				}
			}
			UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], COLOR_YELLOW, labelString);
			S(playerid, -1, "Business sold! You have been given back $3.000.000 for the business.");
			GivePlayerCash(playerid, 3000000);
			
			format(string, sizeof(string), "%s sold [biz: %d] to state for $3.000.000.", playerVariables[playerid][pUsername], x);
			submitToAdmins(string, COLOR_YELLOW);
			
			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'sellbusiness', '%d')", string, playerVariables[playerid][pID]);
			mysql_query(handle, szLargeString);
	    }
	    return 1;
  	}
	if(dialogid == DIALOG_HQS)
	{
		if(!response)
		{
			ShowPlayerDialog(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "Locatii importante:", "Driving School (DMV)\nLos Santos\nFaction HQs\nDealership\nEvent Place", "Alege", "Inchide");
		}
		else
		{
			new item = listitem+1;

			if(item == 1)
			{
				SetPlayerCheckpoint(playerid, 1554.7539,-1675.6672,16.1953, 3.0);
				
				new Float: x, Float: y, Float: z;
				GetPlayerPos(playerid,x,y,z);
				new Float: distanta = GetPlayerDistanceFromPoint(playerid, 1554.7539,-1675.6672,16.1953);
				
				format(szMessage, sizeof(szMessage), "A checkpoint has been set on Los Santos Police Department HQ. Distance: %.0fm.", distanta);
				S(playerid, -1, szMessage);
			}
			else
			{
				SetPlayerCheckpoint(playerid, groupVariables[item][gGroupExteriorPos][0], groupVariables[item][gGroupExteriorPos][1], groupVariables[item][gGroupExteriorPos][2], 3.0);
                new Float: x, Float: y, Float: z;
				GetPlayerPos(playerid,x,y,z);
				new Float: distanta = GetPlayerDistanceFromPoint(playerid, groupVariables[item][gGroupExteriorPos][0], groupVariables[item][gGroupExteriorPos][1], groupVariables[item][gGroupExteriorPos][2]);

				format(szMessage, sizeof(szMessage), "A checkpoint has been set on %s HQ. Distance: %.0fm.", groupVariables[item][gGroupName], distanta);
				S(playerid, -1, szMessage);
			}
			playerVariables[playerid][pCheckpoint] = 1;
		}
	}
	if(dialogid == DIALOG_MP3)
	{
 		if(response)
		{
			new string69[256];
   			new vehicleid = GetPlayerVehicleID(playerid);
  	
			switch(listitem)
			{
   				case 0:
				{
					if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
 						if(playerVariables[playerid][pMP3] == 1)
 	    				{
							StopAudioStreamForPlayer(playerid);
							RemovePlayerAttachedObject(playerid, 4);

							playerVariables[playerid][pMP3] = 0;

							format(string69, sizeof(string69), "* %s has turned OFF the MP3 radio.", GetName(playerid));
							nearByMessage(playerid, COLOR_PURPLE, string69);
						}
					}
				}
				case 1:
				{
					if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
						PlayAudioStreamForPlayer(playerid,"http://stream.profm.ro:8012/profm.mp3");

						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Pro FM Romania.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
				case 2:
				{
					if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
						PlayAudioStreamForPlayer(playerid,"http://radiotaraf.no-ip.biz:7100");
						
						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Radio Taraf Romania.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
				case 3:
				{
				    if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
						PlayAudioStreamForPlayer(playerid,"http://rbandit.dyndns.tv:8000");

						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Radio Bandit.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
				case 4:
				{
					if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
						PlayAudioStreamForPlayer(playerid,"http://radioromanian.net/popular.pls");
					
						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Radio Romania Popular.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
				case 5:
				{
					if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
						PlayAudioStreamForPlayer(playerid,"http://stream.radiozu.ro:8020/");

						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Radio ZU.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
				case 6:
				{
				    if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
			 			PlayAudioStreamForPlayer(playerid,"http://yp.shoutcast.com/sbin/tunein-station.pls?id=151778");

						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Radio Kiss FM.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
    			case 7:
				{
				    if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
						PlayAudioStreamForPlayer(playerid,"http://dance.radiogangsta.ro:8800");

						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Radio Gangsta Dance.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
				case 8:
				{
				    if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
						PlayAudioStreamForPlayer(playerid,"http://www.radiotequila.ro/hiphop.m3u");

						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Radio Tequilla Romania Hip Hop.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
				case 9:
				{
				    if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
						PlayAudioStreamForPlayer(playerid,"http://nextgen.go.ro:8012");

						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Radio Greu de Difuzat Hip Hop.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
				case 10:
				{
				    if(!IsPlayerInVehicle(playerid, vehicleid))
 					{
			 			PlayAudioStreamForPlayer(playerid,"http://dubstep.fm/128.pls");

						format(string69, sizeof(string69), "* %s has changed the MP3 radio station to Dubstep FM.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string69);
						
						playerVariables[playerid][pMP3] = 1;
					}
				}
			}
		}
	}
	if(dialogid == DIALOG_CARRADIO)
	{
		if(response)
		{
			new VID;
			VID = GetPlayerVehicleID(playerid);
			new cpid = GetPlayerVehicleID(playerid);
			new string69[256];
			new sendername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, sendername,MAX_PLAYER_NAME);
			switch(listitem)
			{
			   case 0:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{
							StopAudioStreamForPlayer(i);
							Radio[VID] = 0;
						}
					}
					format(string69, sizeof(string69), "* %s has turned OFF the radio.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
				case 1:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							PlayAudioStreamForPlayer(playerid,"http://stream.profm.ro:8012/profm.mp3");
							Radio[VID] = 1;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Pro FM Romania.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
				case 2:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							 PlayAudioStreamForPlayer(i,"http://radiotaraf.no-ip.biz:7100");
							 Radio[VID] = 2;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Radio Taraf Romania.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
				case 3:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							 PlayAudioStreamForPlayer(i,"http://rbandit.dyndns.tv:8000");
							 Radio[VID] = 3;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Radio Bandit.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
				case 4:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							 PlayAudioStreamForPlayer(i,"http://radioromanian.net/popular.pls");
							 Radio[VID] = 4;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Radio Romania Popular.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
				case 5:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							 PlayAudioStreamForPlayer(i,"http://stream.radiozu.ro:8020/");
							 Radio[VID] = 5;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Radio ZU.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
				case 6:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							 PlayAudioStreamForPlayer(i,"http://yp.shoutcast.com/sbin/tunein-station.pls?id=151778");
							 Radio[VID] = 6;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Radio Kiss FM.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
    			case 7:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							 PlayAudioStreamForPlayer(i,"http://dance.radiogangsta.ro:8800");
							 Radio[VID] = 7;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Radio Gangsta Dance.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
				case 8:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							 PlayAudioStreamForPlayer(i,"http://www.radiotequila.ro/hiphop.m3u");
							 Radio[VID] = 8;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Radio Tequilla Romania Hip Hop.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
				case 9:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							 PlayAudioStreamForPlayer(i,"http://nextgen.go.ro:8012");
							 Radio[VID] = 9;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Radio Greu de Difuzat Hip Hop.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
				case 10:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == cpid)
						{

							 PlayAudioStreamForPlayer(i,"http://dubstep.fm/128.pls");
							 Radio[VID] = 10;
						}
					}
					format(string69, sizeof(string69), "* %s has changed the radio station to Dubstep FM.", sendername);
					nearByMessage(playerid, COLOR_PURPLE, string69);
				}
			}
		}
	}
	if(dialogid == DIALOG_ACOLOR)
	{
	    if(response)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
		        	playerVariables[playerid][pColor] = 0;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"Server: Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"Server: Nick color changed! Hope you like the new color!");
				 	}
	 			}
	 			case 1:
     			{
		        	playerVariables[playerid][pColor] = 100;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{F00000}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{F00000}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
	 			}
     			case 2:
     			{
		        	playerVariables[playerid][pColor] = 101;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{AA0000}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{AA0000}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
	 			}
     			case 3:
     			{
		        	playerVariables[playerid][pColor] = 102;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{FF3F3F}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{FF3F3F}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
	 			}
	 		}
	 	}
    }
	if(dialogid == DIALOG_JOB)
	{
		if(response)
		{
			new Float: playerPos[3];
			GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);
			new j = listitem+1;

			new Float: distanta = GetPlayerDistanceFromPoint(playerid, jobVariables[j][jJobPosition][0], jobVariables[j][jJobPosition][1], jobVariables[j][jJobPosition][2]);

			if(playerVariables[playerid][pLimba] == 1)
			{
				format(szMessage, sizeof(szMessage), "Mergi la checkpoint pentru a ajunge la job-ul %s. Distanta: %.0fm.", jobVariables[j][jJobName],distanta);
				S(playerid, COLOR_YELLOW, szMessage);
				SetPlayerCheckpoint(playerid, jobVariables[j][jJobPosition][0], jobVariables[j][jJobPosition][1], jobVariables[j][jJobPosition][2], 3.0);
				playerVariables[playerid][pCheckpoint] = 1;
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				format(szMessage, sizeof(szMessage), "Go to the checkpoint to reach job %s. Distance: %.0fm.", jobVariables[j][jJobName],distanta);
				S(playerid, COLOR_YELLOW, szMessage);
				SetPlayerCheckpoint(playerid, jobVariables[j][jJobPosition][0], jobVariables[j][jJobPosition][1], jobVariables[j][jJobPosition][2], 3.0);
				playerVariables[playerid][pCheckpoint] = 1;
			}
		}
	}
	if(dialogid == DIALOG_FACTIONS)
	{
		if(response)
		{
		    new j = listitem+1;

			new lead[MAX_PLAYER_NAME], members;
			format(lead, MAX_PLAYER_NAME,"None");

			new query[500];
			new stringy[256];
			mysql_format(handle, stringy, 256, "SELECT * FROM `players` WHERE  `Group` = '%d' AND `GroupRank` = '7'", j);
			new Cache: resultz = mysql_query (handle, stringy);

            if(cache_get_row_count() != 0)
            {
            	cache_get_field_content(0, "username", result), format(lead, MAX_PLAYER_NAME, result);
			}
			cache_delete(resultz);


			new stringy2[256];
			mysql_format(handle, stringy2, 256, "SELECT * FROM `players` WHERE  `Group` = '%d'", j);
			new Cache: resultx = mysql_query (handle, stringy2);
			format(query, sizeof(query),"SELECT * FROM players WHERE Group = %d", j);

			members = cache_get_row_count();
			cache_delete(resultx);

			new szDialogText[256];
			new on = 0;
		 	foreach(Player, t)
		 	{
		 		if(playerVariables[t][pGroup] == j)
				{
					on++;
				}
		 	}
		 	new id = GetPlayerID(lead);
		 	if(id != INVALID_PLAYER_ID)
		 	{
		 		format(szDialogText,256,"ID: %i\nFaction name: %s\nNecessary level: %d\nFaction leader: %s (online)\n\nTotal members: %d\nMaximum members: %d\nOnline members: %d", j, groupVariables[j][gGroupName], groupVariables[j][gLevel], lead, members, groupVariables[j][gSlots], on);
		 	}
		 	else
	 		{
	 	 		format(szDialogText,256,"ID: %i\nFaction name: %s\nNecessary level: %d\nFaction leader: %s (offline)\n\nTotal members: %d\nMaximum members: %d\nOnline members: %d", j, groupVariables[j][gGroupName], groupVariables[j][gLevel], lead, members, groupVariables[j][gSlots], on);
 			}
	 		ShowPlayerDialog(playerid, DIALOG_FACTIONS2, DIALOG_STYLE_MSGBOX,"Group Info", szDialogText,"Back", "Exit");
		}
	}
 	if(dialogid == DIALOG_FACTIONS2)
	{
 		if(response)
 		{
    		new string[1040], string1[1040], members;
		    for(new xf = 0; xf < MAX_GROUPS; xf++)
			{
				if(strlen(groupVariables[xf][gGroupName]) >= 1 && strcmp(groupVariables[xf][gGroupName], "None", true))
			    {
			    	new stringy2[256];
					mysql_format(handle, stringy2, 256, "SELECT * FROM `players` WHERE  `Group` = '%d'", xf);
					new Cache: resultx = mysql_query (handle, stringy2);
					members = cache_get_row_count();
					cache_delete(resultx);

					new app = groupVariables[xf][gAplication];


					if(app == 1)
					{
					    if(playerVariables[playerid][pLimba] == 1)
					    {
		        			format(string, sizeof(string),"{FFFFFF}[%d/%d]\t%s\t{36FF12}aplicatii deschise\n", members, groupVariables[xf][gSlots], groupVariables[xf][gGroupName]);
		        			strcat(string1, string, sizeof(string1));
		        		}
		        		if(playerVariables[playerid][pLimba] == 2)
					    {
					    	format(string, sizeof(string),"{FFFFFF}[%d/%d]\t%s\t{36FF12}applications open\n", members, groupVariables[xf][gSlots], groupVariables[xf][gGroupName]);
		        			strcat(string1, string, sizeof(string1));
					    }
		        	}
		        	else
		        	{
						if(playerVariables[playerid][pLimba] == 1)
					    {
		        			format(string, sizeof(string),"{FFFFFF}[%d/%d]\t%s\t{E60000}aplicatii inchise\n", members, groupVariables[xf][gSlots], groupVariables[xf][gGroupName]);
		        			strcat(string1, string, sizeof(string1));
		        		}
		        		if(playerVariables[playerid][pLimba] == 2)
					    {
					    	format(string, sizeof(string),"{FFFFFF}[%d/%d]\t%s\t{E60000}applications closed\n", members, groupVariables[xf][gSlots], groupVariables[xf][gGroupName]);
		        			strcat(string1, string, sizeof(string1));
					    }
		        	}
		        }
		    }
		    format(string, sizeof(string), "Faction members\tFaction name\tStatus applications\n%s", string1);
		    ShowPlayerDialog(playerid, DIALOG_FACTIONS, DIALOG_STYLE_TABLIST_HEADERS, "Factions:", string, "Select", "Exit");
		}
	}
	if(dialogid == DIALOG_CCP)
	{
		if(response)
		{
			DisablePlayerCheckpoint(playerid);
			pUseFind[playerid] = 0;
			playerVariables[playerid][pCheckpoint] = 0;
			playerVariables[playerid][pCheckpointJob] = 0;
			playerVariables[playerid][pAreMats] = 0;
			playerVariables[playerid][pAreDrugs] = 0;
			SS(playerid, COLOR_IN2, "Checkpoint anulat!","Checkpoint canceled!");
		}
	}
 	if(dialogid == DIALOG_STOPJOB)
	{
		if(response)
		{
			DisablePlayerCheckpoint(playerid);
			playerVariables[playerid][pCheckpoint] = 0;
			playerVariables[playerid][pCheckpointJob] = 0;
			new vehicleid = GetPlayerVehicleID(playerid);
			DestroyVehicle(trucker[playerid]);
			SetVehicleToRespawn(vehicleid);
		}
	}
	if(dialogid == DIALOG_CHANGEPASS)
	{
		if(response)
		{
			new string[128], query[128];
			if(strlen(inputtext) >= 4)
			{
			    if(playerVariables[playerid][pLimba] == 1)
			    {
					format(string, sizeof(string), "Parola schimbata! Noua ta parola este: %s", inputtext);
					S(playerid, COLOR_RED, string);
				}
    			if(playerVariables[playerid][pLimba] == 2)
			    {
					format(string, sizeof(string), "Password changed! Your new password is: %s", inputtext);
					S(playerid, COLOR_RED, string);
				}

				format(szMessage, 256, "%s[user: %d] changed his password.", GetName(playerid), playerVariables[playerid][pID]);
				submitToAdmins(szMessage,COLOR_ADMCHAT);

				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'changepass', '%d')", szMessage, playerVariables[playerid][pID]);
				mysql_query(handle, szLargeString);


				mysql_format(handle, query, sizeof(query), "UPDATE `players` SET `password` = MD5('%e') WHERE `players`.`ID` = '%d'", inputtext, playerVariables[playerid][pID]);
				mysql_tquery(handle, query, "", "");
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid,COLOR_GREY,"Parola trebuie sa contina cel putin 4 caractere.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid,COLOR_GREY,"Password needs to have 4 or more characters!");
				}
			}
		}
	}
	if(dialogid == DIALOG_TRANSFER)
	{
		if(response)
    	{
    	    if(IsPlayerConnected(TransferOffer[playerid]))
    	    {
				new giveplayer[30], sendername[30], string[256];

				GetPlayerName(TransferOffer[playerid], giveplayer,sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));


	   			playerVariables[playerid][pAccount] -= TransferMoney[playerid];
	   			Update(playerid, pAccountx);

				playerVariables[TransferOffer[playerid]][pAccount] += TransferMoney[playerid];
				Update(TransferOffer[playerid], pAccountx);

				format(string, sizeof(string), "{36A834}(-) You have transferred $%s into %s's account. Your account balance is now $%s.", NumberFormat(TransferMoney[playerid]), giveplayer, NumberFormat(playerVariables[playerid][pAccount]));
				S(playerid, COLOR_WHITE, string);

				format(string, sizeof(string), "{36A834}(+) %s has transferred $%s into your account. Your account balance is now $%s.", sendername, NumberFormat(TransferMoney[playerid]), NumberFormat(playerVariables[TransferOffer[playerid]][pAccount]));
				S(TransferOffer[playerid], COLOR_WHITE, string);

				if(TransferMoney[playerid] >= 1000000)
				{
					format(szMessage, sizeof(szMessage), "($) %s has transfered $%s to %s.", playerVariables[playerid][pUsername], NumberFormat(TransferMoney[playerid]), playerVariables[TransferOffer[playerid]][pUsername]);
					submitToAdmins(szMessage, COLOR_ADMCHAT);

					new string2[256];
					format(string2,256,"%s[userid: %d] /transfer-ed $%s to %s[userid: %d]", playerVariables[playerid][pUsername], playerVariables[playerid][pID], NumberFormat(TransferMoney[playerid]), playerVariables[TransferOffer[playerid]][pUsername], playerVariables[TransferOffer[playerid]][pID]);
					chatlogs(string2, COLOR_WHITE);

					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'transfer', '%d')", string2, playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);
					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'transfer', '%d')", string2, playerVariables[TransferOffer[playerid]][pID]);
					mysql_query(handle, szLargeString);
				}


				playerVariables[playerid][pDeelayTransfer] = 5;

				TransferOffer[playerid] = 999;
				TransferMoney[playerid] = 0;
			}
			else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
		}
		return 1;
	}
	if(dialogid == DIALOG_REPORT)
	{
	    if(response)
		{
		    switch(listitem)
		    {
		        case 0:
		  		{
       				if(playerVariables[playerid][pAdminLevel] > 0 || playerVariables[playerid][pHelperLevel] > 0) return S(playerid, -1, "{C9EAAA}Nu poti folosi aceasta optiune daca faci parte din staff.");

		            new string[256];
					format(string, 256, "%s [%d] is stuck.", GetName(playerid),playerid);
					submitToAdmins(string,COLOR_BOSS2);

					playerVariables[playerid][pStuck] = 1;

					if(playerVariables[playerid][pLimba] == 1)
					{
					    S(playerid, COLOR_YELLOW, "Report trimis. Un admin te va ajuta daca esti blocat/cazi prin mapa.");
					    playerVariables[playerid][pReportDeelay] = 120;
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_YELLOW, "Report sent. An admin will spectate you and help you if you're stuck.");
					    playerVariables[playerid][pReportDeelay] = 120;
					}
				}
				case 1:
				{
				    if(playerVariables[playerid][pLimba] == 1)
					{
						new string[1500];
						strcat(string, "Singura metoda de plata este paysafecard. Nu va fi adaugata alta metoda de plata in viitorul apropiat.\n");
						strcat(string, "Nu se pot face plati prin SMS, coduri de reincarcare, conturi steam, webmoney, paypal sau orice alta metoda de plata.\n");
						strcat(string, "Singurile lucruri pe care le poti cumpara cu puncte premium pot fi gasite pe user panel 'leet.ro/premium'.\n");
						strcat(string, "Daca ai o problema cu platile, te rugam sa deschizi un tichet pe user panel 'leet.ro/ticket'.\n");
						ShowPlayerDialog(playerid, DIALOG_DONATII, DIALOG_STYLE_MSGBOX, "Donatii", string, "Inchide", "");
					}
				}
				case 2:
				{
					if(playerVariables[playerid][pAdminLevel] > 0 || playerVariables[playerid][pHelperLevel] > 0) return S(playerid, -1, "{C9EAAA}Nu poti folosi aceasta optiune daca faci parte din staff.");

					if(playerVariables[playerid][pLimba] == 1)
				    {
			    		ShowPlayerDialog(playerid, DIALOG_REPORT2, DIALOG_STYLE_INPUT, "Alta problema", "Scrie mai jos problema pe care o ai.\nNu scrie 'am nevoie de un admin', scrie exact ce problema ai.", "Trimite","Inchide");
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
			    		ShowPlayerDialog(playerid, DIALOG_REPORT2, DIALOG_STYLE_INPUT, "Other issue", "Scrie mai jos problema pe care o ai.\nNu scrie 'am nevoie de un admin', scrie exact ce problema ai.", "Trimite","Inchide");
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_REPORT2)
	{
		if(response)
		{
		    if(strlen(inputtext) >= 5)
			{
			    new string[256];

			    if(playerVariables[playerid][pLimba] == 1)
			    {
	            	S(playerid, COLOR_YELLOW, "Report trimis!");
	            }
	            if(playerVariables[playerid][pLimba] == 2)
			    {
	            	S(playerid, COLOR_YELLOW, "Report submitted!");
	            }

				playerVariables[playerid][pReportDeelay] = 60;

				format(string, sizeof(string), "Report from %s [%d, level: %d]: %s", GetName(playerid), playerid, playerVariables[playerid][pLevel], inputtext);
				format(reporttext[playerid], sizeof(string), string);
				submitToAdmins(string, COLOR_BOSS2);

				ReportTime[playerid] = 1;
		  		timerreport[playerid] = SetTimerEx("Reportul", 120000, 0, "%d", playerid);
			}
			else
			{
			    if(playerVariables[playerid][pLimba] == 1)
			    {
			        S(playerid, COLOR_YELLOW, "Report anulat, motiv: text prea scurt.");
			    }
			    if(playerVariables[playerid][pLimba] == 2)
			    {
			        S(playerid, COLOR_YELLOW, "Report declined, reason: not enough characters used.");
			    }
			}
		}
	}

 	if(dialogid == DIALOG_CARBUY5)
	{
	    if(response)
		{
		    new num = BuyCar[playerid];
		    
		    if(GetPlayerCash(playerid) >= Stock[num][vPrice])
		    {
				if(Stock[num][vStock] > 0)
		        {
		        	if(playerVariables[playerid][pCarKey1] == 1 && playerVariables[playerid][pCarKey2] == 1 && playerVariables[playerid][pDonate] == 0) return SS(playerid, COLOR_GREY,"Ai nevoie de cont premium pentru a putea detine 4 vehicule.","You need to have a premium account to be able to own 4 vehicles.");
		        	if(playerVariables[playerid][pCarKey1] == 1 && playerVariables[playerid][pCarKey2] == 1 && playerVariables[playerid][pCarKey3] == 1 && playerVariables[playerid][pCarKey4] == 1) return SS(playerid, COLOR_GREY,"Nu poti detine mai mult de 4 vehicule.","You can't own more than 4 vehicles.");
		        	if(playerVariables[playerid][pCarKey1] == 0)
		        	{
		        		InsertCar(playerid, num);
		        		playerVariables[playerid][pCarKey1] = 1;
		        		Update(playerid, pCarKey1x);
		        	}
		        	else if(playerVariables[playerid][pCarKey2] == 0)
		        	{
		        		InsertCar(playerid, num);
		        		playerVariables[playerid][pCarKey2] = 1;
		        		Update(playerid, pCarKey2x);
		        	}
		        	
		        	else if(playerVariables[playerid][pDonate] == 1)
		        	{
		        		if(playerVariables[playerid][pCarKey3] == 0)
		        		{
		        			InsertCar(playerid, num);
		        			playerVariables[playerid][pCarKey3] = 1;
		        			Update(playerid, pCarKey3x);
		        		}
		        		else if(playerVariables[playerid][pCarKey4] == 0)
			        	{
			        		InsertCar(playerid, num);
			        		playerVariables[playerid][pCarKey4] = 1;
			        		Update(playerid, pCarKey4x);
			        	} 
					}
				}	
				else
				{
				    new stringg[500];
				    format(stringg, sizeof(stringg),"Aceasta masina numai este disponibila in Dealership. Stoc epuizat.\nYou can't buy this vehicle from the dealership. Out of stock.");
			 		ShowPlayerDialog(playerid, DIALOG_NOSTOCK, DIALOG_STYLE_MSGBOX, "Out of stock", stringg, "Close","");
				}
			}
			else return S(playerid, COLOR_GREY, "You don't have enough money to purchase this vehicle.");
		}
		return 1;
	}















	if(dialogid == DIALOG_CARBUY2)
	{
	    if(response)
	    {
	    	new num = listitem + 1;
    		BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %s available", Stock[num][vName], NumberFormat(Stock[num][vPrice]), NumberFormat(Stock[num][vStock]));
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %s\nTop speed: %s km/h", Stock[num][vName], NumberFormat(Stock[num][vPrice]), NumberFormat(Stock[num][vStock]), NumberFormat(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars", "Select", "Back");
		}
	    return 1;
	}
	if(dialogid == DIALOG_CARBUY3)
	{
	    if(response)
	    {
	        new cheapcars;
	        for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
			{
			    if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 7000000)
			    {
			        cheapcars = xf;
				}
			}
	    	new num = listitem + cheapcars + 1;
 	    	BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %s available", Stock[num][vName], NumberFormat(Stock[num][vPrice]), NumberFormat(Stock[num][vStock]));
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %s\nTop speed: %s km/h", Stock[num][vName], NumberFormat(Stock[num][vPrice]), NumberFormat(Stock[num][vStock]), NumberFormat(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		else
	    {
	        ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars", "Select", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY4)
	{
	    if(response)
        {
	    	new regcheapcars;
	    	for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
			{
			    if(Stock[xf][vPrice] > 7000000 && Stock[xf][vPrice] <= 19999999)
			    {
       				regcheapcars = xf;
				}
			}
			new num = listitem + regcheapcars + 1;
   			BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %s available", Stock[num][vName], NumberFormat(Stock[num][vPrice]), NumberFormat(Stock[num][vStock]));
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %s\nTop speed: %s km/h", Stock[num][vName], NumberFormat(Stock[num][vPrice]), NumberFormat(Stock[num][vStock]), NumberFormat(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		else
	    {
	        ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars", "Select", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new stringzz[2000], stringy[2000];
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 7000000)
				    {
						format(stringy, sizeof(stringy), "%s ($%s)\n", Stock[xf][vName], NumberFormat(Stock[xf][vPrice]));
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY2, DIALOG_STYLE_LIST, "Buy a car", stringzz, "Select", "Back");
			}
	    	if(listitem == 1)
			{
				new stringzz[2000],stringy[2000];
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] > 7000000 && Stock[xf][vPrice] <= 19999999)
				    {
						format(stringy, sizeof(stringy), "%s ($%s)\n", Stock[xf][vName], NumberFormat(Stock[xf][vPrice]));
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY3, DIALOG_STYLE_LIST, "Buy a car", stringzz, "Select", "Back");
			}
	    	if(listitem == 2)
			{
				new stringzz[2000], stringy[2000];
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] >= 20000000)
				    {
						format(stringy, sizeof(stringy), "%s ($%s)\n", Stock[xf][vName], NumberFormat(Stock[xf][vPrice]));
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY4, DIALOG_STYLE_LIST, "Buy a car", stringzz, "Select", "Back");
			}
		}
	    return 1;
	}

 	if(dialogid == DIALOG_PCOLOR)
	{
	    if(response)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
		            playerVariables[playerid][pColor] = 0;
		            Update(playerid, pColorx);
		            SS(playerid, -1, "Server: Culoarea numelui schimbata! Sper ca iti place noua culoare!", "Server: Nick color changed! Hope you like the new color!");
		        }
		        case 1:
		        {
		            playerVariables[playerid][pColor] = 1;
		            Update(playerid, pColorx);
		            SS(playerid, -1, "{4890E7}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!", "{4890E7}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
		        }
          		case 2:
		        {
		            playerVariables[playerid][pColor] = 2;
		            Update(playerid, pColorx);
		            SS(playerid, -1, "{FFFF00}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!", "{FFFF00}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
		        }
		        case 3:
		        {
		            playerVariables[playerid][pColor] = 3;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{17E81E}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{17E81E}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
		        }
          		case 4:
		        {
		            playerVariables[playerid][pColor] = 4;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{EA2685}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{EA2685}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
		        }
          		case 5:
		        {
		            playerVariables[playerid][pColor] = 5;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{777274}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{777274}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
		        }
		        case 6:
		        {
		            playerVariables[playerid][pColor] = 6;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{FF9E00}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{FF9E00}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
		        }
		        case 7:
		        {
		            playerVariables[playerid][pColor] = 7;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{EE5DDB}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{EE5DDB}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
		        }
		        case 8:
		        {
		            playerVariables[playerid][pColor] = 8;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{6F00AB}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{6F00AB}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
		        }
		        case 9:
		        {
		            playerVariables[playerid][pColor] = 9;
		            Update(playerid, pColorx);
		            if(playerVariables[playerid][pLimba] == 1)
					{
		            	S(playerid, COLOR_WHITE,"{4D8E14}Server: {FFFFFF}Culoarea numelui schimbata! Sper ca iti place noua culoare!");
		            }
		            if(playerVariables[playerid][pLimba] == 2)
					{
					    S(playerid, COLOR_WHITE,"{4D8E14}Server: {FFFFFF}Nick color changed! Hope you like the new color!");
				 	}
		        }
			}
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public IniAssets()
{
	new Cache: result2 = mysql_query (handle, "SELECT * FROM `assets` ORDER BY `assets`.`assetID` ASC");
	new x;

 	for ( new i, j = cache_get_row_count ( ); i != j; ++i )
	{
		cache_get_field_content(i, "assetID", result); x = strval(result);
		cache_get_field_content(i, "assetValue", result); assetVariables[x][aAssetValue] = strval(result);
		cache_get_field_content(i, "assetName", result); format(assetVariables[x][aAssetName], 32, result);
	}
	cache_delete(result2);
	return 1;
}
public IniVehicule()
{
	new Cache: result15 = mysql_query (handle, "SELECT * FROM `vehicule` ORDER BY `vehicule`.`vID` ASC");
	
 	for (new i, j = cache_get_row_count ( ); i != j; ++i )
	{
		new x;

		cache_get_field_content(i, "vID", result); x = strval(result);
		cache_get_field_content(i, "vModel", result); carVariables[x][cModel] = strval(result);

		cache_get_field_content(i, "vOwnerID", result); carVariables[x][cOwnerID] = strval(result);

		cache_get_field_content(i, "vKM", result); carVariables[x][cKM] = strval(result);
		cache_get_field_content(i, "vDays", result); carVariables[x][cDays] = strval(result);
		cache_get_field_content(i, "vLock", result); carVariables[x][cLock] = strval(result);

		cache_get_field_content(i, "vPosX", result); carVariables[x][cPos][0] = floatstr(result);
		cache_get_field_content(i, "vPosY", result); carVariables[x][cPos][1] = floatstr(result);
		cache_get_field_content(i, "vPosZ", result); carVariables[x][cPos][2] = floatstr(result);
		cache_get_field_content(i, "vPosAngle", result); carVariables[x][cRotate] = floatstr(result);

		cache_get_field_content(i, "vOwnerName", result); format(carVariables[x][cOwner], MAX_PLAYER_NAME, result);
		cache_get_field_content(i, "vPlate", result); format(carVariables[x][cPlate], 10, result);

		cache_get_field_content(i, "vColour1", result); carVariables[x][cColour][0] = strval(result);
		cache_get_field_content(i, "vColour2", result); carVariables[x][cColour][1] = strval(result);

		masini = x;

		systemVariables[PersonalCars]++;
	}
	printf("[script] %d personal cars loaded.", systemVariables[PersonalCars]);
	cache_delete(result15);
	return 1;
}

public IniVehs()
{
	new Cache: result5 = mysql_query (handle, "SELECT * FROM `vehicles` ORDER BY `vehicles`.`vehicleID` ASC");

 	for ( new i, j = cache_get_row_count ( ); i != j; ++i )
	{
		new x, stringcar[256],stringcar1[256];
		cache_get_field_content(i, "vehicleID", result); x = strval(result);
		cache_get_field_content(i, "vehicleModelID", result); vehicleVariables[x][vVehicleModelID] = strval(result);
		cache_get_field_content(i, "vehiclePosX", result); vehicleVariables[x][vVehiclePosition][0] = floatstr(result);
		cache_get_field_content(i, "vehiclePosY", result); vehicleVariables[x][vVehiclePosition][1] = floatstr(result);
		cache_get_field_content(i, "vehiclePosZ", result); vehicleVariables[x][vVehiclePosition][2] = floatstr(result);
		cache_get_field_content(i, "vehiclePosRotation", result); vehicleVariables[x][vVehicleRotation] = floatstr(result);
		cache_get_field_content(i, "vehicleGroup", result); vehicleVariables[x][vVehicleGroup] = strval(result);
		cache_get_field_content(i, "vehicleGroupRank", result); vehicleVariables[x][vVehicleGroupRank] = strval(result);
		cache_get_field_content(i, "vehicleJob", result); vehicleVariables[x][vVehicleJob] = strval(result);
		cache_get_field_content(i, "vehicleCol1", result); vehicleVariables[x][vVehicleColour][0] = strval(result);
		cache_get_field_content(i, "vehicleCol2", result); vehicleVariables[x][vVehicleColour][1] = strval(result);
		cache_get_field_content(i, "vehicleDMV", result); vehicleVariables[x][vVehicleDMV] = strval(result);
		cache_get_field_content(i, "vehicleRentCar", result); vehicleVariables[x][vVehicleRentCar] = strval(result);


		if(vehicleVariables[x][vVehicleGroup] >= 1)
		{
        	format(stringcar, 256, "F%d %d",vehicleVariables[x][vVehicleGroup],x);
			vehicleVariables[x][vVehicleScriptID] = CreateVehicle(vehicleVariables[x][vVehicleModelID], vehicleVariables[x][vVehiclePosition][0], vehicleVariables[x][vVehiclePosition][1], vehicleVariables[x][vVehiclePosition][2], vehicleVariables[x][vVehicleRotation], vehicleVariables[x][vVehicleColour][0], vehicleVariables[x][vVehicleColour][1], 600,0);
			Gas[x] = 100;
		}
		if(vehicleVariables[x][vVehicleGroup] == 0 && vehicleVariables[x][vVehicleJob] != 8)
		{
			format(stringcar1, 256, "LET %d",x);
			vehicleVariables[x][vVehicleScriptID] = CreateVehicle(vehicleVariables[x][vVehicleModelID], vehicleVariables[x][vVehiclePosition][0], vehicleVariables[x][vVehiclePosition][1], vehicleVariables[x][vVehiclePosition][2], vehicleVariables[x][vVehicleRotation], vehicleVariables[x][vVehicleColour][0], vehicleVariables[x][vVehicleColour][1], 600,0);
			Gas[x] = 50 + random(50);
		}
		if(vehicleVariables[x][vVehicleJob] >= 8)
  		{
			farmCar[x] = CreateVehicle(vehicleVariables[x][vVehicleModelID], vehicleVariables[x][vVehiclePosition][0], vehicleVariables[x][vVehiclePosition][1], vehicleVariables[x][vVehiclePosition][2], vehicleVariables[x][vVehicleRotation], vehicleVariables[x][vVehicleColour][0], vehicleVariables[x][vVehicleColour][1], 1, 0);
  			Gas[x] = 50 + random(50);
		}
		if(vehicleVariables[x][vVehicleGroup] >= 1)
		{
		    SetVehicleNumberPlate(x, stringcar);
		}
		else
		{
			SetVehicleNumberPlate(x, stringcar1);
		}
		if(vehicleVariables[x][vVehicleDMV] >= 1)
		{
			SetVehicleNumberPlate(x, "EXAM");
		}

		if(vehicleVariables[x][vVehicleGroup] == 7 && vehicleVariables[x][vVehicleModelID] == 560)
		{
			taxiobj[x] = CreateObject(19308,0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
			AttachObjectToVehicle(taxiobj[x], x, 0.000000, -0.249999, 0.949999, 0.000000, 0.000001, 90.449951);
		}
		if((vehicleVariables[x][vVehicleGroup] == 1 || vehicleVariables[x][vVehicleGroup] == 2) && vehicleVariables[x][vVehicleModelID] == 411)
		{
			sirena[x] = CreateObject(19419, 0, 0, 0, 0, 0, 0, 0);
			AttachObjectToVehicle(sirena[x], x, 0.0, 0.0, 0.7, 0.0, 0.0, 0.0);
		}
	}
	cache_delete(result5);
	return 1;
}
public IniJobs()
{
 	new Cache: result4 = mysql_query (handle, "SELECT * FROM `jobs` ORDER BY `jobs`.`jobID` ASC");
	new x;

  	for ( new i, j = cache_get_row_count ( ); i != j; ++i )
	{
		cache_get_field_content(i, "jobID", result); x = strval(result);
		cache_get_field_content(i, "jobType", result);  jobVariables[x][jJobType] = strval(result);
		cache_get_field_content(i, "jobPositionX", result);  jobVariables[x][jJobPosition][0] = floatstr(result);
		cache_get_field_content(i, "jobPositionY", result);  jobVariables[x][jJobPosition][1] = floatstr(result);
		cache_get_field_content(i, "jobPositionZ", result);  jobVariables[x][jJobPosition][2] = floatstr(result);
		cache_get_field_content(i, "jobName", result); format(jobVariables[x][jJobName], 32, result);

		format(result, sizeof(result), "{FFFFFF}ID: {991932}%d\n{FFFFFF}Job: {991932}%s\n{FFFFFF}Use {991932}/getjob {FFFFFF}to get the job.", x,jobVariables[x][jJobName]);

		jobVariables[x][jJobPickupID] = CreateDynamicPickup(1275, 23, jobVariables[x][jJobPosition][0], jobVariables[x][jJobPosition][1], jobVariables[x][jJobPosition][2], 0, -1, -1, 50);
		jobVariables[x][jJobLabelID] = CreateDynamic3DTextLabel(result, COLOR_Riffa, jobVariables[x][jJobPosition][0], jobVariables[x][jJobPosition][1], jobVariables[x][jJobPosition][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 15.0);
		systemVariables[jobsCount]++;
	}
	printf("[script] %d jobs loaded.", systemVariables[jobsCount]);
	cache_delete(result4);
	return 1;
}
public IniGroups()
{
	new Cache: result2 = mysql_query (handle, "SELECT * FROM `groups` ORDER BY `groups`.`groupID` ASC");

 	new x;
 	for ( new i, j = cache_get_row_count ( ); i != j; ++i )
	{

		cache_get_field_content(i, "groupID", result); 				x = strval(result);
		cache_get_field_content(i, "groupName", result); 			format(groupVariables[x][gGroupName], 32, result);
		cache_get_field_content(i, "groupType", result); 			groupVariables[x][gGroupType] = strval(result);
		cache_get_field_content(i, "groupHQExteriorPosX", result); 	groupVariables[x][gGroupExteriorPos][0] = floatstr(result);
		cache_get_field_content(i, "groupHQExteriorPosY", result); 	groupVariables[x][gGroupExteriorPos][1] = floatstr(result);
		cache_get_field_content(i, "groupHQExteriorPosZ", result); 	groupVariables[x][gGroupExteriorPos][2] = floatstr(result);
		cache_get_field_content(i, "groupHQInteriorPosX", result); 	groupVariables[x][gGroupInteriorPos][0] = floatstr(result);
		cache_get_field_content(i, "groupHQInteriorPosY", result); 	groupVariables[x][gGroupInteriorPos][1] = floatstr(result);
		cache_get_field_content(i, "groupHQInteriorPosZ", result); 	groupVariables[x][gGroupInteriorPos][2] = floatstr(result);
		cache_get_field_content(i, "groupHQInteriorID", result); 	groupVariables[x][gGroupHQInteriorID] = strval(result);
		cache_get_field_content(i, "groupHQLockStatus", result); 	groupVariables[x][gGroupHQLockStatus] = strval(result);
		cache_get_field_content(i, "groupSlots", result);  			groupVariables[x][gSlots] = strval(result);
		cache_get_field_content(i, "Money", result);  				groupVariables[x][gMoney] = strval(result);
		cache_get_field_content(i, "Drugs", result);  				groupVariables[x][gDrugs] = strval(result);
		cache_get_field_content(i, "Materials", result);  			groupVariables[x][gMaterials] = strval(result);
		cache_get_field_content(i, "groupAplication", result);  	groupVariables[x][gAplication] = strval(result);
		cache_get_field_content(i, "groupLevel", result);  			groupVariables[x][gLevel] = strval(result);
		cache_get_field_content(i, "groupMOTD", result); 			format(groupVariables[x][gGroupMOTD], 128, result);
		cache_get_field_content(i, "groupRankName1", result);		format(groupVariables[x][gGroupRankName1], 32, result);
		cache_get_field_content(i, "groupRankName2", result); 		format(groupVariables[x][gGroupRankName2], 32, result);
		cache_get_field_content(i, "groupRankName3", result); 		format(groupVariables[x][gGroupRankName3], 32, result);
		cache_get_field_content(i, "groupRankName4", result); 		format(groupVariables[x][gGroupRankName4], 32, result);
		cache_get_field_content(i, "groupRankName5", result); 		format(groupVariables[x][gGroupRankName5], 32, result);
		cache_get_field_content(i, "groupRankName6", result); 		format(groupVariables[x][gGroupRankName6], 32, result);
		cache_get_field_content(i, "groupRankName7", result); 		format(groupVariables[x][gGroupRankName7], 32, result);
		cache_get_field_content(i, "groupSafePosX", result);  		groupVariables[x][gSafePos][0] = floatstr(result);
		cache_get_field_content(i, "groupSafePosY", result); 	 	groupVariables[x][gSafePos][1] = floatstr(result);
		cache_get_field_content(i, "groupSafePosZ", result);  		groupVariables[x][gSafePos][2] = floatstr(result);
		
  		switch(groupVariables[x][gGroupHQLockStatus])
		{
			case 0: format(result, sizeof(result), "%s's HQ", groupVariables[x][gGroupName]);
			case 1: format(result, sizeof(result), "%s's HQ\n\n(locked)", groupVariables[x][gGroupName]);
		}
		if(groupVariables[x][gGroupType] == 1)
		{
			groupVariables[x][gGroupPickupID] = CreateDynamicPickup(1247, 23, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2], 0, -1, -1, 15);
			groupVariables[x][gGroupLabelID] = CreateDynamic3DTextLabel(result, COLOR_TEAL, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, GROUP_VIRTUAL_WORLD+x, -1, -1, -1, 15.0);
		}
		else if(groupVariables[x][gGroupType] == 3)
		{
		    CreateDynamicMapIcon(groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2], 22, 0,-1,-1,-1,500.0);
			groupVariables[x][gGroupPickupID] = CreateDynamicPickup(1240, 23, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2], 0, -1, -1, 15);
			groupVariables[x][gGroupLabelID] = CreateDynamic3DTextLabel(result, COLOR_TEAL, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, GROUP_VIRTUAL_WORLD+x, -1, -1, -1, 15.0);
		}
		else if(groupVariables[x][gGroupType] == 4)
		{
			groupVariables[x][gGroupPickupID] = CreateDynamicPickup(1239, 23, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2], 0, -1, -1, 15);
			groupVariables[x][gGroupLabelID] = CreateDynamic3DTextLabel(result, COLOR_TEAL, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, GROUP_VIRTUAL_WORLD+x, -1, -1, -1, 15.0);
		}
		else if(groupVariables[x][gGroupType] == 8)
		{
			groupVariables[x][gGroupPickupID] = CreateDynamicPickup(1254, 23, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2], 0, -1, -1, 15);
			groupVariables[x][gGroupLabelID] = CreateDynamic3DTextLabel(result, COLOR_TEAL, groupVariables[x][gGroupExteriorPos][0], groupVariables[x][gGroupExteriorPos][1], groupVariables[x][gGroupExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, GROUP_VIRTUAL_WORLD+x, -1, -1, -1, 15.0);
		}
	}
	cache_delete(result2);
	return 1;
}
public IniStock()
{
	new Cache: result1 = mysql_query (handle, "SELECT * FROM `stock` ORDER BY `Price`");
	for ( new i = 0, j = cache_get_row_count ( ); i != j; i++)
	{
		cache_get_field_content(i, "Stock", result);  Stock[i+1][vStock] = strval(result);
		cache_get_field_content(i, "Price", result);  Stock[i+1][vPrice] = strval(result);
		cache_get_field_content(i, "Model", result);  Stock[i+1][vModel] = strval(result);
		cache_get_field_content(i, "Speed", result);  Stock[i+1][vSpeed] = strval(result);
		cache_get_field_content(i, "Car", result); format(Stock[i+1][vName], 32, result);

		systemVariables[dsvehicle]++;
	}
	printf("[script] %d models loaded.", systemVariables[dsvehicle]);
	cache_delete(result1);
	return 1;
}
public IniTurfs()
{
	new Cache: result6 = mysql_query (handle, "SELECT * FROM `turfs` ORDER BY `turfs`.`ID` ASC");
	new x;

	for ( new i, j = cache_get_row_count ( ); i != j; ++i )
	{
		cache_get_field_content(i, "ID", result); x = strval(result);
		cache_get_field_content(i, "ID", result);  TurfInfo[x][zID] = strval(result);
		cache_get_field_content(i, "Owned", result);  TurfInfo[x][zOwned] = strval(result);
		cache_get_field_content(i, "MinX", result); TurfInfo[x][zMinX] = floatstr(result);
		cache_get_field_content(i, "MinY", result); TurfInfo[x][zMinY] = floatstr(result);
		cache_get_field_content(i, "MaxX", result); TurfInfo[x][zMaxX] = floatstr(result);
		cache_get_field_content(i, "MaxY", result); TurfInfo[x][zMaxY] = floatstr(result);

		systemVariables[turfss]++;
	}
	printf("[script] %d turfs found.", systemVariables[turfss]);
	cache_delete(result6);
	return 1;
}
public IniBusinesses()
{
	new Cache: result3 = mysql_query (handle, "SELECT * FROM `businesses` ORDER BY `businesses`.`businessID` ASC");
	new x;

 	for ( new i, j = cache_get_row_count ( ); i != j; ++i )
	{
		cache_get_field_content(i, "businessID", result); x = strval(result);
		cache_get_field_content(i, "businessOwner", result); format(businessVariables[x][bOwner], MAX_PLAYER_NAME, result);
		cache_get_field_content(i, "businessName", result); format(businessVariables[x][bName], 64, result);
		cache_get_field_content(i, "businessInterior", result); businessVariables[x][bInterior] = strval(result);
		cache_get_field_content(i, "businessPrice", result); businessVariables[x][bPrice] = strval(result);
		cache_get_field_content(i, "businessVault", result); businessVariables[x][bVault] = strval(result);
		cache_get_field_content(i, "businessFee", result); businessVariables[x][bFee] = strval(result);
		cache_get_field_content(i, "businessLock", result); businessVariables[x][bLocked] = strval(result);
		cache_get_field_content(i, "businessType", result); businessVariables[x][bType] = strval(result);
		cache_get_field_content(i, "businessExteriorX", result); businessVariables[x][bExteriorPos][0] = floatstr(result);
       	cache_get_field_content(i, "businessExteriorY", result); businessVariables[x][bExteriorPos][1] = floatstr(result);
       	cache_get_field_content(i, "businessExteriorZ", result); businessVariables[x][bExteriorPos][2] = floatstr(result);
       	cache_get_field_content(i, "businessInteriorX", result); businessVariables[x][bInteriorPos][0] = floatstr(result);
       	cache_get_field_content(i, "businessInteriorY", result); businessVariables[x][bInteriorPos][1] = floatstr(result);
       	cache_get_field_content(i, "businessInteriorZ", result); businessVariables[x][bInteriorPos][2] = floatstr(result);
       	
       	new labelString[500];
       	
       	if(!strcmp(businessVariables[x][bOwner], "AdmBot", true) && strlen(businessVariables[x][bOwner]) >= 1)
		{
			if(businessVariables[x][bLocked] == 1)
			{
			    if(businessVariables[x][bPrice] > 0)
			    {
					format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
				}
				else
				{
					format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee]);
				}
			}
			else
			{
				if(businessVariables[x][bPrice] > 0)
			    {
					format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
				}
				else
				{
					format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bFee]);
				}
			}
			businessVariables[x][bLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_YELLOW, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			businessVariables[x][bPickupID] = CreateDynamicPickup(1239, 23, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 0, 0, -1, 250);
		}
		else
		{
  			if(businessVariables[x][bLocked] == 1)
			{
			    if(businessVariables[x][bPrice] > 0)
			    {
					format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
				}
				else
				{
					format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
				}
			}
			else
			{
				if(businessVariables[x][bPrice] > 0)
			    {
					format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
				}
				else
				{
					format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
				}
			}
			businessVariables[x][bLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_YELLOW, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			businessVariables[x][bPickupID] = CreateDynamicPickup(1239, 23, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 0, 0, -1, 250);
		}
		CreatePickup(1318, 23, 286.1366,-29.9750,1001.5156, BUSINESS_VIRTUAL_WORLD+x); // GUN SHOP
    	CreatePickup(1318, 23, 286.0566,-23.6882,1001.5229, BUSINESS_VIRTUAL_WORLD+x); // GUN SHOP
    	
  		if(businessVariables[x][bType] == 1) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 52, 0,-1,-1,-1,500.0); //Bank
		if(businessVariables[x][bType] == 2) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 17, 0,-1,-1,-1,500.0); //24/7
		if(businessVariables[x][bType] == 3) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 18, 0,-1,-1,-1,500.0); //Gun shop
		if(businessVariables[x][bType] == 4) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 38, 0,-1,-1,-1,500.0); //Sex Shop
		if(businessVariables[x][bType] == 5) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 10, 0,-1,-1,-1,500.0); //Burger
		if(businessVariables[x][bType] == 6) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 45, 0,-1,-1,-1,500.0); //clothes
		if(businessVariables[x][bType] == 7) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 49, 0,-1,-1,-1,500.0); //bar
		if(businessVariables[x][bType] == 8) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 25, 0,-1,-1,-1,500.0); //casino
		if(businessVariables[x][bType] == 9) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 54, 0,-1,-1,-1,500.0); //Gym
		if(businessVariables[x][bType] == 10) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 63, 0,-1,-1,-1,500.0); //pns
		if(businessVariables[x][bType] == 11) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 27, 0,-1,-1,-1,500.0); //gas
		if(businessVariables[x][bType] == 12) CreateDynamicMapIcon(businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 12, 0,-1,-1,-1,500.0); //cnn


	
       	systemVariables[businessCount]++;
	}
	printf("[script] %d businesses loaded.", systemVariables[businessCount]);
	cache_delete(result3);
	return 1;
}
	
public IniHouses()
{
	new Cache: result7 = mysql_query (handle, "SELECT * FROM `houses` ORDER BY `houses`.`houseID` ASC");
	new x;

 	for ( new i, j = cache_get_row_count ( ); i != j; ++i )
	{
       	cache_get_field_content(i, "houseID", result); x = strval(result);
       	cache_get_field_content(i, "houseOwner", result); format(houseVariables[x][hHouseOwner], 32, result);
       	cache_get_field_content(i, "houseExteriorPosX", result); houseVariables[x][hHouseExteriorPos][0] = floatstr(result);
       	cache_get_field_content(i, "houseExteriorPosY", result); houseVariables[x][hHouseExteriorPos][1] = floatstr(result);
       	cache_get_field_content(i, "houseExteriorPosZ", result); houseVariables[x][hHouseExteriorPos][2] = floatstr(result);
       	cache_get_field_content(i, "houseInteriorPosX", result); houseVariables[x][hHouseInteriorPos][0] = floatstr(result);
     	cache_get_field_content(i, "houseInteriorPosY", result); houseVariables[x][hHouseInteriorPos][1] = floatstr(result);
      	cache_get_field_content(i, "houseInteriorPosZ", result); houseVariables[x][hHouseInteriorPos][2] = floatstr(result);
      	cache_get_field_content(i, "housePrice", result); houseVariables[x][hHousePrice] = strval(result);
      	cache_get_field_content(i, "houseLocked", result); houseVariables[x][hHouseLocked] = strval(result);
      	cache_get_field_content(i, "houseRent", result); houseVariables[x][hRent] = strval(result);
      	cache_get_field_content(i, "houseSize", result); houseVariables[x][hSize] = strval(result);
      	cache_get_field_content(i, "houseMoney", result); houseVariables[x][hMoney] = strval(result);
      	cache_get_field_content(i, "houseDescription", result); format(houseVariables[x][hDescription], 64, result);
      	cache_get_field_content(i, "houseInterior", result); houseVariables[x][hHouseInterior] = strval(result);

		if(!strcmp(houseVariables[x][hHouseOwner], "AdmBot", true) && strlen(houseVariables[x][hHouseOwner]) >= 1)
		{
			new labelString[256];

			if(houseVariables[x][hSize] == 1)
			{
				if(houseVariables[x][hHouseLocked] == 1)
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}AdmBot{FFFFFF}\nRent: {990000}$%d\n{FFFFFF}Size: {990000}Small\n{FFFFFF}Price: {990000}$%s (/buyhouse){FFFFFF}\n(locked)", x, houseVariables[x][hDescription], houseVariables[x][hRent], NumberFormat(houseVariables[x][hHousePrice]));
				}
				else
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}AdmBot{FFFFFF}\nRent: {990000}$%d\n{FFFFFF}Size: {990000}Small\n{FFFFFF}Price: {990000}$%s (/buyhouse){FFFFFF}", x, houseVariables[x][hDescription], houseVariables[x][hRent], NumberFormat(houseVariables[x][hHousePrice]));
				}

				houseVariables[x][hLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_YELLOW, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				houseVariables[x][hPickupID] = CreateDynamicPickup(1273, 23, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2], 0, 0, -1, 250);
			}
   			if(houseVariables[x][hSize] == 2)
			{
				if(houseVariables[x][hHouseLocked] == 1)
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}AdmBot{FFFFFF}\nRent: {990000}$%d\n{FFFFFF}Size: {990000}Medium\n{FFFFFF}Price: {990000}$%s (/buyhouse){FFFFFF}\n(locked)", x, houseVariables[x][hDescription], houseVariables[x][hRent], NumberFormat(houseVariables[x][hHousePrice]));
				}
				else
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}AdmBot{FFFFFF}\nRent: {990000}$%d\n{FFFFFF}Size: {990000}Medium\n{FFFFFF}Price: {990000}$%s (/buyhouse){FFFFFF}", x, houseVariables[x][hDescription], houseVariables[x][hRent], NumberFormat(houseVariables[x][hHousePrice]));
				}

				houseVariables[x][hLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_YELLOW, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				houseVariables[x][hPickupID] = CreateDynamicPickup(1273, 23, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2], 0, 0, -1, 250);
			}
   			if(houseVariables[x][hSize] == 3)
			{
				if(houseVariables[x][hHouseLocked] == 1)
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}AdmBot{FFFFFF}\nRent: {990000}$%d\n{FFFFFF}Size: {990000}Big\n{FFFFFF}Price: {990000}$%s (/buyhouse){FFFFFF}\n(locked)", x, houseVariables[x][hDescription], houseVariables[x][hRent], NumberFormat(houseVariables[x][hHousePrice]));
				}
				else
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}AdmBot{FFFFFF}\nRent: {990000}$%d\n{FFFFFF}Size: {990000}Big\n{FFFFFF}Price: {990000}$%s (/buyhouse){FFFFFF}", x, houseVariables[x][hDescription], houseVariables[x][hRent], NumberFormat(houseVariables[x][hHousePrice]));
				}

				houseVariables[x][hLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_YELLOW, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				houseVariables[x][hPickupID] = CreateDynamicPickup(1273, 23, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2], 0, 0, -1, 250);
			}
		}
		else
		{
			new labelString[256];

			if(houseVariables[x][hHouseLocked] == 1)
			{
				if(houseVariables[x][hHousePrice] >= 1)
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s{FFFFFF}\nRent: {990000}$%d\n{FFFFFF}Price: {990000}$%s (/buyhouse)\n(locked)", x, houseVariables[x][hDescription], houseVariables[x][hHouseOwner], houseVariables[x][hRent], NumberFormat(houseVariables[x][hHousePrice]));
				}
				else
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s{FFFFFF}\nRent: {990000}$%d\n(locked)", x, houseVariables[x][hDescription], houseVariables[x][hHouseOwner], houseVariables[x][hRent]);
				}
			}
			else
			{
				if(houseVariables[x][hHousePrice] >= 1)
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s{FFFFFF}\nRent: {990000}$%d\n{FFFFFF}Price: {990000}$%s{FFFFFF}", x, houseVariables[x][hDescription], houseVariables[x][hHouseOwner], houseVariables[x][hRent], NumberFormat(houseVariables[x][hHousePrice]));
				}
				else
				{
					format(labelString, sizeof(labelString), "{FFFFFF}House: {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s{FFFFFF}\nRent: {990000}$%d", x, houseVariables[x][hDescription], houseVariables[x][hHouseOwner], houseVariables[x][hRent]);
				}
			}
			houseVariables[x][hLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_YELLOW, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			houseVariables[x][hPickupID] = CreateDynamicPickup(1272, 23, houseVariables[x][hHouseExteriorPos][0], houseVariables[x][hHouseExteriorPos][1], houseVariables[x][hHouseExteriorPos][2], 0, 0, -1, 250);
		}
		systemVariables[houseCount]++;
	}
	printf("[script] %d houses loaded.", systemVariables[houseCount]);
	cache_delete(result7);
	return 1;
}


public ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						S(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						S(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						S(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						S(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						S(i, col5, string);
					}
				}
				else
				{
					S(i, col1, string);
				}
			}
		}
	}
	return 0;
}
public eventlms()
{
	new string[256];
	
	if(GetPlayersLms() < 10)
	{
	    activeevent = 0;
		gunlms1 = 0;
		gunlms2 = 0;
		gunlms3 = 0;
		gunlms4 = 0;
		gunlms5 = 0;
	    
		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(i, 200.0, -1403.0852,988.6870,1024.0004))
		    {
		        SpawnPlayer(i);
				if(playerVariables[i][pLimba] == 1)
				{
					format(string, sizeof(string), "(( Event Place: Toti playerii vor fi spawnati deoarece nu sunt minim 10 jucatori in arena. ))", GetPlayersLms());
					S(i, COLOR_YELLOW, string);
				}
			}
		}
	}
	else
	{
		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(i, 200.0, -1403.0852,988.6870,1024.0004))
		    {
		    	SetPlayerHealthEx(i, 100);
		    	TogglePlayerControllable(i, 0);


		    	GivePlayerWeaponEx(i, gunlms1, 999);
		    	GivePlayerWeaponEx(i, gunlms2, 999);
		    	GivePlayerWeaponEx(i, gunlms3, 999);
		    	GivePlayerWeaponEx(i, gunlms4, 999);
		    	GivePlayerWeaponEx(i, gunlms5, 999);

		    	iGMXTick1 = 11;
				iGMXTimer1 = SetTimer("timerlms", 1000, true);
			}

			if(playerVariables[i][pLimba] == 1)
			{
				format(string, sizeof(string), "(( EventBot: Arena a fost inchisa. La eveniment participa %d playeri. Succes! ))", GetPlayersLms());
				S(i, COLOR_LIGHT, string);
			}
		}
	}
	
	Update3DTextLabelText(areap, 0xFFFFFFFF, "Event Place\n\n(locked)");
	areape = 0;
}

public Tutorial()
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
		if(TutorialTime[i]  >= 1)
		{
	        TutorialTime[i] += 1;
	        if(TutorialTime[i] == 5)
	 		{
				mysql_query(handle, "SELECT * FROM players");
				mysql_store_result();

				new registered = mysql_num_rows();
				mysql_free_result();

				mysql_query(handle, "SELECT * FROM houses");
				mysql_store_result();

				new houses = mysql_num_rows();
				mysql_free_result();

				mysql_query(handle, "SELECT * FROM businesses");
				mysql_store_result();

				new business = mysql_num_rows();
				mysql_free_result();

				mysql_query(handle, "SELECT * FROM stock");
				mysql_store_result();

				new masinii = mysql_num_rows();
				mysql_free_result();

				for(new x = 0; x < 30; x++) S(i, -1, "");

				if(playerVariables[i][pLimba] == 1)
				{
					SetPlayerPos(i, 366.0407,-1892.6018,1.6999);
					SetPlayerCameraPos(i, 558.3660,-1964.6206,85.2497);
					SetPlayerCameraLookAt(i, 419.0543,-1888.1879,23.8108);
					TogglePlayerControllable(i, 0);

					format(string, sizeof(string), "Salutare, %s! Bun venit pe Leet Romania.", GetName(i));
					S(i, COLOR_WHITE, string);

					S(i, COLOR_WHITE, "Serverul a fost deschis pe 15 septembrie 2016.");

					format(string, sizeof(string), "Avem %d playeri inregistrati, iar acum sunt %d playeri online.", registered, GetOnLinePlayers());
					S(i, COLOR_WHITE, string);

     				format(string, sizeof(string), "Sunt %d case si %d 20517-uri pe server, iar in dealership sunt disponibile %d modele diferite de masini.", houses, business, masinii);
					S(i, COLOR_WHITE, string);


					S(i, COLOR_WHITE, "Daca joci pe rpg.leet.ro, ai siguranta ca nu vor fi resetate niciodata datele(wipe) niciodata asa cum se intampla pe alte servere.");
     				S(i, COLOR_WHITE, "Se fac updateuri frecvente la server, iar bugurile aparute sunt reparate rapid.");
	        		S(i, COLOR_WHITE, "Adminii si helperii sunt bine alesi si te pot ajuta cu orice problema.");
			        S(i, COLOR_WHITE, "Intrebarile despre server le poti pune pe /n, iar daca ai o problema poti folosi /report.");
			        S(i, COLOR_WHITE, "In continuare iti vom prezenta cateva informatii despre joc.");

				}
	 		}
 			else if(TutorialTime[i] == 10)
	 		{
	 			for(new x = 0; x < 30; x++) S(i, -1, "");

				SetPlayerPos(i, 1223.5475,-1881.3280,30.6971);
				SetPlayerCameraPos(i, 1199.0161,-1862.7023,46.3864);
    			SetPlayerCameraLookAt(i, 1220.9999,-1838.0793,29.3740);

				if(playerVariables[i][pLimba] == 1)
				{
					S(i, COLOR_WHITE, "Aici poti da examen pentru a obtine permisul de conducere.");
					S(i, COLOR_WHITE, "Nu stii cum sa ajungi aici? Foloseste comanda /gps si vei putea alege 'Driving School' din lista.");
			        S(i, COLOR_WHITE, "Dupa ce vei lua examenul vei primi permisul de conducere, vei putea conduce masini, dar nu avioane sau barci.");
			        S(i, COLOR_WHITE, "Licentele vor expira dupa 100 ore de joc si va trebui sa dai examenele din nou pentru a le obtine.");
				}
	 		}
    		else if(TutorialTime[i] == 15)
	 		{
	 			for(new x = 0; x < 30; x++) S(i, -1, "");

				SetPlayerPos(i, 1223.5475,-1881.3280,30.6971);
				SetPlayerCameraPos(i, 1059.7504,-1744.2985,34.4699);
    			SetPlayerCameraLookAt(i, 1111.3286,-1796.7240,16.5938);

    			mysql_query(handle, "SELECT * FROM stock");
				mysql_store_result();


				if(playerVariables[i][pLimba] == 1)
				{
					S(i, COLOR_WHITE, "Aici este Dealership-ul, adica locul de unde poti cumpara masini.");
                    S(i, COLOR_WHITE, "Pentru a cumpara o masina personala ai nevoie de level 3 si de bani suficienti.");

                    format(string, sizeof(string), "Sunt disponibile %d modele diferite de masini in dealership.", masini);
					S(i, COLOR_WHITE, string);

                    S(i, COLOR_WHITE, "Dupa ce vei cumpara o masina personala vei putea incuia usile, o vei putea parca unde vrei si o vei putea localiza.");
                    S(i, COLOR_WHITE, "Vei putea deasemenea sa vinzi masina sau sa faci schimb de masini cu un alt player.");
                    S(i, COLOR_WHITE, "Poti detine maxim 2 masini personale sau 4 daca ai cont premium.");
				}
	 		}
	 		else if(TutorialTime[i] == 20)
	 		{
	 			for(new x = 0; x < 30; x++) S(i, -1, "");

				SetPlayerPos(i, 850.6959,-1046.0472,25.4881);
				SetPlayerCameraPos(i, 832.4984,-1012.9971,42.2937);
    			SetPlayerCameraLookAt(i, 844.8494,-1042.3063,25.4803);

	 			if(playerVariables[i][pLimba] == 1)
				{
	 		    	S(i, COLOR_WHITE, "Aici este CNN Los Santos, adica locul unde poti plasa anunturi pe server.");
		        	S(i, COLOR_WHITE, "Anunturile sunt vazute de toti playerii de pe server si sunt folosite pentru a vinde/cumpara/schimba bunuri pe server.");
		        	S(i, COLOR_WHITE, "Anunturile se folosesc doar pentru vanzari, cumparari si schimburi de bunuri.");
		        	S(i, COLOR_WHITE, "Vei putea scrie un anunt folosind comanda /ad incepand cu level 5.");
	 			}
	 		}
    		else if(TutorialTime[i] == 25)
	 		{
	 			for(new x = 0; x < 30; x++) S(i, -1, "");

	 			SetPlayerPos(i, 1480.6289,-1773.0160,13.5469);
	 			SetPlayerCameraPos(i, 1519.4583,-1718.7722,39.9121);
    			SetPlayerCameraLookAt(i, 1484.2456,-1748.3043,15.4753);


	 			if(playerVariables[i][pLimba] == 1)
				{
	 		    	S(i, COLOR_WHITE, "Pentru a vedea o lista cu joburile de pe server, foloseste comanda /jobs.");
					S(i, COLOR_WHITE, "La toate joburile se castiga la fel de multi bani, cu exceptia jobului de detectiv unde nu se castiga bani.");
					S(i, COLOR_WHITE, "Poti testa toate joburile pentru a testa care iti place mai mult.");
					S(i, COLOR_WHITE, "Daca te plictisesti de un job, vei putea folosi comanda /quitjob pentru a renunta la el oricand.");
				}
	 		}
	 		else if(TutorialTime[i] == 30)
	 		{
	 		    for(new x = 0; x < 30; x++) S(i, -1, "");

 		    	if(playerVariables[i][pLimba] == 1)
				{
				    S(i,COLOR_TUTORIAL,"Ai ajuns la sfarsitul tutorialului.");
				    S(i,COLOR_TUTORIAL,"Daca ai o intrebare legata de joc, foloseste /n iar daca vrei sa contactezi un admin foloseste /report.");
				    S(i,COLOR_TUTORIAL,"Foloseste /help pentru a vedea comenzile de baza ale serverului sau /gps pentru a vedea locatiile importante.");
				    S(i,COLOR_TUTORIAL,"Ai primit $100.000 in mana si $50.000 in banca. Distractie placuta!");
				}
				if(playerVariables[i][pLimba] == 2)
				{
				    S(i,COLOR_TUTORIAL,"We reached the end of the tutorial. We hope you learned something about the game.");
				    S(i,COLOR_TUTORIAL,"If  you have any game-questions, you can use /n and our helpers will try to help you.");
				    S(i,COLOR_TUTORIAL,"You can also use /help for basic commands.");
				    S(i,COLOR_TUTORIAL,"Have fun!");
				}

    			GivePlayerCash(i, 100000);
            	Update(i, pCashx);

            	playerVariables[i][pAccount] = 50000;
            	Update(i, pAccountx);

	 		    playerVariables[i][pTutorial] = 1;
				Update(i, pTutorialx);

				TutorialTime[i] = 0;

	 		    playerVariables[i][pLevel] = 1;
 				Update(i, pLevelx);
	 		    playerVariables[i][pRegistred] = 1;
				Update(i, pRegistredx);
				
				SetSpawnInfo(i, 0, 0, 1742.9515, -1862.3721, 13.5764, 359.5591, 0, 0, 0, 0, 0, 0);
				SpawnPlayer(i);
				

				new query[128];
				mysql_format(handle, query, sizeof(query), "SELECT * FROM `players` WHERE `username`='%e'", N(i));
        		mysql_tquery(handle, query, "WhenPlayerLogin", "i", i);
	 		}
		}
	}
	return 1;	
}
public globalPlayerLoop()
{
	if(incarcarestock > 0) { incarcarestock--; }
	if(incarcarestock == 0) { IniStock(); incarcarestock = -1; }
    new string[256], stringg[256];
    
    serveropen ++;
	
	for(new i = 1; i < sizeof(Turfs); i++)
	{
		new attackers = WarInfo[i][wAttacker], defenders = WarInfo[i][wFaction], count=0, warid;
			
			
  		if(WarInfo[i][wTime] > 0)
		{
			WarInfo[i][wTime]--;
			foreach(Player, j)
			{
				if(playerVariables[j][pGroup] == attackers)
				{
					format(string,sizeof(string),"~w~TURF TIMER:~h~~y~ %s", CalculeazaTimp(WarInfo[i][wTime]));
					PlayerTextDrawSetString(j, TimeLeftWar1[j], string);
					PlayerTextDrawShow(j, TimeLeftWar1[j]);
				}
				if(playerVariables[j][pGroup] == defenders)
				{
					format(string,sizeof(string),"~w~TURF TIMER:~h~~y~ %s", CalculeazaTimp(WarInfo[i][wTime]));
					PlayerTextDrawSetString(j, TimeLeftWar1[j], string);
					PlayerTextDrawShow(j, TimeLeftWar1[j]);
				}
			}
			if(WarInfo[i][wTime] == 1)
			{
				new atscore = 0, defscore = 0, winner;
					
				atscore = WarScoreF[attackers][i];
				defscore = WarScoreF[defenders][i];
				
				foreach(Player,j)
				{
					if(playerVariables[j][pGroup] == attackers)
					{
						GangZoneStopFlashForPlayer(j, Turfs[i]);
					}
					if(playerVariables[j][pGroup] == defenders)
					{
						GangZoneStopFlashForPlayer(j, Turfs[i]);
					}
				}
				if(atscore > defscore)
				{
					winner = 1;
				}
				else
				{
					winner = 2;
				}
				if(atscore == defscore)
				{
					winner = 2;
				}
				if(winner == 1)
				{
					new str[128], stringyy[MAX_STRING];
					TurfInfo[i][zOwned] = WarInfo[i][wAttacker];
					mysql_format(handle, str, 128,"UPDATE `turfs` SET `Owned`='%d' WHERE `ID`='%d'", TurfInfo[i][zOwned], i);
					mysql_tquery(handle, str, "","");
					
					format(stringyy, sizeof(stringyy), "NR AdmBot: Gruparea mafiota %s a cucerit teritoriul #%d ce era detinut de mafia %s.", NumeFactiune(WarInfo[i][wAttacker]), i, NumeFactiune(WarInfo[i][wFaction]));
					SendClientMessageToAll(COLOR_NEWSRP, stringyy);
				}
				format(stringg,sizeof(stringg),"------------ [ war overview #%d ] ------------", warid);
				SendToGroup(attackers, COLOR_GENANNOUNCE, stringg);
				SendToGroup(defenders, COLOR_GENANNOUNCE, stringg);

				if(winner == 1)
				{
					format(stringg,sizeof(stringg),"{36A834}Score: %s (%d) -  %s (%d).", NumeFactiune(WarInfo[i][wAttacker]), atscore, NumeFactiune(WarInfo[i][wFaction]), defscore);
					SendToGroup(attackers, -1, stringg);
					SendToGroup(defenders, -1, stringg);
				}
				if(winner == 2)
				{
					format(stringg,sizeof(stringg),"{36A834}Score: %s (%d) - %s (%d).", NumeFactiune(WarInfo[i][wFaction]), defscore, NumeFactiune(WarInfo[i][wAttacker]), atscore);
					SendToGroup(attackers, -1, stringg);
					SendToGroup(defenders, -1, stringg);
				}

				new id = CalculateBestScore(i), id2 = CalculateWorstScore(i), bestnamee[30], worstnamee[30];
					
				GetPlayerName(id, bestnamee, sizeof(bestnamee));
				GetPlayerName(id2, worstnamee, sizeof(worstnamee));
				
				format(stringg, sizeof(stringg),"{36A834}Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths).", bestnamee, ucideri[id][i]-decese[id][i], ucideri[id][i], decese[id][i], worstnamee, ucideri[id2][i]-decese[id2][i], ucideri[id2][i], decese[id2][i]);
				SendToGroup(attackers, -1, stringg);
				SendToGroup(defenders, -1, stringg);
				
				foreach(Player, j)
				{
					if((playerVariables[j][pGroup] == attackers) || (playerVariables[j][pGroup] == defenders))
					{
						format(stringg,sizeof(stringg),"{36A834}Your personal score: %d (%d kills, %d deaths).",ucideri[j][i]-decese[j][i],ucideri[j][i], decese[j][i]);
						S(j, -1,stringg);
						
						PlayerTextDrawHide(j, TimeLeftWar1[j]);
						for (new sss = 0; sss != 5; ++sss) SendDeathMessageToPlayer(j, 1001, 1001, 1001);
					}
				}
				
				WarScoreF[defenders][i] = 0;
				WarScoreF[attackers][i] = 0;
				InWar[attackers] = 0;
				InWar[defenders] = 0;
				waitwar[attackers] = 60;
				waitwar[defenders] = 60;
				
				if(winner == 1)
				{
					foreach(Player, j)
					{
						if(turfshow[j] == 1)
						{
							GangZoneHideForPlayerEx(j, Turfs[i]);
							if(attackers == 4)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0xCC000099);
							}
							if(attackers == 5)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x40863CAA);
							}
							if(attackers == 6)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x2F2F2F99);
							}
							if(attackers == 10)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x88572499);
							}
							if(attackers == 15)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x1E9999FF);
							}
							if(attackers == 16)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x000000FF);
							}
						}
					}
					DeelayWar[WarInfo[i][wFaction]] = 600;
					DeelayWar[WarInfo[i][wAttacker]] = 1800;
				}
				if(winner == 2)
				{
					DeelayWar[WarInfo[i][wFaction]] = 600;
					DeelayWar[WarInfo[i][wAttacker]] = 1800;
				}
				WarInfo[i][wTime] = 0;
				WarInfo[i][wFaction] = 0;
				WarInfo[i][wAttacker] = 0;
				worstscoreat[i] = 0;
				worstmemberat[i] = 999;
				bestscoreat[i] = 0;
				bestmemberat[i] = 999;
				worstscoredf[i] = 0;
				worstmemberdf[i] = 999;
				bestscoredf[i] = 0;
				bestmemberdf[i] = 999;
			}
		}
  		if(WarInfo[i][wTime] > 2)
		{
			foreach(Player, j)
			{
				if(IsPlayerInTurf(j, i))
				{
					if(IsPlayerInAnyVehicle(j))
					{
						if(playerVariables[j][pGroup] == attackers || playerVariables[j][pGroup] == defenders)
						{
							SS(j, COLOR_WHITE, "Nu ai voie sa folosesti vehicule pe teritoriu.", "You're not allowed to use vehicles on territory.");
							RemovePlayerFromVehicleEx(j);
							
						}
					}
				}
    			if(playerVariables[j][pGroup] == attackers || playerVariables[j][pGroup] == defenders)
				{
					if(WarInfo[i][wAttacker] == 8)
					{
						GangZoneFlashForPlayer(j, Turfs[i], COLOR_RED);
					}
					else if(WarInfo[i][wAttacker] == 9)
					{
						GangZoneFlashForPlayer(j, Turfs[i], COLOR_RED);
					}
				}
				if(IsPlayerInTurf(j, i))
				{
					if(playerVariables[j][pGroup] == attackers)
					{
						count++;
					}
				}
			}
		}
	}
 	foreach(Player, x)
	{
		if(UsingDrugs[x] == 1)
	    {
	        new pozitie2 = GetPlayerPos(x, drugposs[x][0], drugposs[x][1], drugposs[x][2]);
	        
			if(pozitie2 != pozitie2)
			{
				S(x, -1, "You failed to take the drugs.");
				KillTimer(usedrugs[x]);
				UsingDrugs[x] = 0;
				ClearAnimations(x);
				SetPlayerDrunkLevel(x, 0);
			}
		}
	
	
	    if(IsPlayerConnected(x))
       	{
			new string2[256];
       		if(playerVariables[x][pPrisonID] > 0)
       		{
                playerVariables[x][pPrisonTime]--;

				if(playerVariables[x][pPrisonTime] >= 60)
				{
					format(string2, sizeof(string2), "ELIBERAT IN: ~r~%d minute", playerVariables[x][pPrisonTime]/60);
					TextDrawSetString(jailstat[x], string2);
					TextDrawShowForPlayer(x, jailstat[x]);
				}
				else
				{
					format(string2, sizeof(string2), "ELIBERAT IN: ~r~%d secunde", playerVariables[x][pPrisonTime]);
					TextDrawSetString(jailstat[x], string2);
					TextDrawShowForPlayer(x, jailstat[x]);
				}
			}

			if(playerVariables[x][pWanted] > 0)
			{
				format(string2,256, "WANTED SCADE IN: ~r~%d minute", WantedTime[x]/60);
				TextDrawSetString(wantedscade[x], string2);
				TextDrawShowForPlayer(x, wantedscade[x]);
			}



   			if(playerVariables[x][pPrisonTime] == 0 && playerVariables[x][pPrisonID] >= 1)
            {
                playerVariables[x][pPrisonID] = 0;
                Update(x, pPrisonIDx);

                playerVariables[x][pPrisonTime] = 0;
                Update(x, pPrisonTimex);

                OnPlayerSpawn(x);

                S(x, COLOR_WHITE, "Your time is up! You have been released from jail.");
				TextDrawHideForPlayer(x, jailstat[x]);
			}
       	}
	    if(playerVariables[x][pMatsTime] >= 1)
		{
			playerVariables[x][pMatsTime]++;
		}
		if(playerVariables[x][pDrugsTime] >= 1)
		{
			playerVariables[x][pDrugsTime]++;
		}
		
		new drunk2 = GetPlayerDrunkLevel(x);
		if(drunk2 < 100)
		{
			SetPlayerDrunkLevel(x,2000);
		}
		else
		{
			if(DLlast[x] != drunk2)
			{
				new fps = DLlast[x] - drunk2;

				if((fps > 0) && (fps < 700))
				FPS2[x] = fps;
				DLlast[x] = drunk2;
			}
		}
		if(playerVariables[x][pJobDelay] >= 1)
		{
   	    	playerVariables[x][pJobDelay]--;
			if(playerVariables[x][pJobDelay] == 0) S(x, COLOR_WHITE, "Your job reload time is over.");
        }
        if(playerVariables[x][pDeelayUseDrugs] >= 1)
	    {
			playerVariables[x][pDeelayUseDrugs] -= 1;
		}
		if(playerVariables[x][pDeelayService] >= 1)
	    {
			playerVariables[x][pDeelayService] --;
		}
		if(playerVariables[x][pDeelayHeal] >= 1)
	    {
			playerVariables[x][pDeelayHeal] --;
		}
		if(playerVariables[x][pReportDeelay] >= 1)
	    {
			playerVariables[x][pReportDeelay] --;
		}
		if(playerVariables[x][pNewbie] >= 1)
	    {
			playerVariables[x][pNewbie] --;
		}
		if(playerVariables[x][pNewbieMute] >= 1)
	    {
			playerVariables[x][pNewbieMute] --;
		}
		if(playerVariables[x][pTimerSellGun] >= 1)
	    {
			playerVariables[x][pTimerSellGun] --;
		}
		if(playerVariables[x][pTimerSellMats] >= 1)
	    {
			playerVariables[x][pTimerSellMats] --;
		}
		if(playerVariables[x][pTimerSellDrugs] >= 1)
	    {
			playerVariables[x][pTimerSellDrugs] --;
		}
		if(playerVariables[x][pDeelayPay] >= 1)
	    {
			playerVariables[x][pDeelayPay] --;
		}
		if(playerVariables[x][pDeelayDice] >= 1)
	    {
			playerVariables[x][pDeelayDice] --;
		}
		if(playerVariables[x][pDeelayMechanic] >= 1)
		{
			playerVariables[x][pDeelayMechanic]--;
		}
		if(playerVariables[x][pDeelayRefill] >= 1)
		{
			playerVariables[x][pDeelayRefill]--;
		}
		if(playerVariables[x][pDeelayRepair] >= 1)
		{
			playerVariables[x][pDeelayRepair]--;
		}
		if(playerVariables[x][pNextNotification] > 0)
		{
		    playerVariables[x][pNextNotification]--;
		}
		if(playerVariables[x][pStatus] == 1)
		{
		    playerVariables[x][pConnected]++;
		}
        if(IsPlayerAFK[x] < 30)
		{
			playerVariables[x][pSeconds] += 1;
		}
   	 	if(playerVariables[x][pMuted] >= 1)
		{
      		playerVariables[x][pMuted] -= 1;
  		}
  		if(playerVariables[x][pFood] >= 1)
  		{
  			playerVariables[x][pFood] -= 1;
  		}
  		if(playerVariables[x][pDeelayDuty] >= 1)
  		{
  			playerVariables[x][pDeelayDuty] -= 1;
  		}
		if(playerVariables[x][pDeelayTransfer] >= 1)
		{
			playerVariables[x][pDeelayTransfer] -=1;
		}
		if(playerVariables[x][pSpamCount] >= 1)
		{
			playerVariables[x][pSpamCount]--;
		}
		if(playerVariables[x][pSpamCount] >= 2)
		{
	    	playerVariables[x][pMuted] += 20;
	    	playerVariables[x][pSpamCount] = 1;
			SS(x, COLOR_GREY, "Ai primit mute deoarece ai facut spam. Vei primi automat unmuted in 20 secunde.", "You have been auto-muted for spamming. You will be unmuted in 20 seconds.");
		}
  		if(WantedTime[x] > 0)
		{
			WantedTime[x]--;
			if(WantedTime[x] == 1)
			{
				if(playerVariables[x][pWanted] >= 1)
				{
					playerVariables[x][pWanted] -= 1;
					Update(x, pWantedx);

					SetPlayerWantedLevel(x, playerVariables[x][pWanted]);

					if(playerVariables[x][pWanted] >= 1)
					{
						format(szMessage, sizeof(szMessage), "You have lost a wanted level. New wanted level: %d", playerVariables[x][pWanted]);
						S(x, COLOR_YELLOW, szMessage);
						WantedTime[x] = 900;
					}
					else if(playerVariables[x][pWanted] == 0)
					{
						S(x, COLOR_YELLOW, "You have lost a wanted level. New wanted level: 0");
					}
				}
			}
		}
    	if(RobTime[x] >= 0)
		{
			RobTime[x]--;

			if(RobTime[x] == 0)
			{
			    SS(x, COLOR_TEAL, "Mergi la checkpoint pentru a ascunde banii!", "Go to the checkpoint to hide the stash.");

				SetPlayerAttachedObject(x, 2, 1550, 1, -0.004022, -0.191353, -0.034982, 158.161407, 87.838058, 0.000000, 1.000000, 1.000000, 1.000000 );
				playerVariables[x][pCheckpoint] = 69;

				new house;
				house = random(systemVariables[houseCount]);
				SetPlayerCheckpoint(x, houseVariables[house][hHouseExteriorPos][0], houseVariables[house][hHouseExteriorPos][1], houseVariables[house][hHouseExteriorPos][2], 4.0);
			}
		}
	}

    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
		if(Undercover[i] == 1)
		{
		    PlayerTextDrawShow(i, UndercoverText[i]);
		}
		else
		{
		    PlayerTextDrawHide(i, UndercoverText[i]);
		}
	 
        if(playerVariables[i][pAdminLevel] >= 1)
		{
			new reports=0, strr[128];
			foreach(Player, id)
			{
				if(strcmp(reporttext[id], "NULL", true))
				{
					reports++;
				}
			}
			if(reports > 0)
			{
				PlayerTextDrawShow(i, Reportss[i]);
				format(strr,sizeof(strr),"REPORTS: ~r~%d", reports);
				PlayerTextDrawSetString(i, Reportss[i], strr);
			}
			else if(reports == 0)
			{
				PlayerTextDrawHide(i, Reportss[i]);
			}
		}
		else
		{
			PlayerTextDrawHide(i, Reportss[i]);
		}
		
        if(IsPlayerConnected(i))
        {
            if(JucatorCautat[i] >= 0)
            {
                new tinta;
                tinta = JucatorCautat[i];

				new aaa2 = GetPlayerVirtualWorld(tinta);
				if(aaa2 == 1337 || aaa2 == 1338 || playerVariables[tinta][pAdminDuty] == 1 || WatchingTV[tinta] == 1)
				{
					if(pUseFind[i] == 1)
					{
						pUseFind[i] = 0;
					    JucatorCautat[i] = -1;
						DisablePlayerCheckpoint(i);
						
						PlayerTextDrawHide(i, findplayer[i]);
						PlayerTextDrawHide(i, findplayer2[i]);
						
						if(playerVariables[i][pLimba] == 1)
						{
							S(i,COLOR_YELLOW,"Checkpoint dezactivat. Acel admin este ocupat.");
						}
						if(playerVariables[i][pLimba] == 2)
						{
							S(i,COLOR_YELLOW,"Checkpoint disabled. That admin is on duty.");
						}
					}
				}
				else
				{
				    if(InHQ[tinta] > 0)
				    {
					    new j;
						j = InHQ[tinta];
						SetPlayerCheckpoint(i, groupVariables[j][gGroupExteriorPos][0], groupVariables[j][gGroupExteriorPos][1], groupVariables[j][gGroupExteriorPos][2], 3.0);
				    }
				    else
				    {
						new Float: x, Float: y, Float: z;
	            		GetPlayerPos(tinta, x, y, z);
	            		SetPlayerCheckpoint(i, x, y, z, 3.0);
	            	}
				}
			}
            if(GetPlayerCash(i) != GetPlayerMoney(i))
            {
                ResetMoneyBar(i);
                UpdateMoneyBar(i, GetPlayerCash(i));
            }
        }
    }
	new ora, minut, secunda;
	gettime(ora, minut, secunda);
	

	if(ora == 23 && minut == 59 && secunda == 59)
	{
		new sqlupdate[256], sqlcheck[512];

		mysql_format(handle, sqlcheck, sizeof(sqlcheck), "SELECT * FROM `players` ORDER BY `ID`");
		new Cache: jucatori = mysql_query(handle, sqlcheck);
		for(new i = 0, c = cache_get_row_count(); i < c; i++)
		{
			new id = cache_get_field_content_int(i, "ID");
			new value = random(10);
			new value2 = random(10);

			mysql_format(handle, sqlupdate, sizeof(sqlupdate), "UPDATE `players` SET `Quest`='%d', `QuestPrins`='0', `QuestValue`='0', `QuestFinalizat`='0' WHERE `ID`='%d'", value, id);
			mysql_tquery(handle, sqlupdate, "", "");
			mysql_format(handle, sqlupdate, sizeof(sqlupdate), "UPDATE `players` SET `Quest2`='%d', `Quest2Prins`='0', `Quest2Value`='0' WHERE `ID`='%d'", value2, id);
			mysql_tquery(handle, sqlupdate, "", "");
			
			foreach(Player, x)
			{
				if(id == playerVariables[x][pID])
				{
   					playerVariables[x][pQuest] = value;
 					playerVariables[x][pQuestValue] = 0;
 					playerVariables[x][pQuestFinalizat] = 0;
 					SetTimerEx("QuestChange", 500, false, "i", x);
				}
			}
		}
		cache_delete(jucatori);
	}
	if(ora == assetVariables[10][aAssetValue])
	{
		SetWorldTime(23);
	}
	else if(ora >= assetVariables[10][aAssetValue] && ora <= 23)
	{
		SetWorldTime(23);
	}
	if(ora >= 00 && ora < assetVariables[10][aAssetValue])
	{
		SetWorldTime(ora);
	}
	
	if(minut == 0 && secunda == 0)
	{
		PayDay();
	}

	if(minut == 50 && secunda == 0)
	{
		foreach(Player, x)
		{
		    if(playerVariables[x][pGroup] == 6)
		    {
				S(x, COLOR_ADMCHAT, "Acum se pot da anunturile gratuite!");
			}
		}
	}

	if(NewsTick >= 1)
		NewsTick--;

	if(DeelaySystem >= 1)
	    DeelaySystem--;


	foreach(Player,k)
	{
 		GetPlayerPos(k, PlayerPosii[k][0], PlayerPosii[k][1], PlayerPosii[k][2]);
		if(PlayerPosii[k][0] == PlayerPosii[k][3] && PlayerPosii[k][1] == PlayerPosii[k][4] && PlayerPosii[k][2] == PlayerPosii[k][5])
		{
        	IsPlayerAFK[k]++;
		}
		else
		{
	    	IsPlayerAFK[k] = 0;
		}
		PlayerPosii[k][3] = PlayerPosii[k][0];
		PlayerPosii[k][4] = PlayerPosii[k][1];
		PlayerPosii[k][5] = PlayerPosii[k][2];
	}
}

forward Update(playerid, type);
public Update(playerid, type)
{
	if(IsPlayerConnected(playerid))
	{
		new var[256];
		new playerName[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playerName, sizeof(playerName));
		{
			switch(type)
			{
				case pLevelx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Level`='%d' WHERE `username`='%s'", playerVariables[playerid][pLevel], playerName);
					mysql_query(handle ,var);
				}
				case pCashx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Cash`='%d' WHERE `username`='%s'", playerVariables[playerid][pCash], playerName);
					mysql_query(handle ,var);
				}
				case pAccountx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Account`='%d' WHERE `username`='%s'", playerVariables[playerid][pAccount], playerName);
					mysql_query(handle ,var);
				}
				case pEmailx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Email`='%s' WHERE `username`='%s'", playerVariables[playerid][pEmail], playerName);
					mysql_query(handle ,var);
				}
				case pRegistredx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Registred`='%d' WHERE `username`='%s'", playerVariables[playerid][pRegistred], playerName);
					mysql_query(handle ,var);
				}
				case pTutorialx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Tutorial`='%d' WHERE `username`='%s'", playerVariables[playerid][pTutorial], playerName);
					mysql_query(handle ,var);
				}
				case pSexx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Sex`='%d' WHERE `username`='%s'", playerVariables[playerid][pSex], playerName);
					mysql_query(handle ,var);
				}
				case pLimbax:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Limba`='%d' WHERE `username`='%s'", playerVariables[playerid][pLimba], playerName);
					mysql_query(handle ,var);
				}
				case pAgex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Age`='%d' WHERE `username`='%s'", playerVariables[playerid][pAge], playerName);
					mysql_query(handle ,var);
				}
				case pSkinx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Skin`='%d' WHERE `username`='%s'", playerVariables[playerid][pSkin], playerName);
					mysql_query(handle ,var);
				}
				case pAdminLevelx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `AdminLevel`='%d' WHERE `username`='%s'", playerVariables[playerid][pAdminLevel], playerName);
					mysql_query(handle ,var);
				}
				case pHelperLevelx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `HelperLevel`='%d' WHERE `username`='%s'", playerVariables[playerid][pHelperLevel], playerName);
					mysql_query(handle ,var);
				}
				case pGroupx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Group`='%d' WHERE `username`='%s'", playerVariables[playerid][pGroup], playerName);
					mysql_query(handle ,var);
				}
				case pGroupRankx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `GroupRank`='%d' WHERE `username`='%s'", playerVariables[playerid][pGroupRank], playerName);
					mysql_query(handle ,var);
				}
				case pFWarnsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `FWarns`='%d' WHERE `username`='%s'", playerVariables[playerid][pFWarns], playerName);
					mysql_query(handle ,var);
				}
				case pWalkieTalkiex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `WalkieTalkie`='%d' WHERE `username`='%s'", playerVariables[playerid][pWalkieTalkie], playerName);
					mysql_query(handle ,var);
				}
				case pGroupDaysx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `GroupDays`='%d' WHERE `username`='%s'", playerVariables[playerid][pGroupDays], playerName);
					mysql_query(handle ,var);
				}
				case pGroupWarnsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `GroupWarns`='%d' WHERE `username`='%s'", playerVariables[playerid][pGroupWarns], playerName);
					mysql_query(handle ,var);
				}
				case pBusyx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Busy`='%d' WHERE `username`='%s'", playerVariables[playerid][pBusy], playerName);
					mysql_query(handle ,var);
				}
				case pGiftHoursx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `GiftHours`='%d' WHERE `username`='%s'", playerVariables[playerid][pGiftHours], playerName);
					mysql_query(handle ,var);
				}
				case pLastLoginx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `LastLogin`= CURRENT_TIMESTAMP WHERE `username`='%s'", playerName);
					mysql_query(handle ,var);
				}
				case pRegDatex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `RegDate`= CURRENT_TIMESTAMP WHERE `username`='%s'", playerName);
					mysql_query(handle ,var);
				}
				case pGlassesx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Glasses`='%d' WHERE `username`='%s'", playerVariables[playerid][pGlasses], playerName);
					mysql_query(handle ,var);
				}
				case pQuestx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Quest`='%d' WHERE `username`='%s'", playerVariables[playerid][pQuest], playerName);
					mysql_query(handle ,var);
				}
				case pQuestValuex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `QuestValue`='%d' WHERE `username`='%s'", playerVariables[playerid][pQuestValue], playerName);
					mysql_query(handle ,var);
				}
				case pQuest2x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Quest2`='%d' WHERE `username`='%s'", playerVariables[playerid][pQuest2], playerName);
					mysql_query(handle ,var);
				}
				case pQuest2Valuex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Quest2Value`='%d' WHERE `username`='%s'", playerVariables[playerid][pQuest2Value], playerName);
					mysql_query(handle ,var);
				}
				case pQuest2Prinsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Quest2Prins`='%d' WHERE `username`='%s'", playerVariables[playerid][pQuest2Prins], playerName);
					mysql_query(handle ,var);
				}
				case pQuestPrinsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `QuestPrins`='%d' WHERE `username`='%s'", playerVariables[playerid][pQuestPrins], playerName);
					mysql_query(handle ,var);
				}
				case pQuestPointx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `QuestPoint`='%d' WHERE `username`='%s'", playerVariables[playerid][pQuestPoint], playerName);
					mysql_query(handle ,var);
				}
				case pSpecialSkinx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `SpecialSkin`='%d' WHERE `username`='%s'", playerVariables[playerid][pSpecialSkin], playerName);
					mysql_query(handle ,var);
				}
				case pGasx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Gas`='%d' WHERE `username`='%s'", playerVariables[playerid][pGas], playerName);
					mysql_query(handle ,var);
				}
				case pHatx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Hat`='%d' WHERE `username`='%s'", playerVariables[playerid][pHat], playerName);
					mysql_query(handle ,var);
				}
				case pWKillsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `WKills`='%d' WHERE `username`='%s'", playerVariables[playerid][pWKills], playerName);
					mysql_query(handle ,var);
				}
				case pWDeathsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `WDeaths`='%d' WHERE `username`='%s'", playerVariables[playerid][pWDeaths], playerName);
					mysql_query(handle ,var);
				}
				case pPhoneBookx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `PhoneBook`='%d' WHERE `username`='%s'", playerVariables[playerid][pPhoneBook], playerName);
					mysql_query(handle ,var);
				}
				case pFightStylex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `FightStyle`='%d' WHERE `username`='%s'", playerVariables[playerid][pFightStyle], playerName);
					mysql_query(handle ,var);
				}
				case pFishTimesx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `FishTimes`='%d' WHERE `username`='%s'", playerVariables[playerid][pFishTimes], playerName);
					mysql_query(handle ,var);
				}
				case pHiddenx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Hidden`='%d' WHERE `username`='%s'", playerVariables[playerid][pHidden], playerName);
					mysql_query(handle ,var);
				}
				case pVictimx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Victim`='%s' WHERE `username`='%s'", playerVariables[playerid][pVictim], playerName);
					mysql_query(handle ,var);
				}
				case pAccusedx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Accused`='%s' WHERE `username`='%s'", playerVariables[playerid][pAccused], playerName);
					mysql_query(handle ,var);
				}
				case pCrime1x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Crime1`='%s' WHERE `username`='%s'", playerVariables[playerid][pCrime1], playerName);
					mysql_query(handle ,var);
				}
				case pCrime2x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Crime2`='%s' WHERE `username`='%s'", playerVariables[playerid][pCrime2], playerName);
					mysql_query(handle ,var);
				}
				case pCrime3x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Crime3`='%s' WHERE `username`='%s'", playerVariables[playerid][pCrime3], playerName);
					mysql_query(handle ,var);
				}
				case pSecondsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Seconds`='%d' WHERE `username`='%s'", playerVariables[playerid][pSeconds], playerName);
					mysql_query(handle ,var);
				}
				case pCarKey1x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey1`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey1], playerName);
					mysql_query(handle ,var);
				}
				case pCarKey2x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey2`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey2], playerName);
					mysql_query(handle ,var);
				}
				case pCarKey3x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey3`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey3], playerName);
					mysql_query(handle ,var);
				}
				case pCarKey4x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey4`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey4], playerName);
					mysql_query(handle ,var);
				}
				case pCarKey5x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey5`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey5], playerName);
					mysql_query(handle ,var);
				}
				case pCarKey6x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey6`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey6], playerName);
					mysql_query(handle ,var);
				}
    			case pCarKey7x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey7`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey7], playerName);
					mysql_query(handle ,var);
				}
    			case pCarKey8x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey8`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey8], playerName);
					mysql_query(handle ,var);
				}
				case pCarKey9x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey9`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey9], playerName);
					mysql_query(handle ,var);
				}
				case pCarKey10x:
				{
					format(var, sizeof(var), "UPDATE `players` SET `CarKey10`='%d' WHERE `username`='%s'", playerVariables[playerid][pCarKey10], playerName);
					mysql_query(handle ,var);
				}
				case pRealizarix:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Realizari`='%d' WHERE `username`='%s'", playerVariables[playerid][pRealizari], playerName);
					mysql_query(handle ,var);
				}
				case pPhonex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Phone`='%d' WHERE `username`='%s'", playerVariables[playerid][pPhone], playerName);
					mysql_query(handle ,var);
				}
				case pPhoneNumberx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `PhoneNumber`='%d' WHERE `username`='%s'", playerVariables[playerid][pPhoneNumber], playerName);
					mysql_query(handle ,var);
				}
				case pStatusx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Status`='%d' WHERE `username`='%s'", playerVariables[playerid][pStatus], playerName);
					mysql_query(handle ,var);
				}
				case pLicentaCondusx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `LicentaCondus`='%d' WHERE `username`='%s'", playerVariables[playerid][pLicentaCondus], playerName);
					mysql_query(handle ,var);
				}
				case pDonatex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Donate`='%d' WHERE `username`='%s'", playerVariables[playerid][pDonate], playerName);
					mysql_query(handle ,var);
				}
				case pFinalTutorialx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `FinalTutorial`='%d' WHERE `username`='%s'", playerVariables[playerid][pFinalTutorial], playerName);
					mysql_query(handle ,var);
				}
				case pColorx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Color`='%d' WHERE `username`='%s'", playerVariables[playerid][pColor], playerName);
					mysql_query(handle ,var);
				}
				case pJobx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Job`='%d' WHERE `username`='%s'", playerVariables[playerid][pJob], playerName);
					mysql_query(handle ,var);
				}
				case pMaterialsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Materials`='%d' WHERE `username`='%s'", playerVariables[playerid][pMaterials], playerName);
					mysql_query(handle ,var);
				}
				case pDrugsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Drugs`='%d' WHERE `username`='%s'", playerVariables[playerid][pDrugs], playerName);
					mysql_query(handle ,var);
				}
				case pPremiumPointsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `PremiumPoints`='%d' WHERE `username`='%s'", playerVariables[playerid][pPremiumPoints], playerName);
					mysql_query(handle ,var);
				}
				case pFireworksx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Fireworks`='%d' WHERE `username`='%s'", playerVariables[playerid][pFireworks], playerName);
					mysql_query(handle ,var);
				}
				case pFarmTimesx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `FarmTimes`='%d' WHERE `username`='%s'", playerVariables[playerid][pFarmTimes], playerName);
					mysql_query(handle ,var);
				}
				case pFarmSkillx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `FarmSkill`='%d' WHERE `username`='%s'", playerVariables[playerid][pFarmSkill], playerName);
					mysql_query(handle ,var);
				}
				case pCreditx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Credit`='%d' WHERE `username`='%s'", playerVariables[playerid][pCredit], playerName);
					mysql_query(handle ,var);
				}
				case pQuestFinalizatx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `QuestFinalizat`='%d' WHERE `username`='%s'", playerVariables[playerid][pQuestFinalizat], playerName);
					mysql_query(handle ,var);
				}
				case pRespectPointsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `RespectPoints`='%d' WHERE `username`='%s'", playerVariables[playerid][pRespectPoints], playerName);
					mysql_query(handle ,var);
				}
				case pWarnsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Warns`='%d' WHERE `username`='%s'", playerVariables[playerid][pWarns], playerName);
					mysql_query(handle ,var);
				}
				case pRobPointsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `RobPoints`='%d' WHERE `username`='%s'", playerVariables[playerid][pRobPoints], playerName);
					mysql_query(handle ,var);
				}
				case pHeadValuex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `HeadValue`='%d' WHERE `username`='%s'", playerVariables[playerid][pHeadValue], playerName);
					mysql_query(handle ,var);
				}
				case pOreJucatex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `OreJucate`='%d' WHERE `username`='%s'", playerVariables[playerid][pOreJucate], playerName);
					mysql_query(handle ,var);
				}
				case pFactionPunishx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `FactionPunish`='%d' WHERE `username`='%s'", playerVariables[playerid][pFactionPunish], playerName);
					mysql_query(handle ,var);
				}
				case pArmsDealerSkillx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `ArmsDealerSkill`='%d' WHERE `username`='%s'", playerVariables[playerid][pArmsDealerSkill], playerName);
					mysql_query(handle ,var);
				}
				case pArmsPuncteSkillx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `ArmsPuncteSkill`='%d' WHERE `username`='%s'", playerVariables[playerid][pArmsPuncteSkill], playerName);
					mysql_query(handle ,var);
				}
				case pLicentaArmex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `LicentaArme`='%d' WHERE `username`='%s'", playerVariables[playerid][pLicentaArme], playerName);
					mysql_query(handle ,var);
				}
				case pWantedx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Wanted`='%d' WHERE `username`='%s'", playerVariables[playerid][pWanted], playerName);
					mysql_query(handle ,var);
				}
				case pMutedx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Muted`='%d' WHERE `username`='%s'", playerVariables[playerid][pMuted], playerName);
					mysql_query(handle ,var);
				}
				case pMechanicSkillx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `MechanicSkill`='%d' WHERE `username`='%s'", playerVariables[playerid][pMechanicSkill], playerName);
					mysql_query(handle ,var);
				}
				case pMechanicPctSkillx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `MechanicPctSkill`='%d' WHERE `username`='%s'", playerVariables[playerid][pMechanicPctSkill], playerName);
					mysql_query(handle ,var);
				}
				case pLicentaFlyx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `LicentaFly`='%d' WHERE `username`='%s'", playerVariables[playerid][pLicentaFly], playerName);
					mysql_query(handle ,var);
				}
				case pLicentaBoatx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `LicentaBoat`='%d' WHERE `username`='%s'", playerVariables[playerid][pLicentaBoat], playerName);
					mysql_query(handle ,var);
				}
				case pReportDeelayx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `ReportDeelay`='%d' WHERE `username`='%s'", playerVariables[playerid][pReportDeelay], playerName);
					mysql_query(handle ,var);
				}
				case pNewbiex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Newbie`='%d' WHERE `username`='%s'", playerVariables[playerid][pNewbie], playerName);
					mysql_query(handle ,var);
				}
				case pNewbieMutex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `NewbieMute`='%d' WHERE `username`='%s'", playerVariables[playerid][pNewbieMute], playerName);
					mysql_query(handle ,var);
				}
				case pReportsx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Reports`='%d' WHERE `username`='%s'", playerVariables[playerid][pReports], playerName);
					mysql_query(handle ,var);
				}
				case pPizzaSkillx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `PizzaSkill`='%d' WHERE `username`='%s'", playerVariables[playerid][pPizzaSkill], playerName);
					mysql_query(handle ,var);
				}
				case pPizzaPctx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `PizzaPct`='%d' WHERE `username`='%s'", playerVariables[playerid][pPizzaPct], playerName);
					mysql_query(handle ,var);
				}
				case pFishSkillx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `FishSkill`='%d' WHERE `username`='%s'", playerVariables[playerid][pFishSkill], playerName);
					mysql_query(handle ,var);
				}
				case pTruckSkillx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `TruckSkill`='%d' WHERE `username`='%s'", playerVariables[playerid][pTruckSkill], playerName);
					mysql_query(handle ,var);
				}
				case pTruckPctx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `TruckPct`='%d' WHERE `username`='%s'", playerVariables[playerid][pTruckPct], playerName);
					mysql_query(handle ,var);
				}
				case pPrisonIDx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `PrisonID`='%d' WHERE `username`='%s'", playerVariables[playerid][pPrisonID], playerName);
					mysql_query(handle ,var);
				}
				case pPrisonTimex:
				{
					format(var, sizeof(var), "UPDATE `players` SET `PrisonTime`='%d' WHERE `username`='%s'", playerVariables[playerid][pPrisonTime], playerName);
					mysql_query(handle ,var);
				}
				case pPasswordx:
				{
					format(var, sizeof(var), "UPDATE `players` SET `Password`='%s' WHERE `username`='%s'", playerVariables[playerid][pPassword], playerName);
					mysql_query(handle ,var);
				}
			}
		}
	}
}
PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

	


stock SendSplitMessage(playerid, color, final[])
{
    new len = strlen(final), _iL = len / EX_SPLITLENGTHH;
		
	if( ( len % EX_SPLITLENGTHH ) ) _iL++;
	new _Line[EX_SPLITLENGTHH+5];
	new _:_i@Index;
	while( _i@Index < _iL )
	{
		if( _i@Index == 0 )
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );
		else
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );

		if( _iL > 1 )
		{
			if( _i@Index > 0 )
			{
				format( _Line, sizeof _Line, "... %s", _Line );
			}
		}
		S(playerid, color, _Line);
		_i@Index++;
	}
    return 1;
}

stock CalculateBestScore(turfid)
{
    new bestid;
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0)
    {
        new bestscore, group1 = WarInfo[turfid][wAttacker], group2 = WarInfo[turfid][wFaction];
            
        foreach(Player, i)
        {
            if(group1 == playerVariables[i][pGroup] || group2 == playerVariables[i][pGroup])
            {
                new score;
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score >= bestscore)
                {
                    bestscore = score;
                    bestid = i;
                }
            }
        }
    }
	return bestid;
}

stock CalculateWorstScore(turfid)
{
    new bestid;
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0)
    {
        new bestscore, group1 = WarInfo[turfid][wAttacker], group2 = WarInfo[turfid][wFaction];

        foreach(Player, i)
        {
            if(group1 == playerVariables[i][pGroup] || group2 == playerVariables[i][pGroup])
            {
                new score;
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score <= bestscore)
                {
                    bestscore = score;
                    bestid = i;
                }
            }
        }
    }
    return bestid;
}	
stock CalculeazaTimp(secunde)
{
	new time = secunde;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string,sizeof(string),"%02d:%02d" ,minute, secunde2);
	return string;
}
	
stock GetTeamZoneColor(teamid)
{
    switch(teamid)
    {
        case 8: return 0x40863CAA;
        case 9: return 0xBD1CDEC8;
    }
    return -1;
}
stock NumeFactiune(id)
{
	new ftexst[35];
	switch(id)
	{
		case 0: ftexst = "Civilian";
		case 1: ftexst = "Los Santos Police Department";
		case 2: ftexst = "FBI";
		case 3: ftexst = "Paramedic Department";
		case 4: ftexst = "Hitman Agency";
		case 5: ftexst = "School Instructors";
		case 6: ftexst = "News Reporters";
		case 7: ftexst = "Taxi LS";
		case 8: ftexst = "Grove Street";
		case 9: ftexst = "Ballas";
	}
	return ftexst;
}

stock Findcar()
{
	new x = masini+1;
	return x;
}


stock getEmptySeat(vehicleid)
{
	new i, free;
	for(i=0; i<GetMaxSeats(vehicleid); i++)
	{
		free = i;
		foreach(Player, x)
		{
			if(GetPlayerVehicleID(x) == vehicleid && GetPlayerVehicleSeat(x) == i) free = -1;
		}
		if(free!=-1) return i;
	}
	return -1;
}
stock GetMaxSeats(vehicleid)
{
	return MaxSeats[(GetVehicleModel(vehicleid) - 400)];
}
stock checkVehicleSeat(vehicleid, seatid)
{
	foreach(Player, x)
	{
	    if(GetPlayerVehicleID(x) == vehicleid && GetPlayerVehicleSeat(x) == seatid) return 1;
	}
	return 0;
}
	
getPlayerBusinessID(const playerid)
{
	new x;
	    
    while(x < MAX_BUSINESSES)
	{
		if(strlen(businessVariables[x][bOwner]) >= 1)
		{
	        if(!strcmp(businessVariables[x][bOwner], playerVariables[playerid][pUsername], true))
			{
				return x;
			}
		}
		x++;
	}
    return 0;
}
getPlayerHouseID(playerid)
{
	new x;

    while(x < MAX_HOUSES)
	{
		if(strlen(houseVariables[x][hHouseOwner]) >= 1)
		{
	        if(!strcmp(houseVariables[x][hHouseOwner], playerVariables[playerid][pUsername], true))
			{
				return x;
			}
		}
		x++;
	}
    return 0;
}


stock businessTypeMessages(const businessid, const playerid)
{
	switch(businessVariables[businessid][bType])
	{
		case 1:
		{
			S(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /balance, /transfer, /withdraw, /deposit");
		}
		case 2:
		{
			S(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /buy");
			
			if(playerVariables[playerid][pFish] >= 1)
			{
				new string[256];
				
	   			GivePlayerCash(playerid, playerVariables[playerid][pFishPrice]);

				if(playerVariables[playerid][pLimba] == 1)
				{
					format(string,sizeof(string),"(+) Ai vandut pestele pentru $%s.", NumberFormat(playerVariables[playerid][pFishPrice]));
					S(playerid, COLOR_ATTACK, string);
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					format(string,sizeof(string),"(+) You sold the fish for $%s.", NumberFormat(playerVariables[playerid][pFishPrice]));
					S(playerid, COLOR_ATTACK, string);
				}

				playerVariables[playerid][pFishPrice] = 0;
				playerVariables[playerid][pFish] = 0;
				
				playerVariables[playerid][pFishTimes]++;
				Update(playerid, pFishTimesx);
				
				if(playerVariables[playerid][pQuest] == 5 && playerVariables[playerid][pQuestFinalizat] == 0)
				{
					playerVariables[playerid][pQuestValue] ++;
					Update(playerid, pQuestValuex);

					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string, sizeof(string), "Progres pentru misiunea [Vinde %d pesti]: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string, sizeof(string), "Quest [Sell %d fishes]: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}
				}
				
    			if(playerVariables[playerid][pFishTimes] == 25)
		        {
		            playerVariables[playerid][pFishSkill] = 2;
		        	Update(playerid, pFishSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 2 la job-ul 'Fisher'.", "Congratulations! Now you have skill 2 on the Fisher job.");
		        }
		        if(playerVariables[playerid][pFishTimes] == 50)
		        {
		            playerVariables[playerid][pFishSkill] = 3;
		        	Update(playerid, pFishSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 3 la job-ul 'Fisher'.", "Congratulations! Now you have skill 3 on the Fisher job.");
		        }
		        if(playerVariables[playerid][pFishTimes] == 105)
		        {
		            playerVariables[playerid][pFishSkill] = 4;
		        	Update(playerid, pFishSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 4 la job-ul 'Fisher'.", "Congratulations! Now you have skill 4 on the Fisher job.");
		        }
		        if(playerVariables[playerid][pFishTimes] == 175)
		        {
		            playerVariables[playerid][pFishSkill] = 5;
		        	Update(playerid, pFishSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 5 la job-ul 'Fisher'.", "Congratulations! Now you have skill 5 on the Fisher job.");
		        }
		        if(playerVariables[playerid][pFishTimes] == 250)
		        {
		            playerVariables[playerid][pFishSkill] = 6;
		        	Update(playerid, pFishSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 6 la job-ul 'Fisher'.", "Congratulations! Now you have skill 6 on the Fisher job.");
		        }
		        
            	if(playerVariables[playerid][pQuest] == 5 && playerVariables[playerid][pQuestValue] == playerVariables[playerid][pQuestPrins] && playerVariables[playerid][pQuestFinalizat] == 0)
		  		{
				    if(playerVariables[playerid][pLimba] == 1)
				    {
						format(string, sizeof(string), "Misiunea [Vinde %d pesti] a fost terminata!", playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
						format(string, sizeof(string), "Quest [Sell %d fishes] was finished!", playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}

					playerVariables[playerid][pRespectPoints] ++;
					Update(playerid, pRespectPointsx);
					
					playerVariables[playerid][pQuestPoint] ++;
					Update(playerid, pQuestPointx);
					
					playerVariables[playerid][pQuestFinalizat] = 1;
					Update(playerid, pQuestFinalizatx);

		            new value = 5000 * playerVariables[playerid][pLevel];
		            GivePlayerCash(playerid, value);

					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
						S(playerid, COLOR_YELLOW, string);
					}
					
					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Vinde %d pesti] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[playerid][pUsername], playerVariables[playerid][pID], playerVariables[playerid][pQuestPrins], NumberFormat(value), playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);
	  			}
			}
		}
		case 3:
		{
			S(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /buygun");
		}
		case 4:
	 	{
			S(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /buytoys");
		}
		case 5:
	 	{
			S(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /buyfood");
			
			if(playerVariables[playerid][pFaina] >= 1)
			{
			    new money, faina = playerVariables[playerid][pFaina], string[256];
			    
				if(playerVariables[playerid][pFarmSkill] == 1)
	       		{
					money = 7000 + faina*500;
				}
				else if(playerVariables[playerid][pFarmSkill] == 2)
	       		{
					money = 10000 + faina*500;
				}
				else if(playerVariables[playerid][pFarmSkill] == 3)
	       		{
					money = 14000 + faina*500;
				}
				else if(playerVariables[playerid][pFarmSkill] == 4)
	       		{
					money = 16000 + faina*500;
				}
				else if(playerVariables[playerid][pFarmSkill] == 5)
	       		{
					money = 18000 + faina*500;
				}
				else if(playerVariables[playerid][pFarmSkill] >= 6)
	       		{
					money = 20000 + faina*500;
   				}
   				
   				GivePlayerCash(playerid, money);

				if(playerVariables[playerid][pLimba] == 1)
				{
					format(string,sizeof(string),"(+) Ai vandut un sac de faina pentru $%s.", NumberFormat(money));
					S(playerid, COLOR_ATTACK, string);
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					format(string,sizeof(string),"(+) You sold the flour bag for $%s.", NumberFormat(money));
					S(playerid, COLOR_ATTACK, string);
				}
				
				playerVariables[playerid][pFaina] = 0;

				playerVariables[playerid][pFarmTimes]++;
				Update(playerid, pFarmTimesx);
				
    			if(playerVariables[playerid][pQuest] == 8 && playerVariables[playerid][pQuestFinalizat] == 0)
				{
					playerVariables[playerid][pQuestValue] ++;
					Update(playerid, pQuestValuex);

					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string, sizeof(string), "Progres pentru misiunea [Vinde %d saci de faina]: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string, sizeof(string), "Quest [Sell %d flour bags]: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}
				}
				
				if(playerVariables[playerid][pFarmTimes] == 25)
		        {
		            playerVariables[playerid][pFarmSkill] = 2;
		        	Update(playerid, pFarmSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 2 la job-ul 'Farmer'.", "Congratulations! Now you have skill 2 on the Farmer job.");
		        }
		        if(playerVariables[playerid][pFarmTimes] == 50)
		        {
		            playerVariables[playerid][pFarmSkill] = 3;
		        	Update(playerid, pFarmSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 3 la job-ul 'Farmer'.", "Congratulations! Now you have skill 3 on the Farmer job.");
		        }
		        if(playerVariables[playerid][pFarmTimes] == 105)
		        {
		            playerVariables[playerid][pFarmSkill] = 4;
		        	Update(playerid, pFarmSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 4 la job-ul 'Farmer'.", "Congratulations! Now you have skill 4 on the Farmer job.");
		        }
		        if(playerVariables[playerid][pFarmTimes] == 175)
		        {
		            playerVariables[playerid][pFarmSkill] = 5;
		        	Update(playerid, pFarmSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 5 la job-ul 'Farmer'.", "Congratulations! Now you have skill 5 on the Farmer job.");
		        }
		        if(playerVariables[playerid][pFarmTimes] == 250)
		        {
		            playerVariables[playerid][pFarmSkill] = 6;
		        	Update(playerid, pFarmSkillx);
		        	SS(playerid, COLOR_YELLOW, "Felicitari! Acum ai skill 6 la job-ul 'Farmer'.", "Congratulations! Now you have skill 6 on the Farmer job.");
		  		}
		  		
      			if(playerVariables[playerid][pQuest] == 8 && playerVariables[playerid][pQuestValue] == playerVariables[playerid][pQuestPrins] && playerVariables[playerid][pQuestFinalizat] == 0)
		  		{
				    if(playerVariables[playerid][pLimba] == 1)
				    {
						format(string, sizeof(string), "Misiunea [Vinde %d saci de faina] a fost terminata!", playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
						format(string, sizeof(string), "Quest [Sell %d flour bags] was finished!", playerVariables[playerid][pQuestPrins]);
						S(playerid, COLOR_YELLOW, string);
					}

					playerVariables[playerid][pRespectPoints] ++;
					Update(playerid, pRespectPointsx);

					playerVariables[playerid][pQuestPoint] ++;
					Update(playerid, pQuestPointx);
					
					playerVariables[playerid][pQuestFinalizat] = 1;
					Update(playerid, pQuestFinalizatx);

		            new value = 5000 * playerVariables[playerid][pLevel];
		            GivePlayerCash(playerid, value);

					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
						S(playerid, COLOR_YELLOW, string);
					}

					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Vinde %d saci de faina] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[playerid][pUsername], playerVariables[playerid][pID], playerVariables[playerid][pQuestPrins], NumberFormat(value), playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);
	  			}
   			}
		}
		case 6:
		{
			S(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /clothes, /buyglasses, /buyhat");
		}
		case 7:
		{
			S(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /buydrink");
		}
		case 8:
		{
			S(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /dice");
		}
		case 9:
		{
			S(playerid, COLOR_WHITE, "Welcome! The commands of this business are as follows: /buyfightstyle");
		}
	}
	return 1;
}
stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
    return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}


stock GetOnLinePlayers()
{
    new OnLine;
    for(new i, g = GetMaxPlayers(); i < g; i++)
        if(IsPlayerConnected(i))
            OnLine++;
    return OnLine;
}
stock GetPlayersLms()
{
    new OnLine;
    for(new i, g = GetMaxPlayers(); i < g; i++)
        if(IsPlayerInRangeOfPoint(i, 200.0, -1403.0852,988.6870,1024.0004))
            OnLine++;
    return OnLine;
}


stock GetPlayerID(const name[])
{
    foreach(Player, i)
    {
        if(!IsPlayerConnected(i)) continue;
        if(!strcmp(GetName(i), name))
            return i;
    }
    return INVALID_PLAYER_ID;
}
stock saveAsset(const id)
{
	if(strlen(assetVariables[id][aAssetName]) >= 1)
	{
		mysql_format(handle, szLargeString, sizeof(szLargeString), "UPDATE assets SET assetValue = '%d' WHERE assetID = '%d'", assetVariables[id][aAssetValue], id);
		mysql_query(handle, szLargeString);
	}
	return 1;
}
stock saveJobs(const id)
{
	if(strlen(jobVariables[id][jJobName]) >= 1)
	{
	    format(szLargeString, sizeof(szLargeString), "UPDATE jobs SET jobPositionX = '%f', jobPositionY = '%f', jobPositionZ = '%f'", jobVariables[id][jJobPosition][0], jobVariables[id][jJobPosition][1], jobVariables[id][jJobPosition][2]);
		format(szLargeString, sizeof(szLargeString), "%s, jobType = '%d' WHERE jobID = '%d'", szLargeString, jobVariables[id][jJobType], id);
		mysql_query(handle, szLargeString);
	}
	else
	{
	    return false;
	}
	return 1;
}



stock saveVehicle(const id)
{
	if(vehicleVariables[id][vVehicleModelID] >= 1)
	{
	    new queryString[255];

	    GetVehiclePos(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2]);
	    GetVehicleZAngle(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleRotation]);

	    format(queryString, sizeof(queryString), "UPDATE vehicles SET vehicleModelID = '%d', vehiclePosX = '%f', vehiclePosY = '%f', vehiclePosZ = '%f', vehiclePosRotation = '%f', vehicleGroup = '%d', vehicleCol1 = '%d', vehicleCol2 = '%d' WHERE vehicleID = '%d'", vehicleVariables[id][vVehicleModelID],	vehicleVariables[id][vVehiclePosition][0],
		vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2], vehicleVariables[id][vVehicleRotation], vehicleVariables[id][vVehicleGroup], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1], id);
		mysql_query(handle, queryString);
	}
	return 1;
}
IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

stock RandomChange( rare, most, probability )
{
    new NMB = random( probability ) ? most : rare;
    return NMB;
}
stock randomEx( const r_min, const r_max )
{
    new r_rand = random( r_max - r_min) + r_min;
    return r_rand;
}



stock Decimal(cash)
{
    new str[30];
    if(cash >= 0)
    {
        format(str, sizeof(str), "%d", cash);
        if(1000 <= cash < 10000) strins(str, ",", 1, sizeof(str));
        else if(10000 <= cash < 100000) strins(str, ",", 2, sizeof(str));
        else if(100000 <= cash < 1000000) strins(str, ",", 3, sizeof(str));
        else if(1000000 <= cash < 10000000) { strins(str, ",", 1, sizeof(str)); strins(str, ",", 5, sizeof(str)); }
        else if(10000000 <= cash < 100000000) { strins(str, ",", 2, sizeof(str)); strins(str, ",", 6, sizeof(str)); }
        else if(100000000 <= cash < 1000000000) { strins(str, ",", 3, sizeof(str)); strins(str, ",", 7, sizeof(str)); }
        else if(cash >= 1000000000) { strins(str, ",", 1, sizeof(str)); strins(str, ",", 5, sizeof(str)); strins(str, ",", 9, sizeof(str)); }
    }
    else
    {
        format(str, sizeof(str), "-%d", cash-(cash*2));
        if(-1000 >= cash > -10000) strins(str, ",", 2, sizeof(str));
        else if(-10000 >= cash > -100000) strins(str, ",", 3, sizeof(str));
        else if(-100000 >= cash > -1000000) strins(str, ",", 4, sizeof(str));
        else if(-1000000 >= cash > -10000000) { strins(str, ",", 2, sizeof(str)); strins(str, ",", 6, sizeof(str)); }
        else if(-10000000 >= cash > -100000000) { strins(str, ",", 3, sizeof(str)); strins(str, ",", 7, sizeof(str)); }
        else if(-100000000 >= cash > -1000000000) { strins(str, ",", 4, sizeof(str)); strins(str, ",", 8, sizeof(str)); }
        else if(cash <= -1000000000) { strins(str, ",", 2, sizeof(str)); strins(str, ",", 6, sizeof(str)); strins(str, ",", 10, sizeof(str));}
    }
    return str;
}

stock saveHouse(const id)
{
	if(strlen(houseVariables[id][hHouseOwner]) >= 1)
	{
		mysql_format(handle, szLargeString, sizeof(szLargeString), "UPDATE houses SET houseExteriorPosX = '%f', houseExteriorPosY = '%f', houseExteriorPosZ = '%f', houseInteriorPosX = '%f', houseInteriorPosY = '%f', houseInteriorPosZ = '%f'", houseVariables[id][hHouseExteriorPos][0], houseVariables[id][hHouseExteriorPos][1], houseVariables[id][hHouseExteriorPos][2], houseVariables[id][hHouseInteriorPos][0], houseVariables[id][hHouseInteriorPos][1], houseVariables[id][hHouseInteriorPos][2]);
		mysql_format(handle, szLargeString, sizeof(szLargeString), "%s, housePrice = '%d', houseOwner = '%e', houseLocked = '%d', houseInterior = '%d', houseDescription = '%e', houseRent = '%d', houseMoney = '%d', houseSize = '%d' WHERE houseID = '%d'", szLargeString, houseVariables[id][hHousePrice], houseVariables[id][hHouseOwner], houseVariables[id][hHouseLocked], houseVariables[id][hHouseInterior], houseVariables[id][hDescription], houseVariables[id][hRent], houseVariables[id][hMoney],
		houseVariables[id][hSize], id);
		mysql_query(handle, szLargeString);
	}
	else
	{
	    return false;
	}
	return 1;
}






stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius)
{
	new Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}
stock doesVehicleExist(const vehicleid)
{
    if(GetVehicleModel(vehicleid) >= 400)
	{
		return 1;
	}
	return 0;
}
stock GetClosestVehicle(playerid, exception = INVALID_VEHICLE_ID)
{
    new Float:Distance2,target = -1;

    for(new v; v < MAX_VEHICLES; v++) if(doesVehicleExist(v))
	{
        if(v != exception && (target < 0 || Distance2 > GetDistancePlayerVeh(playerid, v)))
		{
            target = v;
            Distance2 = GetDistancePlayerVeh(playerid, v);
        }
    }
    return target;
}
stock GetDistancePlayerVeh(playerid, veh)
{
	new Float:Floats[7];

	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));

	return floatround(Floats[6]);
}


stock GetSpeed(playerid)
{
    new Float:ST[3];
    GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    return floatround(1.61*floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 100.3);
}
stock IsVehicleOccupied(vehicleid)
{
	foreach(Player, i)
	{
		if( IsPlayerInVehicle( i, vehicleid ) ) return 1;
	}
	return 0;
}
stock IsADmvCar(vehicleid)
{
	if(vehicleVariables[vehicleid][vVehicleDMV] == 1) return 1;
	else return 0;
}

stock IsARentCar(vehicleid)
{
	if(vehicleVariables[vehicleid][vVehicleRentCar] == 1) return 1;
	else return 0;
}
stock saveGroup(const id)
{
	if(strlen(groupVariables[id][gGroupName]) >= 1)
	{
		mysql_format(handle, szLargeString, sizeof(szLargeString), "UPDATE groups SET groupName = '%s', groupHQExteriorPosX = '%f', groupHQExteriorPosY = '%f', groupHQExteriorPosZ = '%f'", groupVariables[id][gGroupName], groupVariables[id][gGroupExteriorPos][0], groupVariables[id][gGroupExteriorPos][1], groupVariables[id][gGroupExteriorPos][2]);
		mysql_format(handle, szLargeString, sizeof(szLargeString), "%s, groupHQInteriorID = '%d', groupHQLockStatus = '%d', groupHQInteriorPosX = '%f', groupHQInteriorPosY = '%f', groupHQInteriorPosZ = '%f', groupMOTD = '%s'", szLargeString, groupVariables[id][gGroupHQInteriorID], groupVariables[id][gGroupHQLockStatus], groupVariables[id][gGroupInteriorPos][0], groupVariables[id][gGroupInteriorPos][1], groupVariables[id][gGroupInteriorPos][2], groupVariables[id][gGroupMOTD]);
		mysql_format(handle, szLargeString, sizeof(szLargeString), "%s, groupRankName1 = '%s', groupRankName2 = '%s', groupRankName3 = '%s', groupRankName4 = '%s', groupRankName5 = '%s', groupRankName6 = '%s', groupRankName7 = '%s'", szLargeString, groupVariables[id][gGroupRankName1], groupVariables[id][gGroupRankName2], groupVariables[id][gGroupRankName3], groupVariables[id][gGroupRankName4], groupVariables[id][gGroupRankName5], groupVariables[id][gGroupRankName6], groupVariables[id][gGroupRankName7]);
		mysql_format(handle, szLargeString, sizeof(szLargeString), "%s, Materials = '%d', Money = '%d', Drugs = '%d'", szLargeString, groupVariables[id][gMaterials], groupVariables[id][gMoney], groupVariables[id][gDrugs]);
		mysql_format(handle, szLargeString, sizeof(szLargeString), "%s, groupSafePosX = '%f', groupSafePosY = '%f', groupSafePosZ = '%f', groupType = '%d', groupSlots = '%d', groupLevel = '%d' WHERE groupID = '%d'", szLargeString, groupVariables[id][gSafePos][0], groupVariables[id][gSafePos][1], groupVariables[id][gSafePos][2], groupVariables[id][gGroupType], groupVariables[id][gSlots], groupVariables[id][gLevel], id);
		mysql_query(handle, szLargeString);
	}
	else
	{
		return 0;
	}
	return 1;

}
stock saveBusiness(const id)
{
	if(strlen(businessVariables[id][bOwner]) >= 1)
	{
		mysql_format(handle, szLargeString, sizeof(szLargeString), "UPDATE businesses SET businessExteriorX = '%f', businessExteriorY = '%f', businessExteriorZ = '%f', businessInteriorX = '%f', businessInteriorY = '%f', businessInteriorZ = '%f'", businessVariables[id][bExteriorPos][0], businessVariables[id][bExteriorPos][1], businessVariables[id][bExteriorPos][2], businessVariables[id][bInteriorPos][0], businessVariables[id][bInteriorPos][1], businessVariables[id][bInteriorPos][2]);
 		mysql_format(handle, szLargeString, sizeof(szLargeString), "%s, businessName = '%s', businessFee = '%d', businessLock = '%d', businessVault = '%d', businessPrice = '%d', businessType = '%d', businessInterior = '%d' WHERE businessID = '%d'", szLargeString, businessVariables[id][bName], businessVariables[id][bFee], businessVariables[id][bLocked], businessVariables[id][bVault], businessVariables[id][bPrice], businessVariables[id][bType], businessVariables[id][bInterior], id);
		mysql_query(handle, szLargeString);
	}
	else
	{
	    return false;
	}
	return 1;
}




stock showId(playerid, targetid)
{
    if(playerVariables[playerid][pAdminLevel] >= 1)
	{
	    if(IsPlayerAFK[targetid])
    	{
    		if(playerVariables[targetid][pGroup] > 0)
			{
  				format(szMessage, sizeof(szMessage), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d - AFK for %d seconds",targetid, GetName(targetid), playerVariables[targetid][pLevel], groupVariables[playerVariables[targetid][pGroup]][gGroupName], playerVariables[targetid][pGroupRank], GetPlayerPing(targetid), FPS2[targetid], IsPlayerAFK[targetid]);
				S(playerid, COLOR_WHITE, szMessage);
			}
			else
			{
				format(szMessage, sizeof(szMessage), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d - AFK for %d seconds",targetid, GetName(targetid) ,playerVariables[targetid][pLevel], GetPlayerPing(targetid), FPS2[targetid], IsPlayerAFK[targetid]);
				S(playerid, COLOR_WHITE, szMessage);
			}
		}
		else
		{
			if(playerVariables[targetid][pGroup] > 0)
			{
				format(szMessage, sizeof(szMessage), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d",targetid, GetName(targetid), playerVariables[targetid][pLevel], groupVariables[playerVariables[targetid][pGroup]][gGroupName], playerVariables[targetid][pGroupRank], GetPlayerPing(targetid), FPS2[targetid]);
				S(playerid, COLOR_WHITE, szMessage);
			}
			else
			{
				format(szMessage, sizeof(szMessage), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d",targetid, GetName(targetid) ,playerVariables[targetid][pLevel], GetPlayerPing(targetid), FPS2[targetid]);
				S(playerid, COLOR_WHITE, szMessage);
			}
		}
	}
	else
	{
	    if(playerVariables[targetid][pGroup] > 0)
		{
			format(szMessage, sizeof(szMessage), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d",targetid, GetName(targetid), playerVariables[targetid][pLevel], groupVariables[playerVariables[targetid][pGroup]][gGroupName], playerVariables[targetid][pGroupRank], GetPlayerPing(targetid), FPS2[targetid]);
			S(playerid, COLOR_WHITE, szMessage);
		}
		else
		{
			format(szMessage, sizeof(szMessage), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d",targetid, GetName(targetid) ,playerVariables[targetid][pLevel], GetPlayerPing(targetid), FPS2[targetid]);
			S(playerid, COLOR_WHITE, szMessage);
		}
	}
	return 1;
}

stock IsPlayerInRangeOfPlayer(playerid, playerid2, Float: radius)
{
	new Float:Floats[3];

	GetPlayerPos(playerid2, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}
stock BanCheck(playerid)
{
	new name[30], playerip[16], admin[30], reason[128], ip[16], permanent, string[256], qstr[612], time, date[6];

	GetPlayerIp(playerid, playerip, sizeof(playerip));
	
 	format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'", GetName(playerid));
    new Cache: banuri = mysql_query(handle, qstr);
    if(cache_get_row_count() > 0)
    {
        cache_get_field_content(0, "PlayerName", name, handle, 30);
		cache_get_field_content(0, "AdminName", admin, handle, 30);
		cache_get_field_content(0, "Reason", reason, handle, 128);
    	cache_get_field_content(0, "IP", ip, handle, 16);
    	permanent                    	= cache_get_field_content_int(0, "Permanent");
    	time                            = cache_get_field_content_int(0, "Time");

	    if(gettime() < time || permanent > 0)
	    {
	        if(permanent > 0)
	        {
	            format(string,sizeof(string),"This account (%s) is banned!", GetName(playerid));
	    		SendClientMessage(playerid, COLOR_RED, string);
	    		format(string,sizeof(string),"Banned by: %s, reason: %s.", admin, reason);
	    		S(playerid, COLOR_GENANNOUNCE, string);
	    		S(playerid, COLOR_GENANNOUNCE, "This is a permanent ban.");
        		GameTextForPlayer(playerid, "Banned", 5000, 2);
        		SetTimerEx("KickPublic", 1000, 0, "d", playerid);
			}
			else
			{
		    	format(string,sizeof(string),"This account (%s) is banned!", GetName(playerid));
		    	S(playerid, COLOR_RED, string);
		    	
		    	format(string,sizeof(string),"Banned by: %s, reason: %s.", admin, reason);
		    	SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
		    	
   				TimestampToDate(time, date[0], date[1], date[2], date[3], date[4], date[5], 2);
   				
   				format(string,sizeof(string),"Ban will expire on %02d.%02d.%02d-%02d:%02d:%02d.", date[2], date[1], date[0], date[3], date[4], date[5]);
   				S(playerid, COLOR_GENANNOUNCE, string);
            	GameTextForPlayer(playerid, "Banned", 5000, 2);
				SetTimerEx("KickPublic", 1000, 0, "d", playerid);
			}
		}
		else
		{
	    	new str2[128];
	    	mysql_format(handle, str2, sizeof(str2), "UPDATE bans SET `Active`='0' WHERE `PlayerName`='%s'", name);
  			mysql_tquery(handle, str2, "","");
		}
	}
	cache_delete(banuri);
	return 1;
}

stock PlayerPlaySoundEx(soundid, Float:x, Float:y, Float:z)
{
	foreach(Player, i)
	{
		if(IsPlayerInRangeOfPoint(i, 15.0, x, y, z))
		PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}

stock nearByMessage(playerid, color, string[], Float: Distance3 = 12.0)
{
	new Float: nbCoords[3];

	GetPlayerPos(playerid, nbCoords[0], nbCoords[1], nbCoords[2]);

	foreach(Player, i)
	{
 		if(IsPlayerInRangeOfPoint(i, Distance3, nbCoords[0], nbCoords[1], nbCoords[2]) && (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)))
 		{
			S(i, color, string);
		}
	}
	return 1;
}
stock SendToGroup(groupid, colour, string[])
{
	if(groupid > 0)
	{
		foreach(Player, x)
		{
			if(playerVariables[x][pGroup] == groupid)
			{
			    if(playerVariables[x][pStatus] == 1)
			    {
					S(x, colour, string);
				}
			}
		}
	}
	return 1;
}
stock sendDepartmentMessage(const colour, const string[])
{
	foreach(Player, x)
	{
	    if(groupVariables[playerVariables[x][pGroup]][gGroupType] == 1 || groupVariables[playerVariables[x][pGroup]][gGroupType] == 3)
		{
		    if(playerVariables[x][pStatus] == 1)
		    {
     			S(x, colour, string);
     		}
		}
	}
	return 1;
}
stock SendLeaderMessage(string[], color)
{
    foreach(Player, x)
    {
        if(playerVariables[x][pGroupRank] == 7 || playerVariables[x][pAdminLevel] >= 1)
        {
            if(playerVariables[x][pStatus] == 1)
		    {
	        	if(toglc[x] == 0)
				{
	  				if(playerVariables[x][pAdminLevel] >= 1)
					{
						S(x, color, string);
					}
					else if(playerVariables[x][pHelperLevel] >= 1)
					{
						S(x, color, string);
					}
				}
			}
        }
    }
}
public OOCNews(color, string[])
{
	foreach(Player, i)
	{
	    if(tognews[i] != 1)
	    {
			SendSplitMessage(i, color, string);
		}
	}
	return 1;
}


stock SetPlayerPosEx(playerid, Float: x, Float: y, Float: z, interior = -1, vw = -1)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(!vehicleid)
	{
	    SetPlayerPos(playerid, x, y, z + 0.3);
		if(interior != -1)	LinkVehicleToInterior(vehicleid, interior);
		if(vw != -1) SetPlayerVirtualWorld(playerid, vw);
 	}
	else
	{
	    SetVehiclePos(vehicleid, x, y, z + 0.2);
		if(interior != -1) LinkVehicleToInterior(vehicleid, interior);
		if(vw != -1) SetPlayerVirtualWorld(playerid, vw);

		foreach(Player, i)
		{
		    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
		    {
		    	if(interior != -1) SetPlayerInterior(i, interior);
		    	if(vw != -1) SetPlayerVirtualWorld(i, vw);
		    }
		}
	}
}
CMD:pb(playerid, params[])
{
	return cmd_putbelt(playerid, params);
}
CMD:putbelt(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerInVehicle(playerid, vehicleid))
 	{
 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
   		{
   			if(IsABike(vehicleid) || IsAFaggio(vehicleid) || IsAMotoare(vehicleid) || IsAPlane(vehicleid) || IsABoat(vehicleid)) return S(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda in acest vehicul.");
   		    if(playerVariables[playerid][pBelt] == 0)
   		    {
   		    	playerVariables[playerid][pBelt] = 1;
   		    	format(szMessage, sizeof(szMessage), "* %s has attached a seatbelt.", GetName(playerid));
				nearByMessage(playerid, COLOR_PURPLE, szMessage);
   		    }
   		    else return S(playerid, COLOR_WHITE, "Ai deja centura pusa!");
		}
	}
	else return S(playerid, COLOR_GREY, "You can't use this command while in a vehicle.");
	return 1;
}


CMD:trunk(playerid, params[])
{
	Trunk(playerid);
	return 1;
}
CMD:hood(playerid, params[])
{
	Hood(playerid);
	return 1;
}
CMD:light(playerid, params[])
{
	if(GetPlayerVehicleSeat(playerid) != 0)
		return S(playerid, COLOR_ERROR, "Error: You are not in the drivers seat.");

	Light(playerid);
	return 1;
}
CMD:engine(playerid, params[])
{
    Engine(playerid);
	return 1;
}


CMD:lock(playerid, params[])
{
	new vehicleid = GetClosestVehicle(playerid), string[256];
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	 
	if(IsPlayerInRangeOfVehicle(playerid, vehicleid, 3.0))
	{
		if(!CheckIfIsOwner(playerid, vehicleid)) return SS(playerid, COLOR_ERROR, "Poti folosi aceasta comanda doar pentru vehiculele tale personale!", "You can only use this command for your personal vehicles!");

		switch(carVariables[vPersonal[vehicleid]][cLock])
	    {
	        case 0:
	        {
	            carVariables[vPersonal[vehicleid]][cLock] = 1;
	            Lock[vPersonal[vehicleid]] = 1;

	            format(string, sizeof(string), "%s~n~~r~locked", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				GameTextForPlayer(playerid, string, 4000, 3);

   				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

	            SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
	        }
			case 1:
			{
			    carVariables[vPersonal[vehicleid]][cLock] = 0;
			    Lock[vPersonal[vehicleid]] = 0;

			    format(string, sizeof(string), "%s~n~~g~unlocked", VehicleNames[GetVehicleModel(vehicleid) - 400]);
				GameTextForPlayer(playerid, string, 4000, 3);

				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			    SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			}
	    }
	} 
    else return SS(playerid, COLOR_ERROR,"Nu te afli langa o masina personala!", "You are not near a personal vehicle!");
	return 1;
}
CMD:carplate(playerid, params[])
{

	new const vehicleid = GetPlayerVehicleID(playerid);
	if(!CheckIfIsOwner(playerid, vehicleid)) return SS(playerid, COLOR_ERROR, "Poti folosi aceasta comanda doar pentru vehiculele tale personale!", "You can only use this command for your personal vehicles!");
	
	new numar[7];

	if(sscanf(params, "s[7]", numar)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/carplate [text]" );
	
	SetVehicleNumberPlate(vehicleid, numar);
	return 1;
}
CMD:swapcolors(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerInAnyVehicle(playerid))
		return S(playerid, COLOR_ERROR, "Error: You are not in a vehicle.");

	if(carVariables[vPersonal[vehicleid]][cOwnerID] != playerVariables[playerid][pID])
	{
		return SS(playerid, COLOR_ERROR, "Poti folosi aceasta comanda doar pentru masinile tale personale!", "You can only use this command for your personal vehicles!");
	}

	if(GetPlayerVehicleSeat(playerid) != 0)
		return S(playerid, COLOR_ERROR, "Error: You are not in the drivers seat.");

	new colour1, colour2, aux; 

	colour1 = carVariables[vPersonal[vehicleid]][cColour][0];
	colour2 = carVariables[vPersonal[vehicleid]][cColour][1];
	aux = colour1; 
	colour1 = colour2; 
	colour2 = aux; 

	carVariables[vPersonal[vehicleid]][cColour][0] = colour1;
	carVariables[vPersonal[vehicleid]][cColour][1] = colour2;

	vUpdate(vPersonal[GetPlayerVehicleID(playerid)], cColour1x);
	vUpdate(vPersonal[GetPlayerVehicleID(playerid)], cColour2x);

	ChangeVehicleColor(vehicleid, colour1, colour2);

	SS(playerid, -1, "Culorile vehiculului au fost schimbate!", "Colors swapped!");
	GameTextForPlayer(playerid,"~r~-$5000", 3000, 1);
   	GivePlayerCash(playerid, -5000);

	return 1;
}
CMD:carcolor(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new colorpart, colorid;

	if(!IsPlayerInAnyVehicle(playerid))
		return S(playerid, COLOR_ERROR, "Error: You are not in a vehicle.");

	if(carVariables[vPersonal[vehicleid]][cOwnerID] != playerVariables[playerid][pID])
	{
		return SS(playerid, COLOR_ERROR, "Poti folosi aceasta comanda doar pentru masinile tale personale!", "You can only use this command for your personal vehicles!");
	}

	if(GetPlayerVehicleSeat(playerid) != 0)
		return S(playerid, COLOR_ERROR, "Error: You are not in the drivers seat.");

	if(sscanf(params, "ii", colorpart, colorid))
	{
	 	S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/carcolor [1/2] [color]");
	 	S(playerid, COLOR_GREY,"Syntax: {FFFFFF}Use /colors for a list colors.");
 	}

 	if(colorid < 0 || colorid > 255) return S(playerid, COLOR_GREY, "Culoarea trebuie sa fie cuprinsa intre 0 si 255.");

 	if(colorpart == 1)
	{
		if(colorid < 128)
		{
			if(playerVariables[playerid][pCash] < 5000) return SS(playerid, COLOR_GREY,"Ai nevoie de $5.000 pentru a schimbare culoarea masinii.", "You need to have atleast $5.000 to change your car's color.");
			
    		carVariables[vPersonal[GetPlayerVehicleID(playerid)]][cColour][0] = colorid;
    		vUpdate(vPersonal[GetPlayerVehicleID(playerid)], cColour1x);
			
			ChangeVehicleColor(vehicleid, colorid, carVariables[vPersonal[vehicleid]][cColour][1]);

			S(playerid, COLOR_WHITE, "Color changed!");
    			
    		GameTextForPlayer(playerid,"~r~-$5000", 3000, 1);
    		GivePlayerCash(playerid, -5000);
		}
		else
		{
			if(playerVariables[playerid][pPremiumPoints] < 10) return SS(playerid, COLOR_GREY,"Ai nevoie de 10 puncte premium pentru a pune o culoare speciala pe masina.", "You need to have atleast 10 premium points to use a special colour on your vehicle.");

			carVariables[vPersonal[GetPlayerVehicleID(playerid)]][cColour][0] = colorid;
    		vUpdate(vPersonal[GetPlayerVehicleID(playerid)], cColour1x);
			
			ChangeVehicleColor(vehicleid, colorid, carVariables[vPersonal[vehicleid]][cColour][1]);

			SS(playerid, COLOR_YELLOW, "Ai pus o culoare speciala pe masina pentru 10 puncte premium!", "You put a special colour on your car for 10 premium points.");
    			
    		playerVariables[playerid][pPremiumPoints] -= 10;
    		Update(playerid, pPremiumPointsx);
		}
	}
	if(colorpart == 2)
	{
		if(colorid < 128)
		{
			if(playerVariables[playerid][pCash] < 5000) return SS(playerid, COLOR_GREY,"Ai nevoie de $5.000 pentru a schimbare culoarea masinii.", "You need to have atleast $5.000 to change your car's color.");
			
    		carVariables[vPersonal[GetPlayerVehicleID(playerid)]][cColour][1] = colorid;
    		vUpdate(vPersonal[GetPlayerVehicleID(playerid)], cColour2x);
			
			ChangeVehicleColor(vehicleid, carVariables[vPersonal[vehicleid]][cColour][0], colorid);

			S(playerid, COLOR_WHITE, "Color changed!");
    			
    		GameTextForPlayer(playerid,"~r~-$5000", 3000, 1);
    		GivePlayerCash(playerid, -5000);
		}
		else
		{
			if(playerVariables[playerid][pPremiumPoints] < 10) return SS(playerid, COLOR_GREY,"Ai nevoie de 10 puncte premium pentru a pune o culoare speciala pe masina.", "You need to have atleast 10 premium points to use a special colour on your vehicle.");

			carVariables[vPersonal[GetPlayerVehicleID(playerid)]][cColour][1] = colorid;
    		vUpdate(vPersonal[GetPlayerVehicleID(playerid)], cColour2x);
			
			ChangeVehicleColor(vehicleid, carVariables[vPersonal[vehicleid]][cColour][0], colorid);

			SS(playerid, COLOR_YELLOW, "Ai pus o culoare speciala pe masina pentru 10 puncte premium!", "You put a special colour on your car for 10 premium points.");
    			
    		playerVariables[playerid][pPremiumPoints] -= 10;
    		Update(playerid, pPremiumPointsx);
		}
	}
 	return 1;
}
CMD:park(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float: vhp;
	GetVehicleHealth(vehicleid, vhp);
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if(!IsPlayerInAnyVehicle(playerid))
		return S(playerid, COLOR_ERROR, "Error: You are not in a vehicle.");

	if(carVariables[vPersonal[vehicleid]][cOwnerID] != playerVariables[playerid][pID])
	{
		return SS(playerid, COLOR_ERROR, "Poti folosi aceasta comanda doar pentru vehiculele tale personale!", "You can only use this command for your personal vehicles!");
	}

	if(GetPlayerVehicleSeat(playerid) != 0)
		return S(playerid, COLOR_ERROR, "Error: You are not in the drivers seat.");

	if(engine != 0) return SS(playerid, COLOR_GREY, "Motorul vehiculului trebuie sa fie oprit.","The vehicle's engine must be stopped.");	

	if(vhp >= 500)
	{
		new Float: fPos[4], Float: a;
		GetVehiclePos(vehicleid, fPos[0], fPos[1], fPos[2]);	
		GetVehicleZAngle(vehicleid, a);

		carVariables[vPersonal[vehicleid]][cPos][0] = fPos[0];
		carVariables[vPersonal[vehicleid]][cPos][1] = fPos[1];
		carVariables[vPersonal[vehicleid]][cPos][2] = fPos[2];
		carVariables[vPersonal[vehicleid]][cRotate] = a;

		vUpdate(vPersonal[vehicleid], cLocationXx);
		vUpdate(vPersonal[vehicleid], cLocationYx);
		vUpdate(vPersonal[vehicleid], cLocationZx);
		vUpdate(vPersonal[vehicleid], cRotatex);

		DestroyVehicle(vehicleid);

		new car = CreateVehicle(carVariables[vPersonal[vehicleid]][cModel], carVariables[vPersonal[vehicleid]][cPos][0], carVariables[vPersonal[vehicleid]][cPos][1], carVariables[vPersonal[vehicleid]][cPos][2], carVariables[vPersonal[vehicleid]][cRotate], carVariables[vPersonal[vehicleid]][cColour][0], carVariables[vPersonal[vehicleid]][cColour][1], -1);
		SetVehicleNumberPlate(car, carVariables[vPersonal[vehicleid]][cPlate]);
		SetVehicleHealth(car, carVariables[vPersonal[vehicleid]][cHP]);

		SetVehicleParamsEx(car, engine, lights, alarm, carVariables[vPersonal[vehicleid]][cLock], bonnet, boot, objective);	

		SS(playerid, COLOR_IN2, "Ai parcat vehiculul cu succes! Pentru a respawna un vehicul personal foloseste comanda /towcar.", "You've parked the vehicle! To respawn your personal vehicle use /towcar.");
	}
	else return SS(playerid, -1, "Trebuie sa repari vehiculul pentru a putea folosi comanda /park.","You need to repair the vehicle to use /park.");
	return 1;
}	











CMD:cars(playerid, params[])
{
	new string[1800];

	new chestion = 0;
	
	for(new i; i <= GetVehiclePoolSize( ); ++i )
	{
	    if(!vPersonal[i]) continue;
	    if( !strcmp( playerVariables[ playerid ][ pUsername ], carVariables[ vPersonal[i] ][ cOwner ] ) )
	    {
	        format(string, sizeof(string), "{FFFFFF}%s%s (%s)\n", string, VehicleNames[GetVehicleModel(i) - 400], carVariables[vPersonal[i]][cLock] ? ( "{FF0000}Locked{FFFFFF}" ) : ("{00FF00}Unlocked{FFFFFF}"));
	        pCarMenu[playerid][chestion] = vPersonal[i];
	        chestion ++;
	    }
	}
 	ShowPlayerDialog(playerid, DIALOG_CARS, DIALOG_STYLE_LIST, "Your vehicleS:", string, "Manage", "Exit" );
 	return 1;
}



CMD:areadisarm(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 2)
	{
		new range, string[256];
		new count=0;
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x,y,z);

		if(sscanf(params, "i", range)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/areadisarm [range]");
		{
		    if(range > 200) return S(playerid, COLOR_GREY, "Max range: 200.");

			for(new i, g = GetMaxPlayers(); i < g; i ++)
			{
				if(IsPlayerInRangeOfPoint(i, range * 1, x, y, z))
				{
		    		ResetPlayerWeapons(i);
		    		ResetPlayerWeaponsEx(i);
		    		playerVariables[i][pDuty] = 0;
		    		SetPlayerArmourEx(i, 0);
		    		count++;
		    		format(string, sizeof(string), "* Admin %s disarmed you!", GetName(playerid));
					S(i, COLOR_WHITE, string);
			 	}
	  	  	}
  			format(string, sizeof(string), "AdmCmd: %s used /areadisarm and disarmed %d players.", GetName(playerid), count);
	        submitToAdmins(string, COLOR_ADMCHAT);
		}
	}
	else return S(playerid, -1, "{BFFF8B}This command can only be used by level 2+ admins.");
	return 1;
}
CMD:areaheal(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
 	{
  		new string[128], range;
  		new count=0;
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x,y,z);

		if(sscanf(params, "i", range)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/areaheal [range]");
		{
		    if(range > 200) return S(playerid, COLOR_GREY, "Max range: 200.");

   			for(new i,g=GetMaxPlayers(); i < g; i ++)
			{
				if(IsPlayerConnected(i))
				{
					if(IsPlayerInRangeOfPoint(i,range*1,x,y,z))
					{
						SetPlayerHealthEx(i, 99);
						count++;
						format(string, sizeof(string), "* Admin %s healed you.", GetName(playerid));
						S(i, COLOR_IN2, string);
					}
				}
			}
			format(szMessage, 256, "AdmCmd: %s used /areaheal and healed %d players.", GetName(playerid), count);
			submitToAdmins(szMessage,COLOR_ADMCHAT);
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
  	return 1;
}

CMD:va(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
 	{
 	    new count=0;
  		new range;
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x,y,z);
		if(sscanf(params, "i", range)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/va [range]");
		{
		    if(range > 200) return S(playerid, COLOR_GREY, "Max range: 200.");
		    for(new car = 0; car < MAX_VEHICLES; car++)
			if(IsPlayerInRangeOfVehicle(playerid, car, range))
			{
				if(!IsVehicleOccupied(car))
				{
			    	SetVehicleToRespawn(car);
			    	count++;
		    		DestroyVehicle(Carspawn[car]);
					Carspawn[car] = 0;
			    }
			}
   			format(szMessage, 256, "You have respawned the vehicle near you (%d game units). %d vehicles respawned.", range, count);
			S(playerid, COLOR_IN2, szMessage);
		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}



CMD:time(playerid, params[])
{
    if(GetPlayerAnimationIndex(playerid)== 1130 || GetPlayerAnimationIndex(playerid)== 1195) return S(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce cazi!");
    if(playerVariables[playerid][pAlreadyFish] == 1) return SS(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce pescuiesti.", "You can not use animations while you are fishing.");
    if(UsingDrugs[playerid] == 1) return SS(playerid, COLOR_GREY, "Nu poti folos animatii cand te droghezi.", "You can't use animations while using drugs.");

	new string[256];
	new hour,minute,second;

	gettime(hour, minute, second);

	format(string, sizeof(string), "The current time is %d:%s%d (%d seconds).", hour, (minute < 10) ? ("0") : (""), minute, second);
	S(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "Connected for %d seconds.", playerVariables[playerid][pSeconds]);
	S(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "* %s raises her hand and looks down at her watch.", GetName(playerid));
	nearByMessage(playerid, COLOR_PURPLE, string);

	ApplyAnimation(playerid, "COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	return 1;
}


CMD:buylevel(playerid, params[])
{
	if(playerVariables[playerid][pLevel] >= 0)
	{
		new nxtlevel = playerVariables[playerid][pLevel];
		new expamount = nxtlevel*levelexp;
		new costlevel;
		new infostring[256], string[256];
		costlevel = nxtlevel*25000;

		if (playerVariables[playerid][pCash] >= costlevel)
		{
			if (playerVariables[playerid][pRespectPoints] >= expamount)
			{
				playerVariables[playerid][pLevel]++;
				Update(playerid, pLevelx);

				playerVariables[playerid][pRespectPoints] -= expamount;
				Update(playerid, pRespectPointsx);

				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

				format(string, 256, "Felicitari, acum ai level %d!",playerVariables[playerid][pLevel]);
				S(playerid, COLOR_TEAL, string);

				playerVariables[playerid][pCash] -= costlevel;
				GivePlayerCash(playerid, - costlevel);
				Update(playerid, pCashx);

				format(szMessage, sizeof(szMessage), "* %s are acum level %d.",GetName(playerid),playerVariables[playerid][pLevel]);
				nearByMessage(playerid,COLOR_PURPLE,szMessage);
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
				{
					format(infostring, 256, "Nu ai suficiente 'Respect Points' (RP) pentru a cumpara un level. Ai nevoie de %d puncte de respect pentru a avansa in level.",expamount-playerVariables[playerid][pRespectPoints]);
					S(playerid, COLOR_GREY, infostring);
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					format(infostring, 256, "You don't have enough 'Respect Points' (RP) to upgrade your level. You need %d respect points to advance in level.",expamount-playerVariables[playerid][pRespectPoints]);
					S(playerid, COLOR_GREY, infostring);
				}
			}
		}
		else
		{
			if(playerVariables[playerid][pLimba] == 1)
			{
				format(infostring, 256, "Ai nevoie de $%s pentru a cumpara level up.",NumberFormat(costlevel));
				S(playerid, COLOR_GREY, infostring);
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				format(infostring, 256, "You need to buy $%s to level up.",NumberFormat(costlevel));
				S(playerid, COLOR_GREY, infostring);
			}
		}
	}
	return 1;
}
CMD:licenses(playerid, params[])
{
	new string[256];

	format(string, sizeof(string), "---- %s's licenses ----", GetName(playerid));
	S(playerid, COLOR_TEAL, string);


	if(playerVariables[playerid][pLicentaCondus] == 0)
	{
     	format(string,sizeof(string),"Driving license: Not passed");
 		S(playerid, COLOR_WHITE, string);
	}
	else
	{
		format(string,sizeof(string),"Driving license: Passed (expires in %d hours)",playerVariables[playerid][pLicentaCondus]);
	    S(playerid, COLOR_WHITE, string);
	}

	if(playerVariables[playerid][pLicentaArme] == 0)
	{
     	format(string,sizeof(string),"Weapons license: Not passed");
 		S(playerid, COLOR_WHITE, string);
	}
	else
	{
		format(string,sizeof(string),"Weapons license: Passed (expires in %d hours)",playerVariables[playerid][pLicentaArme]);
	    S(playerid, COLOR_WHITE, string);
	}

	if(playerVariables[playerid][pLicentaFly] == 0)
	{
     	format(string,sizeof(string),"Fly license: Not passed");
 		S(playerid, COLOR_WHITE, string);
	}
	else
	{
		format(string,sizeof(string),"Fly license: Passed (expires in %d hours)",playerVariables[playerid][pLicentaFly]);
	    S(playerid, COLOR_WHITE, string);
	}

 	if(playerVariables[playerid][pLicentaBoat] == 0)
	{
     	format(string,sizeof(string),"Boat license: Not passed");
 		S(playerid, COLOR_WHITE, string);
	}
	else
	{
		format(string,sizeof(string),"Boat license: Passed (expires in %d hours)",playerVariables[playerid][pLicentaBoat]);
	    S(playerid, COLOR_WHITE, string);
	}
	return 1;
}



CMD:id(playerid,params[])
{
	if(playerVariables[playerid][pLevel] >= 0)
	{
	    new targetid;

		if(sscanf(params, "u", targetid))
		return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/id [playerid]");

		if(IsPlayerConnected(targetid))
	   	{
			showId(playerid, targetid);
		}
		else
		{
			if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, COLOR_GREY, "Acel player nu este conectat.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			}
		}
	}
	return 1;
}
CMD:reporters(playerid, params[])
{
	new string [256];
	
	S(playerid, COLOR_WHITE, "---- Reporteri online ----");
	foreach(Player, i)
	{
		if(playerVariables[i][pGroup] == 6)
		{
			format(string, sizeof(string), "(%d) %s - numar de telefon: %d", i, GetName(i), playerVariables[i][pPhoneNumber]);
			S(playerid, COLOR_WHITE, string);
		}
	}
	S(playerid, COLOR_WHITE, "--------------------------");
	return 1;
}
CMD:helpers(playerid, params[])
{
	new string[256], sendername[60];
	
    S(playerid, COLOR_TEAL, "----Helpers Online-----------------------");
    
    if(playerVariables[playerid][pAdminLevel] < 5)
	{
		foreach(Player,i)
		{
			if(playerVariables[i][pHelperLevel] >= 1)
	  		{
				format(string, 256, "(%d) %s - helper level %d", i, GetName(i), playerVariables[i][pHelperLevel]);
				S(playerid, COLOR_WHITE, string);
			}
		}
	}
	
 	new count = 0;
	if(playerVariables[playerid][pAdminLevel] >= 5)
	{
		foreach(Player,i)
		{
		    if(WatchingTV[i] == 1)
		    {
				if(playerVariables[i][pHelperLevel] >= 1)
		  		{
					GetPlayerName(Spectate[i], sendername, sizeof(sendername));

					format(string, 256, "(%d) %s - helper level %d - spectate on %s (%d) - AFK: %d", i, GetName(i), playerVariables[i][pHelperLevel], sendername, Spectate[i], IsPlayerAFK[i]);
					S(playerid, COLOR_WHITE, string);
					count++;
				}
			}
			else
			{
			    if(playerVariables[i][pHelperLevel] >= 1)
		  		{
					format(string, 256, "(%d) %s - helper level %d - AFK: %d", i, GetName(i), playerVariables[i][pHelperLevel], IsPlayerAFK[i]);
					S(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
    
    
    
    
    
    
    
    
    S(playerid, COLOR_TEAL, "-----------------------------------------------");
	S(playerid, COLOR_WHITE, "Daca ai vreo intrebare legata de server, foloseste /n.");
	S(playerid, COLOR_TEAL, "-----------------------------------------------");
    return 1;
}



CMD:admins(playerid, params[])
{
	new giveplayer[25],string[256],sendername[25];

	S(playerid, COLOR_TEAL, "----Admins online------------------------------------------------");


	if(playerVariables[playerid][pAdminLevel] < 5)
	{
		foreach(Player,i)
		{
			if(playerVariables[i][pAdminLevel] >= 1 && playerVariables[i][pAdminLevel] <= 6)
	  		{
				GetPlayerName(i, sendername, sizeof(sendername));
				format(string, 256, "(%d) %s - admin level %d",i,sendername,playerVariables[i][pAdminLevel]);
				S(playerid, COLOR_WHITE, string);
			}
		}
	}
	new count = 0;
	if(playerVariables[playerid][pAdminLevel] >= 5)
	{
		foreach(Player,i)
		{
		    if(WatchingTV[i] == 1)
		    {
				if(playerVariables[i][pAdminLevel] >= 1)
		  		{
					GetPlayerName(i, giveplayer, sizeof(giveplayer));
					GetPlayerName(Spectate[i], sendername, sizeof(sendername));
					format(string, 256, "(%d) %s - admin level %d - spectate on %s (%d) - AFK: %d",i,giveplayer,playerVariables[i][pAdminLevel],sendername,Spectate[i], IsPlayerAFK[i]);
					S(playerid, COLOR_WHITE, string);
					count++;
				}
			}
			else
			{
			    if(playerVariables[i][pAdminLevel] >= 1)
		  		{
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "(%d) %s - admin level %d - AFK: %d",i,sendername,playerVariables[i][pAdminLevel], IsPlayerAFK[i]);
					S(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	S(playerid, COLOR_TEAL, "------------------------------------------------------------------------");
	if(playerVariables[playerid][pLimba] == 1)
	{
		S(playerid, COLOR_WHITE,"Daca ai vreo problema, poti folosi /report. Pentru intrebari legate de joc poti folosi /n.");
	}
	if(playerVariables[playerid][pLimba] == 2)
	{
		S(playerid, COLOR_WHITE,"If you have any problems, please use /report. For game related questions, use /n.");
	}
	S(playerid, COLOR_TEAL, "------------------------------------------------------------------------");
	return 1;
}

CMD:carradio(playerid,params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(playerVariables[playerid][pLimba] == 1)
			{
				ShowPlayerDialog(playerid, DIALOG_CARRADIO, DIALOG_STYLE_LIST, "Radio Vehicul", "{DC143C}Turn off Radio\n{FFFFFF}Pro FM Romania\nRadio Taraf Romania\nRadio Bandit\nRadio Romania Popular\nRadio ZU [Audio Plugin]\nKiss FM [Audio Plugin]\nRadio Gangsta Dance\nRadio Tequilla Romania Hip Hop\nRadio Greu de Difuzat Hip Hop\nDubstep.fm", "Alege", "Inchide");
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				ShowPlayerDialog(playerid, DIALOG_CARRADIO, DIALOG_STYLE_LIST, "Vehicle Radio", "{DC143C}Turn off Radio\n{FFFFFF}Pro FM Romania\nRadio Taraf Romania\nRadio Bandit\nRadio Romania Popular\nRadio ZU [Audio Plugin]\nKiss FM [Audio Plugin]\nRadio Gangsta Dance\nRadio Tequilla Romania Hip Hop\nRadio Greu de Difuzat Hip Hop\nDubstep.fm", "Choose", "Cancel");
			}
		}
		else
		{
	 		if(playerVariables[playerid][pLimba] == 1)
			{
				S(playerid,-1,"Doar soferul poate schimba radio.");
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				S(playerid,-1,"Only the driver can change the radio.");
			}
		}
	}
	else
	{
 		if(playerVariables[playerid][pLimba] == 1)
		{
			S(playerid,-1,"Tu nu esti intr-o masina.");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			S(playerid,-1,"You're not in a car.");
		}
	}
	return 1;
}
CMD:mp3(playerid,params[])
{
	if(playerVariables[playerid][pDonate] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid)) return S(playerid, COLOR_GREY, "Nu poti folosi MP3-ul cand te afli intr-o masina!");

        SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
		ShowPlayerDialog(playerid, DIALOG_MP3, DIALOG_STYLE_LIST, "MP3 Radio", "{DC143C}Turn off MP3\n{FFFFFF}Pro FM Romania\nRadio Taraf Romania\nRadio Bandit\nRadio Romania Popular\nRadio ZU [Audio Plugin]\nKiss FM [Audio Plugin]\nRadio Gangsta Dance\nRadio Tequilla Romania Hip Hop\nRadio Greu de Difuzat Hip Hop\nDubstep.fm", "Choose", "Cancel");
	}
	else return S(playerid, -1,"{C6FEAE}Aceasta comanda poate fi folosita doar de playerii care detin cont premium.");
	return 1;
}
CMD:specialskin(playerid,params[])
{
	if(playerVariables[playerid][pSpecialSkin] >= 0)
	{
		SetPlayerSkin(playerid, playerVariables[playerid][pSpecialSkin]);
	}
	else return S(playerid, -1,"{C6FEAE}Aceasta comanda poate fi folosita doar de playerii care detin un skin special.");
	return 1;
}
// -------------------------------------------- Security ----------------------------------------------------------------------------------

CMD:changepass(playerid, params[])
{
    ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_PASSWORD, "SERVER: Change Password", "Type your NEW password bellow!", "Change", "Cancel");
	return 1;
}

//---------------------------------------------- Report system ----------------------------------------------------------------------------
CMD:report(playerid, params[])
{
	if(playerVariables[playerid][pReportDeelay] == 0)
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_REPORT, DIALOG_STYLE_LIST, "Report", "Sunt blocat\nIntrebari despre donatii\nAlta problema","Alege","Inchide");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			ShowPlayerDialog(playerid, DIALOG_REPORT, DIALOG_STYLE_LIST, "Report", "I'm stuck\nDonation related questions\nOther issues","Choose","Exit");
		}
	}
 	else
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
		    format(szMessage, 256, "{B8F572}Vei putea folosi /report din nou peste %d secunde.", playerVariables[playerid][pReportDeelay]);
			S(playerid,COLOR_WHITE,szMessage);
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
		    format(szMessage, 256, "{B8F572}You will be able to use /report again in %d seconds.", playerVariables[playerid][pReportDeelay]);
			S(playerid,COLOR_WHITE,szMessage);
		}
	}
	return 1;
}
CMD:reports(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new count=0;

	    S(playerid,COLOR_WHITE,"{d6e688}_________ REPORTS _________");

		foreach(Player, i)
		{
			if(strcmp(reporttext[i], "NULL", true))
			{
				S(playerid, COLOR_BLUE, reporttext[i]);
				count++;
			}
		}
		if(count == 0)
		{
			S(playerid, COLOR_WHITE, "No reports available.");
		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:dr(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new string[128], id;
		if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dr [playerid]");

		if(id != INVALID_PLAYER_ID)
		{
			if(!strcmp(reporttext[id], "NULL", true)) return S(playerid, COLOR_WHITE, "This player don't have an active report.");

			ReportTime[id] = 0;
			KillTimer(timerreport[id]);

			format(string, sizeof(string), "%s deleted %s", GetName(playerid), reporttext[id]);
			submitToAdmins(string, COLOR_GREY);

			format(reporttext[id], 30, "NULL");
		}
  		else
		{
			if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, COLOR_GREY, "Acel player nu este conectat.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			}
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}

//-----------------------------------------------------------------------------------------------------------------------------

CMD:sms(playerid, params[])
{
	if(playerVariables[playerid][pMuted] >= 1)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(szMessage, 256, "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",playerVariables[playerid][pMuted]);
			S(playerid,COLOR_IN2,szMessage);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(szMessage, 256, "You can not write on the chat at the moment (mute). You can write on the chat over %d seconds.",playerVariables[playerid][pMuted]);
			S(playerid,COLOR_IN2,szMessage);
		}
	}
	else
	{

		new number, count, message[128], string[256], giveplayerid;

		if(sscanf(params, "is[128]", number, message))
		return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/sms [number] [message]");

	    if(playerVariables[playerid][pPhoneStatus] != 1)
	    return S(playerid, COLOR_GREY, "Your phone is not switched on.");

		if(playerVariables[playerid][pCredit] < 1)
		return S(playerid, COLOR_GREY, "You have no remaining phone credit - visit a 24/7 to top it up.");

	 	if(playerVariables[playerid][pPhoneNumber] >= 1000)
	 	{
		    foreach(Player, x)
			{
				if(playerVariables[x][pPhoneNumber] == number)
				{
					if(number >= 1000)
					{
					    if(playerVariables[x][pPhoneStatus] == 1)
						{
							if(IsPlayerConnected(giveplayerid))
							{
								if(giveplayerid != INVALID_PLAYER_ID)
								{
								    giveplayerid = x;
								    
								    if(playerVariables[x][pAdminLevel] >= 1)
								    {
							        	format(string, sizeof(string), "SMS from %s (%d): %s", GetName(playerid), x, message);
							        	S(x, COLOR_YELLOW, string);
									}
									else
									{
							        	format(string, sizeof(string), "SMS from %s (%d): %s", GetName(playerid), playerVariables[x][pPhoneNumber], message);
							        	S(x, COLOR_YELLOW, string);
									}

							        format(szMessage, sizeof(szMessage), "SMS sent to %s (%d): %s", GetName(x), playerVariables[x][pPhoneNumber], message);
							        S(playerid, COLOR_GENANNOUNCE, szMessage);


				        			format(string, sizeof(string),"[SMS] %s to %s: %s", GetName(playerid), GetName(x), message);
									chatlogs(string, COLOR_WHITE);

									mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO chat_logs (playerid, text, type) VALUES('%d', '%s', 'sms')", playerVariables[playerid][pID], string);
									mysql_query(handle, szLargeString);
									mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO chat_logs (playerid, text, type) VALUES('%d', '%s', 'sms')", playerVariables[x][pID], string);
									mysql_query(handle, szLargeString);

									playerVariables[playerid][pCredit] -= 1;
									Update(playerid, pCreditx);

									LastPlayer[x] = playerid;

									PlayerPlaySound(x, 1138, 0.0, 0.0, 0.0);
								}
							}
					    }
					    else return S(playerid, COLOR_GREY, "The cellphone that you're trying to SMS is currently unavailable.");
					}
					else return S(playerid, COLOR_WHITE, "Acel player nu detine un telefon.");
				}
				count++;
			}
			if(count < 1) return S(playerid, COLOR_GREY, "Invalid number.");
		}
		else return SS(playerid, COLOR_GREY, "Tu nu ai un telefon.", "You don't have a phone.");
	}
	return 1;
}
CMD:reply(playerid, params[])
{
	if(playerVariables[playerid][pPhone] == 2)
	{
		if(LastPlayer[playerid] != -1)
		{
		    if(playerVariables[playerid][pCredit] > 0)
		    {
		        if(playerVariables[playerid][pPhoneStatus] == 1)
				{

					    if(playerVariables[LastPlayer[playerid]][pAdminLevel] >= 1)
					    {
							format(szMessage, sizeof(szMessage), "SMS from %s (%d): %s", GetName(playerid), playerid, params);
							S(LastPlayer[playerid], COLOR_YELLOW, szMessage);
						}
						else
						{
							format(szMessage, sizeof(szMessage), "SMS from %s (%d): %s", GetName(playerid), playerVariables[playerid][pPhoneNumber], params);
							S(LastPlayer[playerid], COLOR_YELLOW, szMessage);
						}

						if(IsPlayerConnected(LastPlayer[playerid]))
						{
							LastPlayer[LastPlayer[playerid]] = playerVariables[LastPlayer[playerid]][pID];

							format(szMessage, sizeof(szMessage), "SMS sent to %s (%d): %s", GetName(LastPlayer[playerid]), playerVariables[LastPlayer[playerid]][pPhoneNumber], params);
							S(playerid, COLOR_GENANNOUNCE, szMessage);

							playerVariables[playerid][pCredit] -= 1;
							Update(playerid, pCreditx);
							PlayerPlaySound(LastPlayer[playerid], 1138, 0.0, 0.0, 0.0);
						}
						else return S(playerid, COLOR_GREY, "Invalid number.");
				}
			 	else return S(playerid, COLOR_GREY, "Your phone is not switched on.");
			}
   			else return S(playerid, COLOR_GREY, "You have no remaining phone credit - visit a 24/7 to top it up.");
		}
		else return S(playerid, COLOR_GREY, "Nobody has sent you an SMS!");
	}
	else
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			S(playerid, COLOR_WHITE, "Doar cei cu iPhone pot folosi comanda /reply. Pentru a cumpara un iPhone foloseste /shop.");
		}
	}
	return 1;
}
CMD:call(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new number, string[256];
		
		if(sscanf(params, "i", number)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/call [number]");
		
		if(playerVariables[playerid][pPhoneNumber] < 1000) return S(playerid, -1, "You dont't have a phone.");
		if(playerVariables[playerid][pPhoneStatus] != 1) return S(playerid, COLOR_GREY, "Your phone is turned off.");
		if(playerVariables[playerid][pCredit] < 1) return S(playerid, COLOR_WHITE, "You don't have enough credit to call.");
		if(number == playerVariables[playerid][pPhoneNumber]) return S(playerid, COLOR_GREY, "You're trying to call yourself.");
		if(Mobile[playerid] != -1) return S(playerid, COLOR_WHITE, "You are already on a call.");
		
		foreach(Player,i)
		{
			if(IsPlayerConnected(i))
			{
				if(playerVariables[i][pPhoneNumber] == number && number != 0)
				{
					new giveplayerid = i;
					if(IsPlayerConnected(giveplayerid))
					{
						if(giveplayerid != INVALID_PLAYER_ID)
						{
						    if(playerVariables[giveplayerid][pPhoneStatus] != 1) return S(playerid, -1, "That player phone is offline.");

							if(Mobile[giveplayerid] == -1)
							{
								Mobile[playerid] = giveplayerid;
								
								format(string, sizeof(string), "* %s takes out their cellphone, and dials in a number.", GetName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

								PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
								PlayerPlaySound(giveplayerid, 20600, 0.0, 0.0, 0.0);
								
								format(string, sizeof(string), "%s is calling you. Use /p(ickup) to answer your phone.", GetName(playerid));
								SendClientMessage(giveplayerid, COLOR_YELLOW, string);
								
								
								if(playerVariables[playerid][pPhone] == 1)
								{
									SetPlayerAttachedObject(playerid, 4, 330, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
								}
								else if(playerVariables[playerid][pPhone] == 2)
								{
									SetPlayerAttachedObject(playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
								}
								if(playerVariables[giveplayerid][pPhone] == 1)
								{
									format(string, sizeof(string), "* %s's cellphone starts to ring...", GetName(giveplayerid));
								}
								else if(playerVariables[giveplayerid][pPhone] == 1)
								{
									format(string, sizeof(string), "* %s's iPhone starts to ring...", GetName(giveplayerid));
								}
								ProxDetector(15.0, giveplayerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
								return 1;
							}
						}
					}
				}
			}
		}
	}
	return 1;
}
CMD:help(playerid, params[])
{
    if(playerVariables[playerid][pLimba] == 1)
	{
    	ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "SERVER: Comenzi", "Comenzile locului de munca\nAnimatii\nComenzi generale\nGroup\nBusiness commands", "Alege", "Inchide");
	}
	if(playerVariables[playerid][pLimba] == 2)
	{
    	ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "SERVER: Commands", "Job commands\nAnimations\nGeneral commands\nGroup\nBusiness commands", "Select", "Exit");
	}
	return 1;
}
	
	
	
	
CMD:killcp(playerid, params[])
{
 	if(playerVariables[playerid][pCheckpoint] == 0)
	{
	    if(CP[playerid] == 0)
		{
			if(playerVariables[playerid][pCheckpointJob] == 0)
			{
			    JucatorCautat[playerid] = -1;
				DisablePlayerCheckpoint(playerid);
				DisablePlayerRaceCheckpoint(playerid);
				playerVariables[playerid][pCheckpoint] = 0;
				playerVariables[playerid][pCheckpointPizza] = 0;
				CP[playerid] = 0;
				pUseFind[playerid] = 0;
				PlayerTextDrawHide(playerid, findplayer[playerid]);
				PlayerTextDrawHide(playerid, findplayer2[playerid]);
				S(playerid,COLOR_WHITE,"You have disabled your current checkpoint.");
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					ShowPlayerDialog(playerid,DIALOG_STOPJOB, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Vrei sa anulezi jobul curent?", "Da", "Nu");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					ShowPlayerDialog(playerid,DIALOG_STOPJOB, DIALOG_STYLE_MSGBOX, "Are you sure?", "Do you want to stop working as a trucker?", "Yes", "No");
				}
			}
		}
		else return ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	}
	else return ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	return 1;
}
CMD:skills(playerid, params[])
{
    new string[256];

	S(playerid, COLOR_TEAL, "---- Your skills: ----");

    if(playerVariables[playerid][pArmsDealerSkill] == 1)
	{
	    new total = 25 - playerVariables[playerid][pArmsPuncteSkill];

    	format(string, sizeof(szMessage), "Arms dealer: %d/6 (delivered materials %d times) | Needed for next skill level: %d", playerVariables[playerid][pArmsDealerSkill], playerVariables[playerid][pArmsPuncteSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pArmsDealerSkill] == 2)
	{
	    new total = 50 - playerVariables[playerid][pArmsPuncteSkill];

    	format(string, sizeof(szMessage), "Arms dealer: %d/6 (delivered materials %d times) | Needed for next skill level: %d", playerVariables[playerid][pArmsDealerSkill], playerVariables[playerid][pArmsPuncteSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pArmsDealerSkill] == 3)
	{
	    new total = 105 - playerVariables[playerid][pArmsPuncteSkill];

    	format(string, sizeof(szMessage), "Arms dealer: %d/6 (delivered materials %d times) | Needed for next skill level: %d", playerVariables[playerid][pArmsDealerSkill], playerVariables[playerid][pArmsPuncteSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pArmsDealerSkill] == 4)
	{
	    new total = 175 - playerVariables[playerid][pArmsPuncteSkill];

    	format(string, sizeof(szMessage), "Arms dealer: %d/6 (delivered materials %d times) | Needed for next skill level: %d", playerVariables[playerid][pArmsDealerSkill], playerVariables[playerid][pArmsPuncteSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pArmsDealerSkill] == 5)
	{
	    new total = 250 - playerVariables[playerid][pArmsPuncteSkill];

    	format(string, sizeof(szMessage), "Arms dealer: %d/6 (delivered materials %d times) | Needed for next skill level: %d", playerVariables[playerid][pArmsDealerSkill], playerVariables[playerid][pArmsPuncteSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pArmsDealerSkill] == 6)
	{
    	format(string, sizeof(szMessage), "Arms dealer: %d/6 (delivered materials %d times)", playerVariables[playerid][pArmsDealerSkill], playerVariables[playerid][pArmsPuncteSkill]);
		S(playerid, COLOR_WHITE, string);
	}
	////////////////////////////////////////////////////////

	if(playerVariables[playerid][pMechanicSkill] == 1)
	{
	    new total = 25 - playerVariables[playerid][pMechanicPctSkill];

    	format(string, sizeof(szMessage), "Mechanic: %d/6 (%d towed cars) | Needed for next skill level: %d", playerVariables[playerid][pMechanicSkill], playerVariables[playerid][pMechanicPctSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pMechanicSkill] == 2)
	{
	    new total = 50 - playerVariables[playerid][pMechanicPctSkill];

    	format(string, sizeof(szMessage), "Mechanic: %d/6 (%d towed cars) | Needed for next skill level: %d", playerVariables[playerid][pMechanicSkill], playerVariables[playerid][pMechanicPctSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pMechanicSkill] == 3)
	{
	    new total = 105 - playerVariables[playerid][pMechanicPctSkill];

    	format(string, sizeof(szMessage), "Mechanic: %d/6 (%d towed cars) | Needed for next skill level: %d", playerVariables[playerid][pMechanicSkill], playerVariables[playerid][pMechanicPctSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pMechanicSkill] == 4)
	{
	    new total = 175 - playerVariables[playerid][pMechanicPctSkill];

    	format(string, sizeof(szMessage), "Mechanic: %d/6 (%d towed cars) | Needed for next skill level: %d", playerVariables[playerid][pMechanicSkill], playerVariables[playerid][pMechanicPctSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pMechanicSkill] == 5)
	{
	    new total = 250 - playerVariables[playerid][pMechanicPctSkill];

    	format(string, sizeof(szMessage), "Mechanic: %d/6 (%d towed cars) | Needed for next skill level: %d", playerVariables[playerid][pMechanicSkill], playerVariables[playerid][pMechanicPctSkill], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pMechanicSkill] == 6)
	{
    	format(string, sizeof(szMessage), "Mechanic: %d/6 (%d towed cars)", playerVariables[playerid][pMechanicSkill], playerVariables[playerid][pMechanicPctSkill]);
		S(playerid, COLOR_WHITE, string);
	}
	//////////////////////////////////////
	if(playerVariables[playerid][pPizzaSkill] == 1)
	{
	    new total = 25 - playerVariables[playerid][pPizzaPct];

    	format(string, sizeof(szMessage), "Pizza Boy: %d/6 (%d delivered pizza) | Needed for next skill level: %d", playerVariables[playerid][pPizzaSkill], playerVariables[playerid][pPizzaPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pPizzaSkill] == 2)
	{
	    new total = 50 - playerVariables[playerid][pPizzaPct];

    	format(string, sizeof(szMessage), "Pizza Boy: %d/6 (%d delivered pizza) | Needed for next skill level: %d", playerVariables[playerid][pPizzaSkill], playerVariables[playerid][pPizzaPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pPizzaSkill] == 3)
	{
	    new total = 105 - playerVariables[playerid][pPizzaPct];

    	format(string, sizeof(szMessage), "Pizza Boy: %d/6 (%d delivered pizza) | Needed for next skill level: %d", playerVariables[playerid][pPizzaSkill], playerVariables[playerid][pPizzaPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pPizzaSkill] == 4)
	{
	    new total = 175 - playerVariables[playerid][pPizzaPct];

    	format(string, sizeof(szMessage), "Pizza Boy: %d/6 (%d delivered pizza) | Needed for next skill level: %d", playerVariables[playerid][pPizzaSkill], playerVariables[playerid][pPizzaPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pPizzaSkill] == 5)
	{
	    new total = 250 - playerVariables[playerid][pPizzaPct];

    	format(string, sizeof(szMessage), "Pizza Boy: %d/6 (%d delivered pizza) | Needed for next skill level: %d", playerVariables[playerid][pPizzaSkill], playerVariables[playerid][pPizzaPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pPizzaSkill] == 6)
	{
    	format(string, sizeof(szMessage), "Pizza Boy: %d/6 (%d delivered pizza)", playerVariables[playerid][pPizzaSkill], playerVariables[playerid][pPizzaPct]);
		S(playerid, COLOR_WHITE, string);
	}
	///////////////////////////////////////////
	if(playerVariables[playerid][pFishSkill] == 1)
	{
	    new total = 25 - playerVariables[playerid][pFishTimes];

    	format(string, sizeof(szMessage), "Fisherman: %d/6 (%d fish caught) | Needed for next skill level: %d", playerVariables[playerid][pFishSkill], playerVariables[playerid][pFishTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFishSkill] == 2)
	{
	    new total = 50 - playerVariables[playerid][pFishTimes];

    	format(string, sizeof(szMessage), "Fisherman: %d/6 (%d fish caught) | Needed for next skill level: %d", playerVariables[playerid][pFishSkill], playerVariables[playerid][pFishTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFishSkill] == 3)
	{
	    new total = 105 - playerVariables[playerid][pFishTimes];

    	format(string, sizeof(szMessage), "Fisherman: %d/6 (%d fish caught) | Needed for next skill level: %d", playerVariables[playerid][pFishSkill], playerVariables[playerid][pFishTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFishSkill] == 4)
	{
	    new total = 175 - playerVariables[playerid][pFishTimes];

    	format(string, sizeof(szMessage), "Fisherman: %d/6 (%d fish caught) | Needed for next skill level: %d", playerVariables[playerid][pFishSkill], playerVariables[playerid][pFishTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFishSkill] == 5)
	{
	    new total = 250 - playerVariables[playerid][pFishTimes];

    	format(string, sizeof(szMessage), "Fisherman: %d/6 (%d fish caught) | Needed for next skill level: %d", playerVariables[playerid][pFishSkill], playerVariables[playerid][pFishTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFishSkill] == 6)
	{
    	format(string, sizeof(szMessage), "Fisherman: %d/6 (%d fish caught)", playerVariables[playerid][pFishSkill], playerVariables[playerid][pFishTimes]);
		S(playerid, COLOR_WHITE, string);
	}
	//------------------------------------------------------
	if(playerVariables[playerid][pFarmSkill] == 1)
	{
	    new total = 25 - playerVariables[playerid][pFarmTimes];

    	format(string, sizeof(szMessage), "Farmer: %d/6 (%d sold flour bags) | Needed for next skill level: %d", playerVariables[playerid][pFarmSkill], playerVariables[playerid][pFarmTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFarmSkill] == 2)
	{
	    new total = 50 - playerVariables[playerid][pFarmTimes];

    	format(string, sizeof(szMessage), "Farmer: %d/6 (%d sold flour bags) | Needed for next skill level: %d", playerVariables[playerid][pFarmSkill], playerVariables[playerid][pFarmTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFarmSkill] == 3)
	{
	    new total = 105 - playerVariables[playerid][pFarmTimes];

    	format(string, sizeof(szMessage), "Farmer: %d/6 (%d sold flour bags) | Needed for next skill level: %d", playerVariables[playerid][pFarmSkill], playerVariables[playerid][pFarmTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFarmSkill] == 4)
	{
	    new total = 175 - playerVariables[playerid][pFarmTimes];

    	format(string, sizeof(szMessage), "Farmer: %d/6 (%d sold flour bags) | Needed for next skill level: %d", playerVariables[playerid][pFarmSkill], playerVariables[playerid][pFarmTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFarmSkill] == 5)
	{
	    new total = 250 - playerVariables[playerid][pFarmTimes];

    	format(string, sizeof(szMessage), "Farmer: %d/6 (%d sold flour bags) | Needed for next skill level: %d", playerVariables[playerid][pFarmSkill], playerVariables[playerid][pFarmTimes], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pFarmSkill] == 6)
	{
    	format(string, sizeof(szMessage), "Farmer: %d/6 (%d sold flour bags)", playerVariables[playerid][pFarmSkill], playerVariables[playerid][pFarmTimes]);
		S(playerid, COLOR_WHITE, string);
	}
	
	//------------------------------------------------------

	if(playerVariables[playerid][pTruckSkill] == 1)
	{
	    new total = 25 - playerVariables[playerid][pTruckPct];

    	format(string, sizeof(szMessage), "Trucker: %d/6 (%d trailers delivered) | Needed for next skill level: %d", playerVariables[playerid][pTruckSkill], playerVariables[playerid][pTruckPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pTruckSkill] == 2)
	{
	    new total = 50 - playerVariables[playerid][pTruckPct];

    	format(string, sizeof(szMessage), "Trucker: %d/6 (%d trailers delivered) | Needed for next skill level: %d", playerVariables[playerid][pTruckSkill], playerVariables[playerid][pTruckPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pTruckSkill] == 3)
	{
	    new total = 105 - playerVariables[playerid][pTruckPct];

    	format(string, sizeof(szMessage), "Trucker: %d/6 (%d trailers delivered) | Needed for next skill level: %d", playerVariables[playerid][pTruckSkill], playerVariables[playerid][pTruckPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pTruckSkill] == 4)
	{
	    new total = 175 - playerVariables[playerid][pTruckPct];

    	format(string, sizeof(szMessage), "Trucker: %d/6 (%d trailers delivered) | Needed for next skill level: %d", playerVariables[playerid][pTruckSkill], playerVariables[playerid][pTruckPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pTruckSkill] == 5)
	{
	    new total = 250 - playerVariables[playerid][pTruckPct];

    	format(string, sizeof(szMessage), "Trucker: %d/6 (%d trailers delivered) | Needed for next skill level: %d", playerVariables[playerid][pTruckSkill], playerVariables[playerid][pTruckPct], total);
		S(playerid, COLOR_WHITE, string);
	}
	if(playerVariables[playerid][pTruckSkill] == 6)
	{
    	format(string, sizeof(szMessage), "Trucker: %d/6 (%d trailers delivered)", playerVariables[playerid][pTruckSkill], playerVariables[playerid][pTruckPct]);
		S(playerid, COLOR_WHITE, string);
	}
	return 1;
}
CMD:skill(playerid, params[])
{
	return cmd_skills(playerid, params);
}
CMD:colors(playerid, params[])
{
  	new stringc[3400];
	format(stringc,sizeof(stringc),"{FFFFFF}Culori normale:\n\n");
	strcat ( stringc, "{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009");
	strcat ( stringc, " {46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019");
	strcat ( stringc, " \n{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029");
	strcat ( stringc, " {421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039");
	strcat ( stringc, " \n{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049");
	strcat ( stringc, " {848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059");
	strcat ( stringc, " \n{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069");
	strcat ( stringc, " {851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079");
	strcat ( stringc, " \n{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089");
	strcat ( stringc, " {AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099");
	strcat ( stringc, " \n{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109");
	strcat ( stringc, " {7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119");
	strcat ( stringc, " \n{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127");
	strcat ( stringc, " \n\n{FFFFFF}Culori hidden:\n\n");
	strcat ( stringc, "{177517}128 {210606}129 {125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137");
	strcat ( stringc, " {B7B7B7}138 {464C8D}139 {84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147");
	strcat ( stringc, " \n{1E1D13}148 {1E1306}149 {1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157");
	strcat ( stringc, " {992E1E}158 {2C1E08}159 {142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A},164 {16616F}165 {1B6687}166 {6C3F99}167");
	strcat ( stringc, " \n{481A0E}168 {7A7399}169 {746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177");
	strcat ( stringc, " {7B3E7E}178 {3C1737}179 {733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187");
	strcat ( stringc, " \n{163012}188 {16301B}189 {642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197");
	strcat ( stringc, " {2B3C99}198 {3A3A0B}199 {8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207");
	strcat ( stringc, " \n{2C5089}208 {15426C}209 {103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217");
	strcat ( stringc, " {995C52}218 {99581E}219 {993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227");
	strcat ( stringc, " \n{96821D}228 {197F19}229 {3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237");
	strcat ( stringc, " {8A653A}238 {732617}239 {319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247");
	strcat ( stringc, " \n{561A28}248 {4E0E27}249 {706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255");
	ShowPlayerDialog(playerid,69,DIALOG_STYLE_MSGBOX,"Vehicle Colors List - /carcolor",stringc,"Ok","");
 	return 1;
}



CMD:emails(playerid, params[])
{
	return cmd_email(playerid, params);
}

CMD:email(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
	    new message[300], string[2000], read, message2[40], finalmessage[40], query[500], emailid, idd=0;
	    
	    format(query, sizeof(query), "SELECT * FROM `emails` WHERE `playerid` = '%d' ORDER BY `ID` DESC LIMIT 10", playerVariables[playerid][pID]);
		new Cache: emailresult = mysql_query(handle, query);
		if(cache_get_row_count() > 0)
		{
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
		    	cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
		    	read                    = cache_get_field_content_int(i, "EmailRead");
		    	emailid                 = cache_get_field_content_int(i, "ID");
		    	EmailId[playerid][idd] = emailid;
		    	idd++;
		    	if(strlen(message) > 28)
		    	{
		    		strmid(message2, message, 0, 29, sizeof(message2));
      				format(finalmessage,sizeof(finalmessage), "%s...",message2);
				}
		   	 	if(read > 0)
		    	{
		    		format(string, sizeof(string), "%s[NECITIT] %s\n", string, finalmessage);
				}
				else
				{
			    	format(string, sizeof(string), "%s%s\n", string, finalmessage);
				}
			}
		}
		else return S(playerid, COLOR_WHITE, "You don't have a email!");
		cache_delete(emailresult);
        ShowPlayerDialog(playerid, DIALOG_EMAILS, DIALOG_STYLE_LIST, "Emails",string,"Read","Exit");
	}
	return 1;
}













CMD:ro(playerid, params[])
{
	S(playerid, COLOR_WHITE, "Limba setata: romana.");
	S(playerid, COLOR_WHITE, "[EN] To set the language to english, use /en.");
	playerVariables[playerid][pLimba] = 1;
	Update(playerid, pLimbax);
	return 1;
}
CMD:en(playerid, params[])
{
	S(playerid, COLOR_WHITE, "Language set: english.");
	S(playerid, COLOR_WHITE, "[RO] Pentru a seta limba romana foloseste /ro.");
	playerVariables[playerid][pLimba] = 2;
	Update(playerid, pLimbax);
	return 1;
}
CMD:shop(playerid, params[])
{
	new szString[2048];

	strcat( szString, "{E5B70F}[+] Get Premium Points\n{FFFFFF}Premium Account - {E60000}30 {FFFFFF}premium points\niPhone - {E60000}20 {FFFFFF}premium points\nChange Nickname - {E60000}10 {FFFFFF}premium points\nClear 20 FP - {E60000}20 {FFFFFF}premium points", sizeof( szString ) );
	strcat( szString, "\nClear 10 FP - {E60000}10 {FFFFFF}premium points\nClear Warns - {E60000}20 {FFFFFF}premium points\nVehicle hidden color - {E60000}10 {FFFFFF}premium points\n5x fireworks - {E60000}1 {FFFFFF}premium points\n", sizeof( szString ) );
	strcat( szString, "\nZero skin - {E60000}30 {FFFFFF}premium points\nCJ skin - {E60000}30 {FFFFFF}premium points\nKart vehicle - {E60000}50 {FFFFFF}premium points\nDodo plane - {E60000}200 {FFFFFF}premium points", sizeof( szString ) );
	strcat( szString, "\nGet out of admin jail + gun licence for 10 hours - {E60000}10 {FFFFFF}premium points", sizeof( szString ) );

	format(szMessage, sizeof(szMessage), "{FFFFFF}Premium points: {E60000}%d{FFFFFF}", playerVariables[playerid][pPremiumPoints]);

	ShowPlayerDialog(playerid, DIALOG_SHOP, DIALOG_STYLE_LIST, szMessage, szString, "Buy", "Exit");
    return 1;
}
CMD:qshop(playerid, params[])
{
	new szString[2048];

	strcat(szString, "{FFFFFF}Clear 10 faction punish - {00C2EC}5 {FFFFFF}quest points\n{FFFFFF}Clear 20 faction punish - {00C2EC}10 {FFFFFF}quest points\n{FFFFFF}10+ fireworks - {00C2EC}2 {FFFFFF}quest points", sizeof(szString));
	strcat(szString, "\n{FFFFFF}10+ hours driving licence - {00C2EC}5 {FFFFFF}quest points\n{FFFFFF}Zero skin - {00C2EC}100 {FFFFFF}quest points\n{FFFFFF}CJ skin - {00C2EC}100 {FFFFFF}quest points\n{FFFFFF}Kart vehicle - {00C2EC}50 {FFFFFF}quest points", sizeof(szString));
	strcat(szString, "\n{FFFFFF}Vehicle hidden color - {00C2EC}15 {FFFFFF}quest points\n{FFFFFF}Get out of admin jail + gun licence for 5 hours - {00C2EC}10 {FFFFFF}quest points", sizeof(szString));
	format(szMessage, sizeof(szMessage), "{FFFFFF}Quest points: {00C2EC}%d", playerVariables[playerid][pQuestPoint]);

	ShowPlayerDialog(playerid, DIALOG_QSHOP, DIALOG_STYLE_LIST, szMessage, szString, "Buy", "Exit");
    return 1;
}
CMD:factions(playerid, params[])
{
	new string[1040], string1[1040], members;
    for(new xf = 0; xf < MAX_GROUPS; xf++)
	{
		if(strlen(groupVariables[xf][gGroupName]) >= 1 && strcmp(groupVariables[xf][gGroupName], "None", true))
	    {
	    	new stringy2[256];
			mysql_format(handle, stringy2, 256, "SELECT * FROM `players` WHERE  `Group` = '%d'", xf);
			new Cache: resultx = mysql_query (handle, stringy2);
			members = cache_get_row_count();
			cache_delete(resultx);
			
			new app = groupVariables[xf][gAplication];


			if(app == 1)
			{
			    if(playerVariables[playerid][pLimba] == 1)
			    {
        			format(string, sizeof(string),"{FFFFFF}[%d/%d]\t%s\t{36FF12}aplicatii deschise\t{FFFFFF}%d\n", members, groupVariables[xf][gSlots], groupVariables[xf][gGroupName], groupVariables[xf][gLevel]);
        			strcat(string1, string, sizeof(string1));
        		}
        		if(playerVariables[playerid][pLimba] == 2)
			    {
			    	format(string, sizeof(string),"{FFFFFF}[%d/%d]\t%s\t{36FF12}applications open\t{FFFFFF}%d\n", members, groupVariables[xf][gSlots], groupVariables[xf][gGroupName], groupVariables[xf][gLevel]);
        			strcat(string1, string, sizeof(string1));
			    }
        	}
        	else
        	{
				if(playerVariables[playerid][pLimba] == 1)
			    {
        			format(string, sizeof(string),"{FFFFFF}[%d/%d]\t%s\t{E60000}aplicatii inchise\t{FFFFFF}%d\n", members, groupVariables[xf][gSlots], groupVariables[xf][gGroupName], groupVariables[xf][gLevel]);
        			strcat(string1, string, sizeof(string1));
        		}
        		if(playerVariables[playerid][pLimba] == 2)
			    {
			    	format(string, sizeof(string),"{FFFFFF}[%d/%d]\t%s\t{E60000}applications closed\t{FFFFFF}%d\n", members, groupVariables[xf][gSlots], groupVariables[xf][gGroupName], groupVariables[xf][gLevel]);
        			strcat(string1, string, sizeof(string1));
			    }
        	}
        }
    }
    format(string, sizeof(string), "Faction members\tFaction name\tStatus applications\tMinimum level\n%s", string1);
    ShowPlayerDialog(playerid, DIALOG_FACTIONS, DIALOG_STYLE_TABLIST_HEADERS, "Factions:", string, "Select", "Exit");
    return 1;
}  
CMD:gps(playerid, params[])
{
	return cmd_locations(playerid, params);
}
CMD:where(playerid, params[])
{
	return cmd_locations(playerid, params);
}
CMD:locations(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(CP[playerid] == 0)
		{
			ShowPlayerDialog(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "Locatii importante:", "Driving School (DMV)\nLos Santos\nFaction HQs\nDealership\nEvent Place", "Alege", "Inchide");
		}
		else
		{
			if(playerVariables[playerid][pLimba] == 1)
			{
		    	ShowPlayerDialog(playerid, DIALOG_GPSS, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpointul curent?", "Da", "Nu");
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				ShowPlayerDialog(playerid, DIALOG_GPSS, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
			}
		}
	}
	return 1;
}
CMD:ad(playerid, params[])
{
    new string[256], message[256], idx, adss=0, time, time2;

	if(AdvPlayer[playerid] != 0)
	{
		SS(playerid, COLOR_IN2, "Anuntul tau:", "Your ad:");
		S(playerid,  COLOR_IN2, AdvMSG[playerid]);
		SS(playerid,  COLOR_IN2, "Pentru a-ti sterge anuntul, foloseste /deletemyad.", "To delete your ad, use /deletemyad.");
		return 1;
	}
		
    if(playerVariables[playerid][pLevel] < 3) return S(playerid, COLOR_WHITE, "You don't have level 3.");
    if(playerVariables[playerid][pPhoneNumber] < 1000) return SS(playerid, COLOR_WHITE, "Trebuie sa ai un telefon pentru a putea plasa un anunt.", "You need to own a phone to place an ad.");
    if(IsAtCNN(playerid))
	{
	    if(sscanf(params, "s[256]", message)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/ad [message]");
	    
	    if(FindIP(message) || GasesteReclama(message))
		{
		    if(playerVariables[playerid][pMuted] == 0)
		    {
				format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising in /ad: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], message);
				submitToStaff(szMessage, COLOR_RED);
			}
			SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
			playerVariables[playerid][pMuted] += 20;
			return 1;
		}
	    
  		foreach(Player, i)
		{
			if(AdvPlayer[i] != 0)
			{
				adss++;
			}
		}
		if(adss >= 15) return SS(playerid, COLOR_WHITE, "Sunt prea multe anunturi in asteptare. Incearca mai tarziu!", "There too many ads in the waiting line. Try again later.");
		
		if(adss > 0)
		{
			time = (adss + 1) * 30 * 1000;
			time2 = (adss + 1) * 30;
		}
		else if(adss == 0)
		{
			time = 30000;
			time2 = 30;
		}
		
		new length = strlen(params);
		while ((idx < length) && (params[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;

		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = params[idx];
			idx++;
		}
		result[idx - offset] = EOS;

		new payout = idx * 40;
		if(GetPlayerCash(playerid) < payout) return S(playerid, COLOR_WHITE, "You don't have enough money.");

		GivePlayerCash(playerid, -payout);
		
		format(AdvMSG[playerid], 256, "%s", message);
		format(string, sizeof(string),"Ad by %s ({FFFFFF}%d{00FF00}): %s", GetName(playerid), playerid, message);

		foreach(Player, i)
		{
			if(playerVariables[i][pAdminLevel] > 0 || playerVariables[i][pHelperLevel] > 0)
			{
				SendSplitMessage(i, COLOR_GREEN, string);
			}
		}
		AdvPlayer[playerid] = 1;
		AdvTimer[playerid] = SetTimerEx("PlaceAD", time, false, "i", playerid);
		
		if(playerVariables[playerid][pLimba] == 1)
		{
        	format(string, sizeof(string), "Ai platit $%s pentru anunt. Anuntul tau va fi afisat in %d secunde.", NumberFormat(payout), time2);
        	S(playerid, COLOR_IN2, string);
        }
        if(playerVariables[playerid][pLimba] == 2)
		{
        	format(string, sizeof(string), "You payed $%s for the ad. Your ad will be showed in %d seconds.", NumberFormat(payout), time2);
        	S(playerid, COLOR_IN2, string);
        }
        
        mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[userid:%d] placed the /ad: %s', 'anunt', '%d')", playerVariables[playerid][pUsername], playerVariables[playerid][pID], AdvMSG[playerid], playerVariables[playerid][pID]);
		mysql_query(handle, szLargeString);
		
		if(IsPlayerInRangeOfPoint(playerid, 5.0, businessVariables[29][bExteriorPos][0], businessVariables[29][bExteriorPos][1], businessVariables[29][bExteriorPos][2]))
		{
   			businessVariables[29][bVault] += payout;
		   	saveBusiness(29);
		}
	}
	else return S(playerid, COLOR_GREY, "You are not near CNN.");
	return 1;
}
CMD:deletemyad(playerid, params[])
{
	if(AdvPlayer[playerid] != 0)
	{
		KillTimer(AdvTimer[playerid]);
		AdvPlayer[playerid] = 0;
		format(AdvMSG[playerid], 256, "");
		SS(playerid, COLOR_ERROR, "Anuntul tau a fost sters.", "Your /ad has been deleted.");
	}
	else return SS(playerid, COLOR_ERROR, "Nu ai niciun anunt dat.", "You don't have any /ad pending.");
	return 1;
}
CMD:da(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
		if(playerVariables[playerid][pAdminLevel] > 0 || playerVariables[playerid][pHelperLevel] > 0)
		{
			new id, string[256];
			
			if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/da [playerid]");
			if(IsPlayerConnected(id))
			{
				if(AdvPlayer[id] != 0)
				{
					KillTimer(AdvTimer[id]);
					AdvPlayer[id] = 0;
					format(AdvMSG[id], 256, "");

					format(string, sizeof(string),"(/deletead) %s has deleted %s's ad.", N(playerid), GetName(id));
					submitToStaff(string, COLOR_YELLOW3);
				}
				else return S(playerid, COLOR_GREY, "This player don't have an ad placed.");
			}
			else return S(playerid, COLOR_GREY, "Error: Player not connected.");
		}
		else return S(playerid, -1, StaffOnly);
	}
	return 1;
}

CMD:fill(playerid, params[])
{
	new idcar = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
        
        if(IsAtGasStation(playerid))
  		{
			if(engine == 0)
			{
			    if(IsAPlane(idcar) || IsABoat(idcar)) return SS(playerid, -1, "Acest vehicul nu are nevoie de benzina!", "This vehicle doesn't need gas!");
			    
				SetTimerEx("Fillup", 10000, 0, "i", playerid);
       			Refueling[idcar] = idcar;
       			fuelmasina[playerid] = idcar;
		    }
		    else return SS(playerid, COLOR_GREY, "Trebuie sa opresti motorul vehiculului inainte de a folosi aceasta comanda!", "You need to stop your engine before refuelling!");
    	}
    }
    else return SS(playerid, -1, "Trebuie sa fii soferul vehiculului pentru a folosi aceasta comanda.", "You need to be in a vehicle as a driver!");
	return 1;
}
CMD:quests(playerid, params[])
{
	new string[256];
	
	if(playerVariables[playerid][pQuest] == 0)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(string, sizeof(string), "Jefuieste o afacere. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(string, sizeof(string), "Rob a business. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
	}
 	if(playerVariables[playerid][pQuest] == 1)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(string, sizeof(string), "Urca pe muntele Chilliad. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(string, sizeof(string), "Climb the Chilliad mountain. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
	}
 	if(playerVariables[playerid][pQuest] == 2)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(string, sizeof(string), "Cumpara droguri si folosestele. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(string, sizeof(string), "Buy drugs and use them. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
	}
	if(playerVariables[playerid][pQuest] == 3)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(string, sizeof(string), "Mergi intr-un bar si imbata-te. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(string, sizeof(string), "Go to a bar and get drunk. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
	}
	if(playerVariables[playerid][pQuest] == 4)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(string, sizeof(string), "Mergi la farul de pe plaja Santa Maria Beach. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(string, sizeof(string), "Go to the lighthouse on the Santa Maria Beach. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
	}
	if(playerVariables[playerid][pQuest] == 5)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
	        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
	        {
				format(string, sizeof(string), "Misiune: Vinde %d pesti. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
			else
			{
				format(string, sizeof(string), "Misiune: Vinde %d pesti. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
	        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
	        {
				format(string, sizeof(string), "Quest: Sell %d fishes. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
			else
			{
				format(string, sizeof(string), "Quest: Sell %d fishes. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
	}
 	if(playerVariables[playerid][pQuest] == 6)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(string, sizeof(string), "Mergi la skate-park cu un Bike. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(string, sizeof(string), "Go to the skate-park with a Bike. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
	}
	if(playerVariables[playerid][pQuest] == 7)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(string, sizeof(string), "Sari cu parasuta. Progres: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(string, sizeof(string), "Jump with a parachute. Progress: %d/1.", playerVariables[playerid][pQuestValue]);
			S(playerid, COLOR_YELLOW, string);
		}
	}
	if(playerVariables[playerid][pQuest] == 8)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
	        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
	        {
				format(string, sizeof(string), "Vinde %d saci de faina. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
			else
			{
				format(string, sizeof(string), "Vinde %d saci de faina. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
	        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
	        {
				format(string, sizeof(string), "Sell %d flour bags. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
			else
			{
				format(string, sizeof(string), "Sell %d flour bags. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
	}
	if(playerVariables[playerid][pQuest] == 9)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
	        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
	        {
				format(string, sizeof(string), "Transporta %d pizza. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
			else
			{
				format(string, sizeof(string), "Transporta %d pizza. Progres: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
	        if(playerVariables[playerid][pQuestValue] < playerVariables[playerid][pQuestPrins])
	        {
				format(string, sizeof(string), "Transport %d pizza. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestValue], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
			else
			{
				format(string, sizeof(string), "Transport %d pizza. Progress: %d/%d.", playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins], playerVariables[playerid][pQuestPrins]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
	}
	
	
 	if(playerVariables[playerid][pQuest2] == 0)
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
			format(string, sizeof(string), "Parcurge distanta de %dKM cu un vehicul de tip Bike. Progres: %d/%d.", playerVariables[playerid][pQuest2Prins], playerVariables[playerid][pQuest2Value], playerVariables[playerid][pQuest2Prins]);
			S(playerid, COLOR_YELLOW, string);
		}
		if(playerVariables[playerid][pLimba] == 2)
	    {
			format(string, sizeof(string), "Drive %dKM with a Bike. Progress: %d/1.", playerVariables[playerid][pQuest2Prins], playerVariables[playerid][pQuest2Value], playerVariables[playerid][pQuest2Prins]);
			S(playerid, COLOR_YELLOW, string);
		}
	}

	
	S(playerid, COLOR_YELLOW, "-----------------------------------------------------------------");
	SS(playerid, COLOR_YELLOW, "Info: In fiecare seara la ora 00:00 misiunile se reseteaza.", "Info: Every night at 00:00 quests are reset.");
    S(playerid, COLOR_YELLOW, "-----------------------------------------------------------------");
	return 1;
}
CMD:rob(playerid, params[])
{
	if(groupVariables[playerVariables[playerid][pGroup]][gGroupType] == 1) return S(playerid, COLOR_GREY, "You are cop, you can't rob the business.");

	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
		if(playerVariables[playerid][pWanted] == 0)
		{
			if(playerVariables[playerid][pLevel] >= 3)
	 		{
				if(playerVariables[playerid][pDonate] == 0)
				{
					if(playerVariables[playerid][pRobPoints] >= 10)
					{
					    if(playerVariables[playerid][pQuest] == 0 && playerVariables[playerid][pQuestValue] == 0)
					    {
					        new string[256];
					        SS(playerid, COLOR_YELLOW, "Misiunea [Jefuieste o afacere] a fost terminata!", "Quest [Rob a business] was finished!");

							playerVariables[playerid][pQuestValue] = 1;
							Update(playerid, pQuestValuex);

							playerVariables[playerid][pQuestPoint] ++;
							Update(playerid, pQuestPointx);

							playerVariables[playerid][pRespectPoints] ++;
							Update(playerid, pRespectPointsx);

                            new value = 5000 * playerVariables[playerid][pLevel];
                            GivePlayerCash(playerid, value);

							if(playerVariables[playerid][pLimba] == 1)
							{
								format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
								S(playerid, COLOR_YELLOW, string);
							}
							if(playerVariables[playerid][pLimba] == 2)
							{
								format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
								S(playerid, COLOR_YELLOW, string);
							}
							
							mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Jefuieste o afacere] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[playerid][pUsername], playerVariables[playerid][pID], NumberFormat(value), playerVariables[playerid][pID]);
							mysql_query(handle, szLargeString);
						}
						playerVariables[playerid][pRobPoints] -= 10;
						Update(playerid, pRobPointsx);
						
						SetPlayerWantedLevel(playerid, 6);
						playerVariables[playerid][pWanted] = 6;
				 		Update(playerid, pWantedx);
						WantedTime[playerid] = 900;

						RobTime[playerid] = 10;

						S(playerid, COLOR_TEAL, "Robbing the business...");
						S(playerid, COLOR_TEAL, "Please wait 10 seconds...");
					}
					else return SS(playerid, COLOR_GREY, "Nu ai 10 rob points.", "You don't have 10 rob points.");
				}
				else if(playerVariables[playerid][pDonate] == 1)
				{
					if(playerVariables[playerid][pRobPoints] >= 8)
					{
					    if(playerVariables[playerid][pQuest] == 0 && playerVariables[playerid][pQuestValue] == 0)
					    {
					        new string[256];
					        SS(playerid, COLOR_YELLOW, "Misiunea [Jefuieste o afacere] a fost terminata!", "Quest [Rob a business] was finished!");

							playerVariables[playerid][pQuestValue] = 1;
							Update(playerid, pQuestValuex);

							playerVariables[playerid][pQuestPoint] ++;
							Update(playerid, pQuestPointx);

							playerVariables[playerid][pRespectPoints] ++;
							Update(playerid, pRespectPointsx);

                            new value = 5000 * playerVariables[playerid][pLevel];
                            GivePlayerCash(playerid, value);

							if(playerVariables[playerid][pLimba] == 1)
							{
								format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
								S(playerid, COLOR_YELLOW, string);
							}
							if(playerVariables[playerid][pLimba] == 2)
							{
								format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
								S(playerid, COLOR_YELLOW, string);
							}

							mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Jefuieste o afacere] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[playerid][pUsername], playerVariables[playerid][pID], NumberFormat(value), playerVariables[playerid][pID]);
							mysql_query(handle, szLargeString);
						}
						playerVariables[playerid][pRobPoints] -= 8;
						Update(playerid, pRobPointsx);
						
						SetPlayerWantedLevel(playerid, 6);
						playerVariables[playerid][pWanted] = 6;
				 		Update(playerid, pWantedx);
						WantedTime[playerid] = 900;

						RobTime[playerid] = 10;
						
						S(playerid, COLOR_TEAL, "Robbing the business...");
						S(playerid, COLOR_TEAL, "Please wait 10 seconds...");
					}
					else return SS(playerid, COLOR_GREY, "Nu ai 8 rob points.", "You don't have 8 rob points.");
				}
			}
			else return SS(playerid, -1, "Ai nevoie de minim level 3 pentru a jefui o afacere.", "You need to have level 3+ to rob the business.");
		}
		else return SS(playerid, COLOR_GREY, "Nu poti jefui business-ul deoarece ai wanted.", "You can't rob this business because you are wanted.");
	}
	else return SS(playerid, -1,"{B8F572}Trebuie sa fii in interiorul unui business pentru a-l jefui.", "{B8F572}You must be inside a business to rob it.");
	return 1;
}
CMD:jobs(playerid, params[])
{
	if(playerVariables[playerid][pCheckpoint] < 1)
	{
		if(playerVariables[playerid][pCheckpointJob] < 1)
		{
			new szDialogString[300];
			for(new xf = 0; xf < MAX_JOBS; xf++)
			{
				if(strlen(jobVariables[xf][jJobName]) >= 1 && strcmp(jobVariables[xf][jJobName], "None", true))
				{
					format(szDialogString, sizeof(szDialogString), "%s%s\n", szDialogString, jobVariables[xf][jJobName]);
				}
			}
			if(playerVariables[playerid][pLimba] == 1)
			{
				ShowPlayerDialog(playerid, DIALOG_JOB, DIALOG_STYLE_LIST, "Locuri de munca:", szDialogString, "Alege", "Inchide");
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				ShowPlayerDialog(playerid, DIALOG_JOB, DIALOG_STYLE_LIST, "Jobs:", szDialogString, "Choose", "Cancel");
			}
		}
  		else
		{
			ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
		}
	}
	else
	{
		ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
	}
	return 1;
}
CMD:quitgroup(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    new query[256];
	    if(playerVariables[playerid][pGroupRank] >= 7) return S(playerid, COLOR_GREY, "Nu poti parasi factiunea daca esti leader!");
		
	    if(playerVariables[playerid][pGroup] < 1) return S(playerid, COLOR_GREY, "You are not a member of a group.");
        else if(playerVariables[playerid][pGroup] >= 1 && playerVariables[playerid][pGroupRank] <= 6)
		{
		    format(query, 256, "SELECT * FROM `players` WHERE `Group` = '%d' AND `GroupRank` = '7'", playerVariables[playerid][pGroup]);
		    new Cache: masta = mysql_query(handle, query);

			if(cache_get_row_count() >= 1)
			{
			    if(playerVariables[playerid][pLimba] == 1)
			    {
					ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"/quitgroup","Esti sigur ca vrei sa parasesti factiunea din care faci parte?\nVei primi 20 FP.", "Da","Nu");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"/quitgroup","Are you sure you want to quit from your faction?\nYou will receive 20 FP.", "Yes","No");
				}
			}
			else
			{
			    if(playerVariables[playerid][pLimba] == 1)
			    {
					ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"/quitgroup","Esti sigur ca vrei sa parasesti factiunea din care faci parte?\nNu vei primi FP deoarece factiunea nu are lider.","Da","Nu");
				}
    			if(playerVariables[playerid][pLimba] == 2)
			    {
					ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"/quitgroup","Are you sure you want to quit from your faction?\nBecause you will not get FP factions has no leader.","Da","Nu");
				}
			}
			cache_delete(masta);
   		}
	}
	return 1;
}
CMD:turfs(playerid, params[])
{
	if(turfshow[playerid] == 0)
	{
	    SS(playerid, COLOR_WHITE, "Turfuri activate.", "Turfs enabled.");
		turfshow[playerid] = 1;
		for(new i = 0; i < sizeof(Turfs); i++)
 		{
			if(TurfInfo[i][zOwned] == 8)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0x40863CAA);
			}
			if(TurfInfo[i][zOwned] == 9)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0xBD1CDEC8);
			}
		}
	}
	else
	{
	    SS(playerid, COLOR_WHITE, "Turfuri dezactivate.", "Turfs disabled.");
		turfshow[playerid] = 0;
		for(new i = 0; i < sizeof(Turfs); i++)
		{
			GangZoneHideForPlayerEx(playerid, Turfs[i]);
		}
	}
	return 1;
}
CMD:top(playerid, params[])
{
	new p=0, x=0, string[200];
	
    for(new i = 1; i < sizeof(Turfs); i++)
	{
		if(TurfInfo[i][zOwned] == 8)
		{
		    x++;
		}
		if(TurfInfo[i][zOwned] == 9)
		{
		    p++;
		}
	}
	S(playerid, -1,"----- TOP GANGS -----");
	
	format(string, sizeof(string),"Grove Street - %d turfs", x);
	S(playerid, -1,string);
	format(string, sizeof(string),"Ballas - %d turfs", p);
	S(playerid, -1,string);
	return 1;
}


CMD:getjob(playerid, params[])
{
	new string[72];
	if(playerVariables[playerid][pJob] < 1)
	{
		for(new h = 0; h < sizeof(jobVariables); h++)
		{
  			if(IsPlayerInRangeOfPoint(playerid, 5, jobVariables[h][jJobPosition][0], jobVariables[h][jJobPosition][1], jobVariables[h][jJobPosition][2]))
			{
   				if(playerVariables[playerid][pLimba] == 1)
				{
		 			format(string, sizeof(string), "Job-ul tau este acum: %s", jobVariables[h][jJobName]);
   					S(playerid, COLOR_LIGHTBLUE, string);
		 		}
		 		if(playerVariables[playerid][pLimba] == 2)
				{
				    format(string, sizeof(string), "Your job is now: %s", jobVariables[h][jJobName]);
   					S(playerid, COLOR_LIGHTBLUE, string);
				}
   				playerVariables[playerid][pJob] = h;
   				Update(playerid, pJobx);
			}
		}
	}
	else return SS(playerid, -1, "Ai deja un job. Foloseste [/quitjob] pentru a renunta la job-ul actual.", "You already have a job. Use [/quitjob] to quit your job.");
	return 1;
}
CMD:quitjob(playerid, params[])
{
	if(playerVariables[playerid][pJob] >= 1)
	{
  		if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))) return SS(playerid, -1, "{BFFF8B}Poti folosi aceasta comanda doar cand nu te afli intr-un vehicul.", "{BFFF8B}You can't use this command while you're in a vehicle.");
  		
  		SS(playerid, COLOR_GREY, "Tu ai demisionat.", "You have quit your job.");
		playerVariables[playerid][pJob] = 0;
	    Update(playerid, pJobx);
	    
	    DisablePlayerRaceCheckpoint(playerid);
		playerVariables[playerid][pCheckpointPizza] = 0;
		activpizza[playerid] = 0;
		pizzaprize[playerid] = 0;
	}
	else return SS(playerid, COLOR_WHITE, "Tu nu ai un loc de munca.", "You don't have a Job.");
	return 1;
}
CMD:premium(playerid, params[])
{
    if(IsPlayerConnected(playerid))
 	{
 	    if(playerVariables[playerid][pLimba] == 1)
 	    {
 			ShowPlayerDialog(playerid, DIALOG_PREMIUM, DIALOG_STYLE_MSGBOX, "Avantaje cont premium", "Acces la comanda /pcolor cu care iti poti schimba culoarea nick-ului pe chat.\nLa fiecare PayDay castigi o suma de bani bonus pe langa cei primiti in banca.", "OK", "");
 		}
 		if(playerVariables[playerid][pLimba] == 2)
 	    {
 			ShowPlayerDialog(playerid, DIALOG_PREMIUM, DIALOG_STYLE_MSGBOX, "Avantaje cont premium", "Acces la comanda /pcolor cu care iti poti schimba culoarea nick-ului pe chat.\nLa fiecare PayDay castigi o suma de bani bonus pe langa cei primiti in banca.", "OK", "");
 		}
 	}
 	return 1;
}
CMD:puthat(playerid,params[])
{
	if(playerVariables[playerid][pHat] >= 1)
	{
		if(pUseHat[playerid] == 0)
		{
			pUseHat[playerid] = 1;
			format(szMessage, sizeof(szMessage), "* %s puts on his hat.", GetName(playerid));
			nearByMessage(playerid, COLOR_PURPLE, szMessage);
			new skin;
			skin = GetPlayerSkin(playerid);
			SetPlayerAttachedObject(playerid, 0, playerVariables[playerid][pHat], 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5], 1.000000, 1.000000, 1.000000);

		}
	}
 	else return SS(playerid, -1, "Nu detii o palarie.", "You don't have any hat.");
    return 1;
}
CMD:removehat(playerid,params[])
{
	if(playerVariables[playerid][pHat] >= 1)
	{
		if(pUseHat[playerid] == 1)
		{
			pUseHat[playerid] = 0;
			format(szMessage, sizeof(szMessage), "* %s takes off his hat.", GetName(playerid));
			nearByMessage(playerid, COLOR_PURPLE, szMessage);
			RemovePlayerAttachedObject(playerid, 0);
		}
	}
	else return SS(playerid, -1, "Nu detii o palarie.", "You don't have any hat.");
 	return 1;
}

CMD:putglasses(playerid,params[])
{
	if(playerVariables[playerid][pGlasses] >= 1)
	{
		if(pUseGlasses[playerid] == 0)
		{
			pUseGlasses[playerid] = 1;
			format(szMessage, sizeof(szMessage), "* %s puts on his sunglasses.", GetName(playerid));
			nearByMessage(playerid, COLOR_PURPLE, szMessage);
			SetPlayerAttachedObject(playerid,1,playerVariables[playerid][pGlasses],2,0.1,0.04,0.0,60.0,85.0,25.0,1.0,1.0,1.0);
		}
	}
 	else return SS(playerid, -1, "Nu detii o pereche de ochelari.", "You don't have any sunglasses.");
    return 1;
}
CMD:removeglasses(playerid,params[])
{
	if(playerVariables[playerid][pGlasses] >= 1)
	{
		if(pUseGlasses[playerid] == 1)
		{
			pUseGlasses[playerid] = 0;
			format(szMessage, sizeof(szMessage), "* %s takes off his sunglasses.", GetName(playerid));
			nearByMessage(playerid, COLOR_PURPLE, szMessage);
			RemovePlayerAttachedObject(playerid, 1);
		}
	}
	else return SS(playerid, -1, "Nu detii o pereche de ochelari.", "You don't have any sunglasses.");
 	return 1;
}

//------------------------------ Arms Dealer Job ---------------------------------------
CMD:getmats(playerid, params[])
{
    if(playerVariables[playerid][pJob] == 1)
	{
		if(playerVariables[playerid][pCheckpoint] >= 1)
		{
			ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
		}
		else
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, 590.0392,-1509.1411,15.3347))
			{
				SS(playerid, -1, "Mergi la checkpoint pentru a colecta materialele.","Reach the checkpoint to collect your materials.");
				SetPlayerCheckpoint(playerid, 2538.5061,-960.6543,82.1342, 5.0);
				playerVariables[playerid][pCheckpoint] = 4;
				playerVariables[playerid][pMatsTime] = 1;
				playerVariables[playerid][pAreMats] = 1;
	  		}
	   		else
	   		{
	   			SS(playerid, COLOR_IN2, "Mergi la checkpoint pentru a colecta materialele.","Go to the checkpoint to get materials for guns.");
				SetPlayerCheckpoint(playerid, 590.0392,-1509.1411,15.3347, 5.0);
				playerVariables[playerid][pCheckpoint] = 3;
			}
		}
   	}
	else return SS(playerid, -1, "Tu nu esti 'Arms dealer'.","You are not an 'Arms dealer'.");
	return 1;
}
CMD:sellgun(playerid, params[])
{
    if(playerVariables[playerid][pJob] == 1)
	{
		new id, price, weapon[15], weaponn, string[128];
		if(sscanf(params, "us[10]d", id, weapon, price))
		{
			S(playerid, COLOR_WHITE, "Usage: /sellgun [playerid] [weapon name] [price]");
			S(playerid, COLOR_WHITE, "Weapons: Deagle(350 mats), M4(500 mats), AK47(500 mats), Shotgun (400 mats), MP5 (300 mats), Rifle (450 mats)");
			return 1;
		}
		if(id != INVALID_PLAYER_ID)
  		{
			if(playerVariables[id][pCash] >= price)
			{
				if(playerVariables[id][pLicentaArme] >= 1)
				{
	  				if(price >= 1)
					{
						if(price <= 10000)
						{
							if(strcmp(weapon,"deagle",true) == 0) { if(playerVariables[playerid][pMaterials] >= 350) weaponn = 24;  else { S(playerid, COLOR_GREY, "Not enough Materials for that Weapon."); return 1; } }
							else if(strcmp(weapon,"m4",true) == 0) { if(playerVariables[playerid][pMaterials] >= 500) weaponn = 31; else {  S(playerid, COLOR_GREY, "Not enough Materials for that Weapon."); return 1; } }
							else if(strcmp(weapon,"ak47",true) == 0) { if(playerVariables[playerid][pMaterials] >= 500)  weaponn = 30; else { S(playerid, COLOR_GREY, "Not enough Materials for that Weapon."); return 1; } }
							else if(strcmp(weapon,"shotgun",true) == 0) {	if(playerVariables[playerid][pMaterials] >= 400) weaponn = 25; else { S(playerid, COLOR_GREY, "Not enough Materials for that Weapon."); return 1; } }
							else if(strcmp(weapon,"mp5",true) == 0) { if(playerVariables[playerid][pMaterials] >= 300) weaponn = 29; else { S(playerid, COLOR_GREY, "Not enough Materials for that Weapon."); return 1; } }
							else if(strcmp(weapon,"rifle",true) == 0) { if(playerVariables[playerid][pMaterials] >= 450) weaponn = 33; else { S(playerid, COLOR_GREY, "Not enough Materials for that Weapon."); return 1; } }
							else return S(playerid, COLOR_GREY, "Invalid weapon name!");
						
	                        if(id == playerid) return S(playerid, COLOR_WHITE, "Nu iti poti vinde tie insuti arme.");
							if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
							{
							    if(playerVariables[playerid][pTimerSellGun] <= 0)
								{
								    playerVariables[playerid][pTimerSellGun] = 10;
								    
								    format(string, sizeof(string), "* You offerd %s a %s for $%s.", playerVariables[id][pUsername], weapon, NumberFormat(price));
									SendClientMessage(playerid, COLOR_IN2, string);
									format(string, sizeof(string), "* %s wants to sell you a %s for $%s, (use /accept gun %d) to accept.", playerVariables[playerid][pUsername], weapon, NumberFormat(price), playerid);
									SendClientMessage(id, COLOR_LIGHTBLUE, string);

									GunOffer[playerid] = id;
									GunOffered[id] = playerid;
									GunPrice[id] = price;
								    GunModel[id] = weaponn;

								}
								else
								{
									if(playerVariables[playerid][pLimba] == 1)
							    	{
										format(szMessage, 256, "Poti folosi aceasta comanda in %d secunde.",playerVariables[playerid][pTimerSellGun]);
										S(playerid,COLOR_DEELAY,szMessage);
									}
									if(playerVariables[playerid][pLimba] == 2)
							    	{
							    		format(szMessage, 256, "You need to wait %d seconds before using /sellgun again.",playerVariables[playerid][pTimerSellGun]);
										S(playerid,COLOR_DEELAY,szMessage);
									}
								}
							}
							else
							{
								if(playerVariables[playerid][pLimba] == 1)
							    {
									S(playerid, -1, "Esti prea departe de acest jucator.");
								}
								if(playerVariables[playerid][pLimba] == 2)
							    {
									S(playerid, -1, "You're too far away from this player.");
								}
							}
						}
						else
						{
							if(playerVariables[playerid][pLimba] == 1)
							{
								S(playerid,COLOR_WHITE,"Pretul trebuie sa fie cuprins intre $1 si $10,000.");
							}
							if(playerVariables[playerid][pLimba] == 2)
							{
								S(playerid,COLOR_WHITE,"Price must be between $1 and $10,000.");
							}
						}
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
						{
							S(playerid,COLOR_WHITE,"Pretul trebuie sa fie cuprins intre $1 si $10,000.");
						}
						if(playerVariables[playerid][pLimba] == 2)
						{
							S(playerid,COLOR_WHITE,"Price must be between $1 and $10,000.");
						}
					}
				}
				else
				{
					if(playerVariables[playerid][pLimba] == 1)
				    {
						S(playerid, -1, "Acel player nu are licenta de arme.");
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
						S(playerid, -1, "That player has no license guns.");
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid, -1, "Acest jucator nu are destui bani pentru a cumpara arma oferita de tine.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid, -1, "This player does not have enough money to buy the weapon offered by you.");
				}
			}
		}
		else
		{
			if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, COLOR_GREY, "Acel player nu este conectat.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			}
		}
	}
	else
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
			S(playerid,COLOR_WHITE,"Tu nu esti 'Arms dealer'.");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			S(playerid,COLOR_WHITE,"You are not an 'Arms dealer'.");
		}
	}
	return 1;
}
CMD:sellmats(playerid, params[])
{
	if(playerVariables[playerid][pJob] == 1)
	{
		new id, amount, price;
		if(sscanf(params, "uii", id, amount, price)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/sellmats [playerid] [amount] [price]");

		if(playerVariables[playerid][pMaterials] >= amount)
		{
			if(id != INVALID_PLAYER_ID)
			{
				if(playerVariables[id][pCash] >= price)
				{
				    if(price >= 1 && price <= 10000000)
					{
						if(amount >= 1)
						{
						    if(id == playerid) return S(playerid, COLOR_WHITE, "Nu iti poti vinde tie insuti materiale.");
						    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
							{
							    if(playerVariables[playerid][pTimerSellMats] < 1)
								{
								    playerVariables[playerid][pTimerSellMats] = 10;

									matsOffer[playerid] = id;
									matsOffered[id] = playerid;
			     					matsmoney[id] = price;
			     					matsamount[id] = amount;

									if(playerVariables[playerid][pLimba] == 1)
								    {
										format(szMessage, sizeof(szMessage), "* I-ai oferit %s materiale lui %s pentru $%s.", NumberFormat(amount), GetName(id), NumberFormat(price));
										S(playerid, COLOR_IN2, szMessage);
									}
									if(playerVariables[id][pLimba] == 1)
								    {
										format(szMessage, sizeof(szMessage), "* %s ti-a oferit %s materiale pentru $%s. Foloseste /accept mats %d pentru a cumpara materialele.", GetName(playerid), NumberFormat(amount), NumberFormat(price), playerid);
										S(id, COLOR_LIGHTBLUE, szMessage);
									}
									if(playerVariables[playerid][pLimba] == 2)
								    {
										format(szMessage, sizeof(szMessage), "* I've provided %s materials to %s for $%s.", NumberFormat(amount), GetName(id), NumberFormat(price));
										S(playerid, COLOR_IN2, szMessage);
									}
									if(playerVariables[id][pLimba] == 2)
									{
										format(szMessage, sizeof(szMessage), "* %s offered you %s materials for $%s. Use /accept mats %d to buy materials.", GetName(playerid), NumberFormat(amount), NumberFormat(price), playerid);
										S(id, COLOR_LIGHTBLUE, szMessage);
									}
								}
								else
								{
									if(playerVariables[playerid][pLimba] == 1)
							    	{
										format(szMessage, 256, "Poti folosi aceasta comanda in %d secunde.",playerVariables[playerid][pTimerSellMats]);
										S(playerid,COLOR_DEELAY,szMessage);
									}
									if(playerVariables[playerid][pLimba] == 2)
							    	{
							    		format(szMessage, 256, "You need to wait %d seconds before using /sellmats again.",playerVariables[playerid][pTimerSellMats]);
										S(playerid,COLOR_DEELAY,szMessage);
									}
								}
							}
							else
							{
								if(playerVariables[playerid][pLimba] == 1)
							    {
									S(playerid, -1, "Esti prea departe de acest jucator.");
								}
								if(playerVariables[playerid][pLimba] == 2)
							    {
									S(playerid, -1, "You're too far away from this player.");
								}
							}
						}
						else
						{
							if(playerVariables[playerid][pLimba] == 1)
						    {
								S(playerid, -1, "Nu poti face schimbul fara materiale.");
							}
							if(playerVariables[playerid][pLimba] == 2)
						    {
								S(playerid, -1, "You can't do without materials.");
							}
						}
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
					    {
							S(playerid, -1, "Pretul materialelor trebuie sa fie intre $1 si $10.000.000");
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
							S(playerid, -1, "The price of the materials must be between $1 and $10.000.000");
						}
					}
				}
				else
				{
					if(playerVariables[playerid][pLimba] == 1)
				    {
						S(playerid, -1, "Acest jucator nu are destui bani pentru aceste materiale.");
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
						S(playerid, -1, "This player does not have enough money for this mats!");
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid, COLOR_GREY, "Acel player nu este conectat.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
				}
			}
		}
		else
		{
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, -1, "Tu nu ai destule materiale.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, -1, "You don't have enough mats.");
			}
		}
	}
 	else
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
			S(playerid,COLOR_WHITE,"Tu nu esti 'Arms dealer'.");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			S(playerid,COLOR_WHITE,"You are not an 'Arms dealer'.");
		}
	}
	return 1;
}


//------------------------------------- Detective job ----------------------------------------------------------
CMD:find(playerid, params[])
{
	if(playerVariables[playerid][pJob] == 2 || playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pGroup] == 4 || groupVariables[playerVariables[playerid][pGroup]][gGroupType] == 1)
	{
		new targetID;
		if(sscanf(params, "i", targetID)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/find [playerid]");
		
		if(!IsPlayerConnected(targetID)) return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		if(playerVariables[targetID][pStatus] == 0) return S(playerid, COLOR_GREY, "Nu poti folosi /find pe un player ce nu este conectat.");

		if(playerVariables[playerid][pCheckpoint] > 0) return ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
		if(playerVariables[playerid][pCheckpointJob] < 1)
		{
		    if(playerVariables[targetID][pAdminDuty] == 0)
			{
			    if(targetID == playerid)
				{
					if(playerVariables[playerid][pLimba] == 1)
				    {
						S(playerid, -1, "Nu poti folosi /find pe tine.");
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
						S(playerid, -1, "You can't track yourself.");
					}
				}
				else
				{
					if(playerVariables[targetID][pAdminLevel] >= 6)
					{
						if(playerVariables[playerid][pLimba] == 1)
					    {
							S(playerid, COLOR_GREY, "Nu poti folosi /find pe owneri.");
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
							S(playerid, COLOR_GREY, "You can not use /find on an owner.");
						}
					}
					else
					{
						if(WatchingTV[targetID] == 0)
						{
							new aaa2 = GetPlayerVirtualWorld(targetID);
							if(aaa2 == 1337 || aaa2 == 1338)
							{
								if(playerVariables[playerid][pLimba] == 1)
		   						{
									S(playerid,COLOR_YELLOW,"Checkpoint dezactivat. Acel admin este ocupat.");
								}
								if(playerVariables[playerid][pLimba] == 2)
								{
									S(playerid,COLOR_YELLOW,"Checkpoint disabled. That admin is on duty.");
								}
							}
							else
							{

								JucatorCautat[playerid] = targetID;

								pUseFind[playerid] = 1;
								
								if(InHQ[targetID] > 0)
							    {
								    new j;
									j = InHQ[targetID];

									new Float: x, Float: y, Float: z;
									GetPlayerPos(playerid,x,y,z);
									new Float: distanta = GetPlayerDistanceFromPoint(playerid, groupVariables[j][gGroupExteriorPos][0], groupVariables[j][gGroupExteriorPos][1], groupVariables[j][gGroupExteriorPos][2]);

									SetPlayerCheckpoint(playerid, groupVariables[j][gGroupExteriorPos][0], groupVariables[j][gGroupExteriorPos][1], groupVariables[j][gGroupExteriorPos][2], 3.0);
									new str[500];

									format(str, sizeof(str),"TARGET: ~y~%s (%d)", playerVariables[targetID][pUsername], targetID);
									PlayerTextDrawSetString(playerid, findplayer2[playerid], str);
									PlayerTextDrawShow(playerid, findplayer2[playerid]);


									format(str,sizeof(str),"DISTANCE: ~y~%.0fm", distanta);
									PlayerTextDrawSetString(playerid, findplayer[playerid], str);
									PlayerTextDrawShow(playerid, findplayer[playerid]);
									
									if(playerVariables[playerid][pLimba] == 1)
									{
										format(szMessage, 256, "Checkpoint-ul va afisa locatia playerului %s. Distanta pana la el: %.0fm.",GetName(targetID), distanta);
										S(playerid,COLOR_YELLOW, szMessage);
									}
									if(playerVariables[playerid][pLimba] == 2)
									{
										format(szMessage, 256, "The checkpoint has been set on %s. Distance: %.0fm.",GetName(targetID), distanta);
										S(playerid,COLOR_YELLOW, szMessage);
									}
								}
							    else
							    {
									new Float: Distance = GetDistanceBetweenPlayers(playerid, targetID);
								    new str[500];
								    
								    
								    new Float: x, Float: y, Float: z;
	            					GetPlayerPos(targetID, x, y, z);
	            					SetPlayerCheckpoint(playerid, x, y, z, 3.0);

									format(str, sizeof(str),"TARGET: ~y~%s (%d)", playerVariables[targetID][pUsername], targetID);
									PlayerTextDrawSetString(playerid, findplayer2[playerid], str);
									PlayerTextDrawShow(playerid, findplayer2[playerid]);


									format(str,sizeof(str),"DISTANCE: ~y~%.0fm", Distance);
									PlayerTextDrawSetString(playerid, findplayer[playerid], str);
									PlayerTextDrawShow(playerid, findplayer[playerid]);
									
	         						if(playerVariables[playerid][pLimba] == 1)
									{
										format(szMessage, 256, "Checkpoint-ul va afisa locatia playerului %s. Distanta pana la el: %.0fm.", GetName(targetID), Distance);
										S(playerid,COLOR_YELLOW, szMessage);
									}
									if(playerVariables[playerid][pLimba] == 2)
									{
										format(szMessage, 256, "The checkpoint has been set on %s. Distance: %.0fm.", GetName(targetID), Distance);
										S(playerid,COLOR_YELLOW, szMessage);
									}
				            	}
							}
						}
						else
						{
							if(playerVariables[playerid][pLimba] == 1)
						    {
								S(playerid, COLOR_GREY, "Acel admin este ocupat. Nu poti folosi /find pe el.");
							}
							if(playerVariables[playerid][pLimba] == 2)
						    {
								S(playerid, COLOR_GREY, "That admin is busy. You can't use /find on him.");
							}
						}
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid, COLOR_GREY, "Acel admin este ocupat. Nu poti folosi /find pe el.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid, COLOR_GREY, "That admin is busy. You can't use /find on him.");
				}
			}
		}
		else
		{
			ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
		}
	}
	else
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
			S(playerid,COLOR_WHITE,"Tu nu esti 'Detectiv'.");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			S(playerid,COLOR_WHITE,"You are not a cop / detective.");
		}
	}
	return 1;
}
//-------------------------------------- Mechanic Job----------------------------------------------------
CMD:tow(playerid, params[])
{
	if(playerVariables[playerid][pJob] == 3)
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		{
	        new playerTowTruck = GetPlayerVehicleID(playerid);
	        if(!IsTrailerAttachedToVehicle(playerTowTruck))
			{
				new targetVehicle = GetClosestVehicle(playerid, playerTowTruck);
				if(!IsAPlane(targetVehicle) && !IsAMotoare(targetVehicle) && !IsAFaggio(targetVehicle) && !IsABike(targetVehicle) && !IsABoat(targetVehicle) && IsPlayerInRangeOfVehicle(playerid, targetVehicle, 10.0))
				{
					if(!IsATowtruck(targetVehicle))
					{
						if(playerVariables[playerid][pDeelayMechanic] < 1)
 						{
							AttachTrailerToVehicle(targetVehicle, playerTowTruck);
							new randomize;
							randomize = random(sizeof(mechanicTOW));
							SetPlayerCheckpoint(playerid, mechanicTOW[randomize][0], mechanicTOW[randomize][1], mechanicTOW[randomize][2], 3.0);
							playerVariables[playerid][pCheckpoint] = 5;
							if(playerVariables[playerid][pLimba] == 1)
							{
								S(playerid,-1,"Mergi la checkpoint pentru a primi banii pe masina tractata.");
							}
							if(playerVariables[playerid][pLimba] == 2)
							{
								S(playerid,-1,"Go to the checkpoint to drop the car.");
							}
						}
						else
						{
						    if(playerVariables[playerid][pLimba] == 1)
						    {
								format(szMessage, 256, "Nu poti tracta un vehicul asa repede. Poti tracta alt vehicul in %d secunde. Asteapta!", playerVariables[playerid][pDeelayMechanic]);
	   						 	S(playerid,COLOR_GREY,szMessage);
						    }
						    if(playerVariables[playerid][pLimba] == 2)
						    {
								format(szMessage, 256, "You can't drop a vehicle so fast. You can tow a car in %d seconds. Wait here!", playerVariables[playerid][pDeelayMechanic]);
	   						 	S(playerid,COLOR_GREY,szMessage);
							}
						}
					}
     				else
					{
					    if(playerVariables[playerid][pLimba] == 1)
						{
							S(playerid,COLOR_NOB,"Nu poti tracta o masina de acelasi tip 'Towtruck'.");
						}
						if(playerVariables[playerid][pLimba] == 2)
						{
							S(playerid,COLOR_NOB,"You can't tow a Towtruck.");
						}
					}
				}
	        }
	        else
			{
			    DetachTrailerFromVehicle(playerTowTruck);
				DisablePlayerCheckpoint(playerid);
				playerVariables[playerid][pCheckpoint] = 0;
			}
	    }
     	else
		{
			if(playerVariables[playerid][pLimba] == 1)
			{
				S(playerid,COLOR_WHITE,"Trebuie sa fii intr-o masina de tip 'Towtruck' pentru a putea folosi comanda.");
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				S(playerid,COLOR_WHITE,"You have to be in a 'Towtruck' vehicle to be able to use this command.");
			}
		}
	}
	else
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
			S(playerid,COLOR_WHITE,"Tu nu esti 'Mechanic'.");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			S(playerid,COLOR_WHITE,"You are not a 'Mechanic'.");
		}
	}
	return 1;
}
CMD:repair(playerid, params[])
{
	if(playerVariables[playerid][pJob] == 3)
	{
		new id,price,string[128];

		if(sscanf(params, "ui", id, price))
   		{
			S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/repair [playerid] [money]");
			return 1;
		}
		if(id != INVALID_PLAYER_ID)
		{
			if(id == playerid) return S(playerid, COLOR_WHITE, "You can't repair your own car!");
			if(price >= 1)
			{
				if(price <= 10000)
				{
					if(playerVariables[id][pCash] >= price)
					{
						if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
						{
							if(GetPlayerState(id) == PLAYER_STATE_DRIVER)
							{
							    if(playerVariables[playerid][pDeelayRepair] < 1)
 								{
									format(string, sizeof(string), "You have offered %s to repair his car for $%s!",GetName(id),NumberFormat(price));
									S(playerid, COLOR_WHITE, string);

									format(string, sizeof(string), "%s has offered you to repair your car for $%s! Type /accept repair %d to accept.",GetName(playerid),NumberFormat(price),playerid);
									S(id, COLOR_WHITE, string);

									RepairOffer[id] = playerid;
									RepairPrice[id] = price;
								}
								else
								{
								    if(playerVariables[playerid][pLimba] == 1)
								    {
										format(szMessage, 256, "Nu poti folosi aceasta comanda acum. Poti folosi din nou comanda in %d secunde.", playerVariables[playerid][pDeelayRepair]);
			   						 	S(playerid,COLOR_WHITE,szMessage);
								    }
								    if(playerVariables[playerid][pLimba] == 2)
								    {
										format(szMessage, 256, "You can't use this command now. You will be able to use the command in %d seconds. ", playerVariables[playerid][pDeelayRepair]);
			   						 	S(playerid,COLOR_WHITE,szMessage);
									}
								}
							}
							else
							{
								if(playerVariables[playerid][pLimba] == 1)
							    {
									S(playerid, -1, "Acel player nu se afla intr-o masina.");
								}
								if(playerVariables[playerid][pLimba] == 2)
							    {
									S(playerid, -1, "That player is not in a car.");
								}
							}
						}
						else
						{
							if(playerVariables[playerid][pLimba] == 1)
						    {
								S(playerid, -1, "Esti prea departe de acest jucator.");
							}
							if(playerVariables[playerid][pLimba] == 2)
						    {
								S(playerid, -1, "You're too far away from this player.");
							}
						}
					}
		     		else
					{
						if(playerVariables[playerid][pLimba] == 1)
					    {
							S(playerid, -1, "Acest jucator nu are destui bani pentru a accepta cererea ta de a-i repara masina.");
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
							S(playerid, -1, "This player doesn't have enough money to accept your request to fix his vehicle.");
						}
					}
				}
				else
				{
					if(playerVariables[playerid][pLimba] == 1)
					{
						S(playerid,COLOR_WHITE,"Pretul trebuie sa fie cuprins intre $1 si $10,000.");
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						S(playerid,COLOR_WHITE,"Price must be between $1 and $10,000.");
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
				{
					S(playerid,COLOR_WHITE,"Pretul trebuie sa fie cuprins intre $1 si $10,000.");
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					S(playerid,COLOR_WHITE,"Price must be between $1 and $10,000.");
				}
			}
		}
		else
		{
			if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, COLOR_GREY, "Acel player nu este conectat.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			}
		}
	}
 	else
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
			S(playerid,COLOR_WHITE,"Tu nu esti 'Mechanic'.");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			S(playerid,COLOR_WHITE,"You are not a 'Mechanic'.");
		}
	}
	return 1;
}
CMD:refill(playerid, params[])
{
	if(playerVariables[playerid][pJob] == 3)
	{
		new id,price,string[128];

		if(sscanf(params, "ui", id, price))
   		{
			S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/refill [playerid] [money]");
			return 1;
		}
		if(id != INVALID_PLAYER_ID)
		{
			if(id == playerid) return S(playerid, COLOR_WHITE, "You can't refill your own car!");
			if(price >= 1)
			{
				if(price <= 10000)
				{
					if(playerVariables[id][pCash] >= price)
					{
						if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
						{
							if(GetPlayerState(id) == PLAYER_STATE_DRIVER)
							{
							    if(playerVariables[playerid][pDeelayRefill] < 1)
 								{
									format(string, sizeof(string), "You have offered %s to refill his car for $%s!",GetName(id),NumberFormat(price));
									S(playerid, COLOR_WHITE, string);

									format(string, sizeof(string), "%s has offered you to refill your car for $%s! Type /accept refill %d to accept.",GetName(playerid),NumberFormat(price),playerid);
									S(id, COLOR_WHITE, string);

									RefillOffer[id] = playerid;
									RefillPrice[id] = price;
								}
								else
								{
								    if(playerVariables[playerid][pLimba] == 1)
								    {
										format(szMessage, 256, "Nu poti folosi aceasta comanda acum. Poti folosi din nou comanda in %d secunde.", playerVariables[playerid][pDeelayRefill]);
			   						 	S(playerid,COLOR_WHITE,szMessage);
								    }
								    if(playerVariables[playerid][pLimba] == 2)
								    {
										format(szMessage, 256, "You can't use this command now. You will be able to use the command in %d seconds. ", playerVariables[playerid][pDeelayRefill]);
			   						 	S(playerid,COLOR_WHITE,szMessage);
									}
								}
							}
							else
							{
								if(playerVariables[playerid][pLimba] == 1)
							    {
									S(playerid, -1, "Acel player nu se afla intr-o masina.");
								}
								if(playerVariables[playerid][pLimba] == 2)
							    {
									S(playerid, -1, "That player is not in a car.");
								}
							}
						}
						else
						{
							if(playerVariables[playerid][pLimba] == 1)
						    {
								S(playerid, -1, "Esti prea departe de acest jucator.");
							}
							if(playerVariables[playerid][pLimba] == 2)
						    {
								S(playerid, -1, "You're too far away from this player.");
							}
						}
					}
		     		else
					{
						if(playerVariables[playerid][pLimba] == 1)
					    {
							S(playerid, -1, "Acest jucator nu are destui bani pentru a accepta cererea ta de a-i repara masina.");
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
							S(playerid, -1, "This player doesn't have enough money to accept your request to fix his vehicle.");
						}
					}
				}
				else
				{
					if(playerVariables[playerid][pLimba] == 1)
					{
						S(playerid,COLOR_WHITE,"Pretul trebuie sa fie cuprins intre $1 si $10,000.");
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						S(playerid,COLOR_WHITE,"Price must be between $1 and $10,000.");
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
				{
					S(playerid,COLOR_WHITE,"Pretul trebuie sa fie cuprins intre $1 si $10,000.");
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					S(playerid,COLOR_WHITE,"Price must be between $1 and $10,000.");
				}
			}
		}
		else
		{
			if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, COLOR_GREY, "Acel player nu este conectat.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			}
		}
	}
 	else
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
			S(playerid,COLOR_WHITE,"Tu nu esti 'Mechanic'.");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			S(playerid,COLOR_WHITE,"You are not a 'Mechanic'.");
		}
	}
	return 1;
}

CMD:getdrugs(playerid,params[])
{
	if(playerVariables[playerid][pJob] == 4)
	{
		if(playerVariables[playerid][pCheckpoint] >= 1)
		{
			ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
		}
		else
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, 320.0350,1122.9698,1083.8828))
        	{
        		SS(playerid, -1, "Mergi la checkpoint pentru a colecta drogurile.","Reach the checkpoint to collect your drugs.");

        		SetPlayerCheckpoint(playerid, 2770.6160,-1628.7228,12.1775, 5.0);
        		playerVariables[playerid][pCheckpoint] = 8;
        		playerVariables[playerid][pAreDrugs] = 1;
        		playerVariables[playerid][pDrugsTime] = 1;
			}
			else
			{
				SS(playerid, COLOR_IN2, "Mergi la checkpoint pentru a colecta drogurile.","Go to the checkpoint to get drugs.");
				SetPlayerCheckpoint(playerid, 2138.9810,-1697.6166,15.0859, 3.0);
				playerVariables[playerid][pCheckpoint] = 7;
			}	
		}
	}
	else return SS(playerid, -1, "Tu nu esti 'Drug dealer'.", "You are not a 'Drug dealer'.");
	return 1;
}




CMD:selldrugs(playerid, params[])
{
	if(playerVariables[playerid][pJob] == 4)
	{
		new id, amount, price;
		if(sscanf(params, "uii", id, amount, price)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/selldrugs [playerid] [amount] [price]");

		if(playerVariables[playerid][pDrugs] >= amount)
		{
			if(id != INVALID_PLAYER_ID)
			{
				if(playerVariables[id][pCash] >= price)
				{
				    if(price >= 1)
					{
						if(amount >= 1)
						{
						    if(id == playerid) return S(playerid, COLOR_WHITE, "Nu iti poti vinde tie insuti droguri.");
						    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
							{
							    if(playerVariables[playerid][pTimerSellDrugs] <= 0)
								{
								    playerVariables[playerid][pTimerSellDrugs] = 60;

									drugs[id] = playerid;
			     					drugsmoney[id] = price;
			     					drugsamount[id] = amount;

									if(playerVariables[playerid][pLimba] == 1)
								    {
										format(szMessage, sizeof(szMessage), "* I-ai oferit %d droguri lui %s pentru $%s.", amount, GetName(id), NumberFormat(price));
										S(playerid, COLOR_IN2, szMessage);
									}
									if(playerVariables[id][pLimba] == 1)
								    {
										format(szMessage, sizeof(szMessage), "* %s ti-a oferit %d droguri pentru $%s. Foloseste /accept drugs %d pentru a cumpara drogurile.", GetName(playerid), amount, NumberFormat(price), playerid);
										S(id, COLOR_LIGHTBLUE, szMessage);
									}
									if(playerVariables[playerid][pLimba] == 2)
								    {
										format(szMessage, sizeof(szMessage), "* I've provided %d drugs to %s for $%s.", amount, GetName(id), NumberFormat(price));
										S(playerid, COLOR_IN2, szMessage);
									}
									if(playerVariables[id][pLimba] == 2)
									{
										format(szMessage, sizeof(szMessage), "* %s offered you %d drugs for $%s. Use /accept drugs %d to buy drugs.", GetName(playerid), amount, NumberFormat(price), playerid);
										S(id, COLOR_LIGHTBLUE, szMessage);
									}
								}
								else
								{
									if(playerVariables[playerid][pLimba] == 1)
							    	{
										format(szMessage, 256, "Poti folosi aceasta comanda in %d secunde.",playerVariables[playerid][pTimerSellDrugs]);
										S(playerid,COLOR_WHITE,szMessage);
									}
									if(playerVariables[playerid][pLimba] == 2)
							    	{
							    		format(szMessage, 256, "You need to wait %d seconds before using /selldrugs again.",playerVariables[playerid][pTimerSellDrugs]);
										S(playerid,COLOR_WHITE,szMessage);
									}
								}
							}
							else
							{
								if(playerVariables[playerid][pLimba] == 1)
							    {
									S(playerid, -1, "Esti prea departe de acest jucator.");
								}
								if(playerVariables[playerid][pLimba] == 2)
							    {
									S(playerid, -1, "You're too far away from this player.");
								}
							}
						}
						else
						{
							if(playerVariables[playerid][pLimba] == 1)
						    {
								S(playerid, -1, "Nu poti face schimbul fara droguri.");
							}
							if(playerVariables[playerid][pLimba] == 2)
						    {
								S(playerid, -1, "You can't do without drugs.");
							}
						}
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
					    {
							S(playerid, -1, "Pretul drogurilor trebuie sa fie minim 1$.");
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
							S(playerid, -1, "The price of the drugs must be at least 1$.");
						}
					}
				}
				else
				{
					if(playerVariables[playerid][pLimba] == 1)
				    {
						S(playerid, -1, "Acest jucator nu are destui bani pentru aceste droguri.");
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
						S(playerid, -1, "This player does not have enough money for this drugs!");
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid, COLOR_GREY, "Acel player nu este conectat.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
				}
			}
		}
		else
		{
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, -1, "Tu nu ai destule droguri.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, -1, "You don't have enough drugs.");
			}
		}
	}
 	else
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
			S(playerid,COLOR_WHITE,"Tu nu esti 'Drug dealer'.");
		}
		if(playerVariables[playerid][pLimba] == 2)
		{
			S(playerid,COLOR_WHITE,"You are not a 'Drug dealer'.");
		}
	}
	return 1;
}
CMD:usedrugs(playerid, params[])
{
	if(playerVariables[playerid][pDrugs] >= 1)
	{
		if(playerVariables[playerid][pDeelayUseDrugs] == 0)
		{
			new vehicle = GetPlayerVehicleID(playerid);
			if(IsPlayerInVehicle(playerid, vehicle)) return S(playerid, COLOR_GREY, "You can't use this command while in a vehicle.");
			if(playerVariables[playerid][pFreezeTime] != 0) return S(playerid, COLOR_GREY, "You can't use animations while cuffed, tazed, or frozen.");
			if(playerVariables[playerid][pAlreadyFish] == 1) return SS(playerid, COLOR_GREY, "Nu poti folosi animatii in timp ce pescuiesti.", "You can not use animations while you are fishing.");

			if(UsingDrugs[playerid] == 0)
			{
		    	UsingDrugs[playerid] = 1;
		    	
				ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0,0, 0, 0);

				usedrugs[playerid] = SetTimerEx("DrugEffectGone", 30000, 0, "i", playerid);

				SS(playerid, -1, "Stai nemiscat 30 secunde pentru ca drogurile sa-si faca efectul.", "Stand still for 30 seconds for the drugs to take effect.");

				format(szMessage, sizeof(szMessage), "* %s took some drugs out of his pocket.", GetName(playerid));
				nearByMessage(playerid, COLOR_PURPLE, szMessage);
				
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x,y,z);
				drugposs[playerid][0] = x;
				drugposs[playerid][1] = y;
				drugposs[playerid][2] = z;
				
				SetPlayerDrunkLevel (playerid, 5000);
				
    			if(playerVariables[playerid][pQuest] == 2 && playerVariables[playerid][pQuestValue] == 0)
			    {
			        new string[256];
			        SS(playerid, COLOR_YELLOW, "Misiunea [Cumpara droguri si folosestele] a fost terminata!", "Quest [Buy drugs and use them] was finished!");

					playerVariables[playerid][pQuestValue] = 1;
					Update(playerid, pQuestValuex);

					playerVariables[playerid][pQuestPoint] ++;
					Update(playerid, pQuestPointx);

					playerVariables[playerid][pRespectPoints] ++;
					Update(playerid, pRespectPointsx);

                    new value = 5000 * playerVariables[playerid][pLevel];
                    GivePlayerCash(playerid, value);

					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string, sizeof(string), "Ai primit un Respect Point (RP), Quest Point (QP) si $%s.", NumberFormat(value));
						S(playerid, COLOR_YELLOW, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string, sizeof(string), "You received a Respect Point (RP), Quest Point (QP) and $%s.", NumberFormat(value));
						S(playerid, COLOR_YELLOW, string);
					}

					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%s[user:%d] completed the quest [Cumpara droguri si folosestele] and received $%s, 1RP and 1QP.', 'quest', '%d')", playerVariables[playerid][pUsername], playerVariables[playerid][pID], NumberFormat(value), playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);
				}
			}
			else return SS(playerid, COLOR_GREY, "Te droghezi deja..", "You are already taking drugs..");
		}
		else return SS(playerid, COLOR_DEELAY, "Poti folosi droguri doar o data la 2 minute.", "You can't use drugs more than once in a 2 minutes time period.");
	}
	else return SS(playerid, -1, "Ai nevoie de droguri pentru a te droga.", "You don't have any drugs.");
	return 1;
}

//--------------------------------------- Pizza boy -----------------------------------------------------
CMD:pizza(playerid, params[])
{
	if(playerVariables[playerid][pJob] == 5)
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 448)
		{
			if(playerVariables[playerid][pCheckpointPizza] == 0)
			{
				if(activpizza[playerid] == 0)
				{
					playerVariables[playerid][pCheckpointPizza] = 1;
					DisablePlayerRaceCheckpoint(playerid);


					new house, Float:Position[3], distance;
					house = random(systemVariables[houseCount]);

					GetPlayerPos(playerid, Position[0], Position[1], Position[2]);

					SetPlayerRaceCheckpoint(playerid, 0, houseVariables[house][hHouseExteriorPos][0], houseVariables[house][hHouseExteriorPos][1], houseVariables[house][hHouseExteriorPos][2], 0.0,0.0,0.0,4.0);

					distance = floatround(GetDistanceBetweenPoints(Position[0], Position[1], Position[2], houseVariables[house][hHouseExteriorPos][0], houseVariables[house][hHouseExteriorPos][1], houseVariables[house][hHouseExteriorPos][2]), floatround_round);


					PizzaCP[playerid][0] = houseVariables[house][hHouseExteriorPos][0];
					PizzaCP[playerid][1] = houseVariables[house][hHouseExteriorPos][1];
					PizzaCP[playerid][2] = houseVariables[house][hHouseExteriorPos][2];
					
					activpizza[playerid] = 1;
					playerizza[playerid] = GetPlayerVehicleID(playerid);


					if(playerVariables[playerid][pPizzaSkill] == 1) pizzaprize[playerid] = distance * 10 + 1000;
					if(playerVariables[playerid][pPizzaSkill] == 2) pizzaprize[playerid] = distance * 10 + (distance*8) * (10/100) + 1500;
					if(playerVariables[playerid][pPizzaSkill] == 3) pizzaprize[playerid] = distance * 10 + (distance*8) * (20/100) + 2000;
					if(playerVariables[playerid][pPizzaSkill] == 4) pizzaprize[playerid] = distance * 10 + (distance*8) * (30/100) + 2500;
					if(playerVariables[playerid][pPizzaSkill] == 5) pizzaprize[playerid] = distance * 10 + (distance*8) * (40/100) + 3000;
					if(playerVariables[playerid][pPizzaSkill] == 6) pizzaprize[playerid] = distance * 10 + (distance*8) * (50/100) + 3500;
				}
				else
				{
    				playerVariables[playerid][pCheckpointPizza] = 1;
					DisablePlayerRaceCheckpoint(playerid);


					new Float:Position[3], distance;
					
					playerizza[playerid] = GetPlayerVehicleID(playerid);
					
					GetPlayerPos(playerid, Position[0], Position[1], Position[2]);

					SetPlayerRaceCheckpoint(playerid, 0, PizzaCP[playerid][0], PizzaCP[playerid][1], PizzaCP[playerid][2], 0.0,0.0,0.0, 4.0);

					distance = floatround(GetDistanceBetweenPoints(Position[0], Position[1], Position[2], PizzaCP[playerid][0], PizzaCP[playerid][1], PizzaCP[playerid][2]), floatround_round);

					if(playerVariables[playerid][pPizzaSkill] == 1) pizzaprize[playerid] = distance * 10 + 1000;
					if(playerVariables[playerid][pPizzaSkill] == 2) pizzaprize[playerid] = distance * 10 + (distance*8) * (10/100) + 1500;
					if(playerVariables[playerid][pPizzaSkill] == 3) pizzaprize[playerid] = distance * 10 + (distance*8) * (20/100) + 2000;
					if(playerVariables[playerid][pPizzaSkill] == 4) pizzaprize[playerid] = distance * 10 + (distance*8) * (30/100) + 2500;
					if(playerVariables[playerid][pPizzaSkill] == 5) pizzaprize[playerid] = distance * 10 + (distance*8) * (40/100) + 3000;
					if(playerVariables[playerid][pPizzaSkill] == 6) pizzaprize[playerid] = distance * 10 + (distance*8) * (50/100) + 3500;
				}
				SS(playerid, COLOR_GREY, "Mergi la checkpoint pentru a livra pizza !", "Go to the checkpoint to delivered the pizza !");
			}
			else return SS(playerid, -1, "{BFFF8B}Ai deja un checkpoint activ !", "{BFFF8B}You already have a checkpoint !");
		}
		else return SS(playerid, -1, "Pentru a putea folosi aceasta comanda trebuie sa fii pe un scooter al jobului.", "You can only use this command while you are in a pizza scooter.");
	}
	else return SS(playerid, COLOR_GREY, "Tu nu ai job-ul 'Pizza Boy'.", "You don't have the pizza job! Use /jobs to get the pizza job !");
	return 1;
}


//----------------------------------- Fisherman Job -------------------------------------------------
CMD:fish(playerid, params[])
{
	if(playerVariables[playerid][pJob] == 6)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 20.0, jobVariables[6][jJobPosition][0], jobVariables[6][jJobPosition][1], jobVariables[6][jJobPosition][2]))
			{
				new Float: health;
				GetPlayerHealth(playerid, health);

				if(health <= 0) return SS(playerid, COLOR_GREY, "Nu poti folosi comanda daca esti mort!", "You can't use this command if you are dead.");

			    if(playerVariables[playerid][pAlreadyFish] == 1) return SS(playerid, -1, "Tu pescuiesti deja." , "You are already fishing.");
			    if(playerVariables[playerid][pFish] == 1) return SS(playerid, -1, "Mergi la un magazin 24/7 pentru a vinde pestele prins inainte de a pescui din nou." , "Go to a 24/7 shop to sell your fish before fishing again.");
				if(playerVariables[playerid][pJobDelay] < 1)
				{
				    SS(playerid, -1, "Acum pescuiesti. Asteapta cateva secunde pentru a prinde un peste.", "You're now fishing. It will take a few seconds to reel your fish in.");

                    undita = SetPlayerAttachedObject(playerid, 0, 18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
					ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,30000, 0);
	            	pescuieste[playerid] = SetTimerEx("Fishing", 30000, false, "i", playerid);
					playerVariables[playerid][pAlreadyFish] = 1;
				}
				else
				{
				    new string[128];

					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string,sizeof(string),"Trebuie sa astepti %d minute (%d secunde) pentru a putea pescui din nou.", playerVariables[playerid][pJobDelay]/60, playerVariables[playerid][pJobDelay]);
						S(playerid, COLOR_GREY, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string,sizeof(string),"You must wait %d minutes (%d seconds) until you can go fishing again.", playerVariables[playerid][pJobDelay]/60, playerVariables[playerid][pJobDelay]);
						S(playerid, COLOR_GREY, string);
					}
				}
			}
			else return SS(playerid, -1, "Nu te afli in zona in care se poate pescui. [/jobs > Fisher]", "You are not in the fishing zone. [/jobs > Fisherman]");
		}
		else return SS(playerid, COLOR_GREY, "Nu poti pescui daca esti intr-o masina.", "You can not fish if you're in a car.");
	}
	else return SS(playerid, COLOR_GREY, "Tu nu ai job-ul 'Fisherman'.", "You are not a 'Fisherman'.");
	return 1;
}
//---------------------------------------------------------------------------------------------------
CMD:accept(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
		new x_job[256], id, sendername[25], giveplayer[25], string[300];
		if(sscanf(params, "s[256]u",x_job,id))
		{
			S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/accept [item] [playerid]");
   			S(playerid, COLOR_WHITE, "Available items: mats, drugs, gun, repair, refill, taxi");
   			return 1;
      	}
        if(strcmp(x_job,"mats",true) == 0)
        {
            if(matsOffered[playerid] != id) return S(playerid, COLOR_WHITE, "This player doesn't offered you materials.");
            if(GetDistanceBetweenPlayers(playerid, id) > 5) return S(playerid, COLOR_GREY, "You're too far away from this player.");
            if(playerVariables[id][pMaterials] < matsamount[playerid]) return S(playerid, COLOR_WHITE, "That player doesn't have enough materials.");
			if(playerVariables[playerid][pCash] < matsmoney[playerid]) return S(playerid, COLOR_WHITE, "You don't have enough money.");

			format(string, sizeof(string), "* %s sells %s materials to %s for $%s.", playerVariables[id][pUsername], NumberFormat(matsamount[playerid]), playerVariables[playerid][pUsername], NumberFormat(matsmoney[playerid]));
			ProxDetector(15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			
			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'buymats', '%d')", string, playerVariables[playerid][pID]);
			mysql_query(handle, szLargeString);
			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'sellmats', '%d')", string, playerVariables[id][pID]);
			mysql_query(handle, szLargeString);

			playerVariables[id][pMaterials] -= matsamount[playerid];
			Update(id, pMaterialsx);
			
			playerVariables[playerid][pMaterials] += matsamount[playerid];
			Update(playerid, pMaterialsx);

			GivePlayerCash(playerid, -matsmoney[playerid]);
			GivePlayerCash(id, matsmoney[playerid]);

			matsOffer[id] = -1;
			matsOffered[playerid] = -1;
			matsmoney[playerid] = -1;
			matsamount[playerid] = -1;
			return 1;
   		}
   		if(strcmp(x_job,"live",true) == 0)
		{
			if(LiveOffer[playerid] != id) return S(playerid,COLOR_WHITE,"This player has not offered you live.");
		    if(IsPlayerConnected(LiveOffer[playerid]))
		    {
			    if(ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
				{
					TalkingLive[playerid] = 1;
					TalkingLive[LiveOffer[playerid]] = 1;
					LiveOffer[playerid] = -1;
					return 1;
				}
				else return SS(playerid, COLOR_GREY, "Acest player nu este langa tine.", "This player is not near you.");
			}
		}
   	 	if(strcmp(x_job,"dice",true) == 0)
		{
			if(Diceid[playerid] == -1) return SS(playerid, -1, "Acest player nu te-a invitat sa joci barbut cu el.", "That player did not invited you to play dice with him.");
			if(GetPlayerCash(playerid) < Dicem[playerid]) return SS(playerid, -1,"Nu ai suficienti bani pentru a juca barbut.", "You don't have enough money to play dice.");
		    if(GetPlayerCash(id) < Dicem[playerid]) return SS(playerid, -1, "Adversarul tau nu are suficienti bani pentru a juca barbut.", "Your opponent doesn't have enough money to play dice.");

			if(ProxDetectorS(10.0, playerid, Diceid[playerid]))
			{
			   	new dice1[MAX_PLAYERS], dice2[MAX_PLAYERS], total[MAX_PLAYERS];

				dice1[playerid] = random(6) + 1;
				dice2[playerid] = random(6) + 1;
				total[playerid] = dice1[playerid] + dice2[playerid];
			    dice1[Diceid[playerid]] = random(6) + 1;
				dice2[Diceid[playerid]] = random(6) + 1;
				total[Diceid[playerid]] = dice1[Diceid[playerid]] + dice2[Diceid[playerid]];
			    
			    if(total[playerid] > total[Diceid[playerid]])
			    {
					format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. %s won $%s.", GetName(playerid), dice1[playerid], dice2[playerid], GetName(Diceid[playerid]), dice1[Diceid[playerid]], dice2[Diceid[playerid]], GetName(playerid), NumberFormat(Dicem[playerid]));
					ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					
					GivePlayerCash(playerid, Dicem[playerid]);
					GivePlayerCash(Diceid[playerid], -Dicem[playerid]);
					
					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string,sizeof(string),"(+) Ai castigat $%s!", NumberFormat(Dicem[playerid]));
						S(playerid, COLOR_ATTACK, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string,sizeof(string),"(+) You won $%s!", NumberFormat(Dicem[playerid]));
						S(playerid, COLOR_ATTACK, string);
					}
					
					
					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string,sizeof(string),"(-) Ai pierdut $%s!", NumberFormat(Dicem[playerid]));
						S(Diceid[playerid], COLOR_ATTACK, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string,sizeof(string),"(-) You lost $%s!", NumberFormat(Dicem[playerid]));
						S(Diceid[playerid], COLOR_ATTACK, string);
					}
				}
				if(total[Diceid[playerid]] > total[playerid])
				{
					format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. %s won $%s.", GetName(playerid), dice1[playerid], dice2[playerid], GetName(Diceid[playerid]), dice1[Diceid[playerid]], dice2[Diceid[playerid]], GetName(Diceid[playerid]), NumberFormat(Dicem[playerid]));
					ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					
					GivePlayerCash(playerid, -Dicem[playerid]);
					GivePlayerCash(Diceid[playerid], Dicem[playerid]);
					
					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string,sizeof(string),"(+) Ai castigat $%s!", NumberFormat(Dicem[playerid]));
						S(Diceid[playerid], COLOR_ATTACK, string);
					}
     				if(playerVariables[playerid][pLimba] == 2)
					{
						format(string,sizeof(string),"(+) You won $%s!", NumberFormat(Dicem[playerid]));
						S(Diceid[playerid], COLOR_ATTACK, string);
					}
					
					if(playerVariables[playerid][pLimba] == 1)
					{
						format(string,sizeof(string),"(-) Ai pierdut $%s!", NumberFormat(Dicem[playerid]));
						S(playerid, COLOR_ATTACK, string);
					}
					if(playerVariables[playerid][pLimba] == 2)
					{
						format(string,sizeof(string),"(-) You lost $%s!", NumberFormat(Dicem[playerid]));
						S(playerid, COLOR_ATTACK, string);
					}
				}
				if(total[Diceid[playerid]] == total[playerid])
				{
					format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. No one won.", GetName(playerid), dice1[playerid], dice2[playerid], GetName(Diceid[playerid]), dice1[Diceid[playerid]], dice2[Diceid[playerid]]);
					ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				Diceid[playerid] = -1;
				Dicem[playerid] = 0;
			}
			return 1;
		}
     	if(strcmp(x_job,"gun",true) == 0)
        {
            if(GunOffered[playerid] != id) return S(playerid, COLOR_GREY, "This player doesn't offered you a gun.");
            if(GetDistanceBetweenPlayers(playerid, id) > 5) return S(playerid, COLOR_GREY, "You're too far away from this player.");
            if(playerVariables[playerid][pCash] < GunPrice[playerid]) return S(playerid, COLOR_WHITE, "You don't have enough money.");

			format(string, sizeof(string), "* %s sells a %s to %s for $%s.", playerVariables[id][pUsername], GetWeaponNameEx(GunModel[playerid]), playerVariables[playerid][pUsername], NumberFormat(GunPrice[playerid]));
			ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			new materials, ammo;

			if(GunModel[playerid] == 24) materials = 350; ammo = 50;
			if(GunModel[playerid] == 31) materials = 500; ammo = 250;
            if(GunModel[playerid] == 30) materials = 500; ammo = 250;
            if(GunModel[playerid] == 25) materials = 400; ammo = 50;
            if(GunModel[playerid] == 29) materials = 300; ammo = 200;
            if(GunModel[playerid] == 33) materials = 450; ammo = 250;

			playerVariables[id][pMaterials] -= materials;
			Update(id, pMaterialsx);
			
			GivePlayerWeaponEx(playerid, GunModel[playerid], ammo);
			GivePlayerCash(playerid, -GunPrice[playerid]);
			GivePlayerCash(id, GunPrice[playerid]);

			GunOffer[id] = -1;
			GunOffered[playerid] = -1;
			GunPrice[playerid] = -1;
    		GunModel[playerid] = -1;
			return 1;
   		}
   		if(strcmp(x_job,"drugs",true) == 0)
        {
        	if(drugs[playerid] == 999) return S(playerid,COLOR_WHITE,"Nimeni nu ti-a facut o oferta.");
         	if(drugs[playerid] != id) return S(playerid,COLOR_WHITE,"Acel jucator ti-a facut o oferta.");

            GetPlayerName(playerid,sendername,sizeof(sendername));
            GetPlayerName(drugs[playerid],giveplayer,sizeof(giveplayer));

            if(playerVariables[playerid][pCash] < drugsmoney[playerid])
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
			        S(playerid,COLOR_WHITE,"Nu ai banii necesari.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid,COLOR_WHITE,"You don't have the money needed.");
				}
			}

			if(playerVariables[drugs[playerid]][pLimba] == 1)
		    {
		        format(string, sizeof(string), "{048E24}Ai primit $%s pe drogurile vandute.", NumberFormat(drugsmoney[playerid]));
         		S(drugs[playerid], COLOR_WHITE, string);
			}
			if(playerVariables[drugs[playerid]][pLimba] == 2)
		    {
				format(string, sizeof(string), "{048E24}You got $%s on sold drugs.", NumberFormat(drugsmoney[playerid]));
          		S(drugs[playerid], COLOR_WHITE, string);
			}
			if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "{048E24}Ai cumparat %d droguri de la %s pentru $%s.", drugsamount[playerid], giveplayer, NumberFormat(drugsmoney[playerid]));
          		S(playerid, COLOR_WHITE, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "{048E24}You bought %d drugs from %s for $%s.", drugsamount[playerid], giveplayer, NumberFormat(drugsmoney[playerid]));
          		S(playerid, COLOR_WHITE, string);
			}

			playerVariables[drugs[playerid]][pCash] += drugsmoney[playerid];
			GivePlayerCash(drugs[playerid], drugsmoney[playerid]);
			Update(drugs[playerid], pCashx);

			playerVariables[playerid][pCash] -= drugsmoney[playerid];
			GivePlayerCash(playerid, -drugsmoney[playerid]);
			Update(playerid, pCashx);

			playerVariables[playerid][pDrugs] += drugsamount[playerid];
			Update(playerid, pDrugsx);

		   	playerVariables[drugs[playerid]][pDrugs] -= drugsamount[playerid];
			Update(drugs[playerid], pDrugsx);

            drugs[playerid] = 999;
            drugsmoney[playerid] = 0;

			return 1;
   		}
     	if(strcmp(x_job,"repair",true) == 0)
        {
        	if(RepairOffer[playerid] == 999) return S(playerid,COLOR_WHITE,"Nu ai primit nici o cerere de repair.");
            if(RepairOffer[playerid] != id) return S(playerid,COLOR_WHITE,"Acel jucator nu ti-a oferit repair.");
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
                new vehicle = GetPlayerVehicleID(playerid);
			    GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
			    if(engine == 0)
			    {
	    			if(IsPlayerConnected(RepairOffer[playerid]))
	    			{
						if(playerVariables[playerid][pCash] < RepairPrice[playerid])
						{
							if(playerVariables[playerid][pLimba] == 1)
						    {
						        S(playerid,COLOR_WHITE,"Nu ai banii necesari.");
							}
							if(playerVariables[playerid][pLimba] == 2)
						    {
								S(playerid,COLOR_WHITE,"You don't have the money needed.");
							}
						}


						GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));

						if(playerVariables[RepairCar[playerid]][pLimba] == 1)
					    {
					        format(string, sizeof(string), "{048E24}(+) %s ti-a oferit $%s pentru ca i-ai reparat masina.", sendername, NumberFormat(RepairPrice[playerid]));
			         		S(RepairOffer[playerid], COLOR_WHITE, string);
						}
						if(playerVariables[RepairCar[playerid]][pLimba] == 2)
					    {
					        format(string, sizeof(string), "{048E24}(+) %s offered $%s for fixing his car.", sendername, NumberFormat(RepairPrice[playerid]));
			         		S(RepairOffer[playerid], COLOR_WHITE, string);
						}
						if(playerVariables[playerid][pLimba] == 1)
					    {
					        format(string, sizeof(string), "{048E24}(-) %s ti-a reparat masina in schimbul a $%s.", giveplayer, NumberFormat(RepairPrice[playerid]));
			         		S(playerid, COLOR_WHITE, string);
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
					        format(string, sizeof(string), "{048E24}(-) %s fixed your car for $%s.", giveplayer, NumberFormat(RepairPrice[playerid]));
			         		S(playerid, COLOR_WHITE, string);
						}


						SetTimerEx("Repair", 5000, false, "i", playerid);

						pRepairing[playerid] = 1;

					    playerVariables[RepairOffer[playerid]][pDeelayRepair] = 60;

						format(string, sizeof(string), "* %s repaired %s's car for $%s", sendername, giveplayer, NumberFormat(RepairPrice[playerid]));
						nearByMessage(playerid, COLOR_PURPLE, string);

						playerVariables[playerid][pCash] -= RepairPrice[playerid];
						GivePlayerCash(playerid, -RepairPrice[playerid]);
						Update(playerid, pCashx);

						playerVariables[RepairOffer[playerid]][pCash] += RepairPrice[playerid];
						GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);
						Update(RepairOffer[playerid], pCashx);

						S(playerid,COLOR_RED,"Info: Nu cobora din masina daca vrei sa se repare masina.");

						RepairOffer[playerid] = 999;
						RepairPrice[playerid] = 0;
						return 1;
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
					    {
							S(playerid, COLOR_GREY, "Acel player nu este conectat.");
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
							S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
						}
					}
				}
				else
				{
					if(playerVariables[playerid][pLimba] == 1)
				    {
						S(playerid, COLOR_GREY, "Nu poti folosi comanda /accept daca ai motorul pornit.");
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
						S(playerid, COLOR_GREY, "You can't use the command /accept if you left the engine running.");
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid, -1, "Trebuie sa fii in masina pentru a putea accepta.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid, -1, "Trebuie sa fii in masina pentru a putea accepta.");
				}
   			}
		}
		if(id == INVALID_PLAYER_ID) return S(playerid, COLOR_GREY, "Error: Player not connected.");
		if(strcmp(x_job,"taxi",true) == 0)
        {
      		if(TransportDuty[playerid] != 1) return SS(playerid, COLOR_GREY, "Nu poti accepta apelul deoarece nu esti on-duty.", "You can't accept the call because you are not on-duty.");

			new newcar = GetPlayerVehicleID(playerid);
			if(vehicleVariables[newcar][vVehicleGroup] == 7)
			{
				if(GetPlayerVehicleSeat(playerid) == 0)
				{ 
					if(TaxiCall[id] != id) return S(playerid, -1,"This player has not called taxi.");
	    			if(id == playerid) return S(playerid, -1, "Nu te poti accepta pe tine insuti.");


					if(playerVariables[id][pLimba] == 1)
					{
						format(string, sizeof(string), "Taximetristul %s ti-a acceptat apelul. Asteapta taxiul aici.", N(playerid));
						S(id, COLOR_YELLOW, string);
						S(id, COLOR_WHITE, "Daca nu mai ai nevoie de un taxi, foloseste /cancel taxi.");
					}
					if(playerVariables[id][pLimba] == 2)
					{
						format(string, sizeof(string), "Taxi driver %s has accepted your call. Please wait here for the taxi.", N(playerid));
						S(id, COLOR_YELLOW, string);
						S(id, COLOR_WHITE, "If you don't need a taxi anymore, use /cancel taxi.");
					}


					new Float: Distance = GetDistanceBetweenPlayers(playerid, id), str[256];
					new Float:X, Float:Y, Float:Z;

					format(str, sizeof(str), "Taxi driver %s has accepted the call from %s. Distance: %.0fm", sendername, giveplayer, Distance);
					SendToGroup(7, COLOR_TEAL, str);

					JucatorCautat[playerid] = id;
					GetPlayerPos(id, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 3.0);
					pUseFind[playerid] = 1;

					TaxiCallTime[playerid] = 1;
					TaxiAccepted[playerid] = TaxiCall[id];
					TaxiCall[id] = -1;

					return 1;
				}
			}
			else return S(playerid,COLOR_GREY,"You are not in a taxi.");
		}
		if(strcmp(x_job,"refill",true) == 0)
        {
        	if(RefillOffer[playerid] == 999) return S(playerid,COLOR_WHITE,"Nu ai primit nici o cerere de refill.");
            if(RefillOffer[playerid] != id) return S(playerid,COLOR_WHITE,"Acel jucator nu ti-a oferit refill.");
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
                new vehicle = GetPlayerVehicleID(playerid);
			    GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
			    if(engine == 0)
			    {
	    			if(IsPlayerConnected(RefillOffer[playerid]))
	    			{
						if(playerVariables[playerid][pCash] < RefillPrice[playerid])
						{
							if(playerVariables[playerid][pLimba] == 1)
						    {
						        S(playerid,COLOR_WHITE,"Nu ai banii necesari.");
							}
							if(playerVariables[playerid][pLimba] == 2)
						    {
								S(playerid,COLOR_WHITE,"You don't have the money needed.");
							}
						}


						GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));

					    playerVariables[RefillOffer[playerid]][pDeelayRefill] = 60;

						format(string, sizeof(string), "* %s refilled %s's car for $%s", sendername, giveplayer, NumberFormat(RefillPrice[playerid]));
						nearByMessage(playerid, COLOR_PURPLE, string);

						playerVariables[playerid][pCash] -= RefillPrice[playerid];
						GivePlayerCash(playerid, -RefillPrice[playerid]);
						Update(playerid, pCashx);

						playerVariables[RefillOffer[playerid]][pCash] += RefillPrice[playerid];
						GivePlayerCash(RefillOffer[playerid], RefillPrice[playerid]);
						Update(RefillOffer[playerid], pCashx);

 						new Float: fPos[3];
    					GetVehiclePos(vehicle, fPos[0], fPos[1], fPos[2]);
    					PlayerPlaySoundEx(1133, fPos[0], fPos[1], fPos[2]);

    					Gas[vehicle] = 110;

						RefillOffer[playerid] = 999;
						RefillPrice[playerid] = 0;
						return 1;
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
					    {
							S(playerid, COLOR_GREY, "Acel player nu este conectat.");
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
							S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
						}
					}
				}
				else
				{
					if(playerVariables[playerid][pLimba] == 1)
				    {
						S(playerid, COLOR_GREY, "Nu poti folosi comanda /accept daca ai motorul pornit.");
					}
					if(playerVariables[playerid][pLimba] == 2)
				    {
						S(playerid, COLOR_GREY, "You can't use the command /accept if you left the engine running.");
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid, -1, "Trebuie sa fii in masina pentru a putea accepta.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid, -1, "Trebuie sa fii in masina pentru a putea accepta.");
				}
   			}
		}
   	}
   	return 1;
}


//-------------------------------------- Comenzi Admin ---------------------------------
CMD:announce(playerid, params[])
{
	new string[256], message[128];
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		if(sscanf(params, "s[128]", message)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/announce [message]");
		{
			if(FindIP(message) || GasesteReclama(message))
			{
				format(string, sizeof(string), "%s may be server advertising in /anno: (%s)", GetName(playerid), message);
				submitToAdmins(string, COLOR_BOSS2);

				mysql_format(handle, string, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'remove', '%d')", string, playerVariables[playerid][pID]);
				mysql_query(handle, string);

				S(playerid,COLOR_YELLOW,"* Notificare: Ai primit remove de la AdmBot, motiv: Reclama in /anno.");
				playerVariables[playerid][pAdminLevel] = 0;
				Update(playerid, pAdminLevelx);
				return 1;
			}

			format(string, sizeof(string), "(( %s says: %s ))", GetName(playerid), message);
			SendClientMessageToAll(COLOR_LIGHT, string);

			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'anno', '%d')", string, playerVariables[playerid][pID]);
			mysql_query(handle, szLargeString);

		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:anno(playerid, params[])
{
	return cmd_announce(playerid, params);
}




CMD:set(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 3)
	{
        new item[32], userID, amount, string[256];
        if(sscanf(params, "us[32]d", userID, item, amount))
		{
			S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/set [playerid] [item] [amount]");
			S(playerid, COLOR_GREY, "Items: Skin, Health, Armour, VirtualWorld, Gun, Fly, Boat, Drive, Job, Phone, Group, GroupRank, Vip, PremiumPoints");
            S(playerid, COLOR_GREY, "Items: Materials, Drugs, Money, BankMoney, Level");
		}
        else if(IsPlayerConnected(userID))
		{
		    if(strcmp(item, "skin", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 3)
				{
				    if(amount == 119 || amount == 285) return S(playerid, COLOR_ERROR, "Skin-urile 119 si 285 pot fi folosite doar de userii cu id 1 sau 2.");

					playerVariables[userID][pSkin] = amount;
					SetPlayerSkin(userID, amount);
					Update(userID, pSkinx);

					format(szMessage,256,"%s's skin was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);

					format(string,256,"[userid: %d]'s skin was set to %d (( Admin [userid: %d] ))", playerVariables[userID][pID], amount, playerVariables[playerid][pID]);
					chatlogs(string, COLOR_YELLOW);

					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'set', '%d')", string, playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);
				}
			}
   			if(strcmp(item, "phone", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					new numb = amount;
					
					new query[256];
					format(query, 256, "SELECT * FROM `players` WHERE `PhoneNumber` = '%d' ORDER BY `ID` ASC", numb);
					new Cache: res = mysql_query(handle, query);
					if(cache_get_row_count() != 0)
					{
						if(playerVariables[playerid][pLimba] == 1)
						{
							S(playerid, -1, "Acest numar exista deja. Alege alt numar de telefon!");
						}
						if(playerVariables[playerid][pLimba] == 2)
						{
							S(playerid, -1, "This number already exists. Choose another phone number!");
						}
						cache_delete(res);
					}
					else
					{
						playerVariables[userID][pPhoneNumber] = amount;
						Update(userID, pPhoneNumberx);

						format(szMessage,256,"%s's phone number was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
						submitToAdmins(szMessage, COLOR_YELLOW);

					}
				}
			}
			else if(strcmp(item, "group", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					if(amount >= 0 && amount <= MAX_GROUPS)
					{
						playerVariables[userID][pGroup] = amount;
						Update(userID, pGroupx);

						SetPlayerToTeamColor(userID);

						format(szMessage,256,"%s's group was set to %s (( Admin %s ))", GetName(userID), groupVariables[amount][gGroupName], GetName(playerid));
						submitToAdmins(szMessage, COLOR_YELLOW);
						PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
					}
					else S(playerid, COLOR_GREY, "Invalid group specified.");
				}
			}
   			else if(strcmp(item, "premiumpoints", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					playerVariables[userID][pPremiumPoints] = amount;
					Update(userID, pPremiumPointsx);

					format(szMessage,256,"%s's premium points was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);

					new string2[128], query[500], Get[6];

         			gettime(Get[3],Get[4],Get[5]);
    				getdate(Get[0],Get[1],Get[2]);

					format(string2, sizeof(string2), "PUNCTE PREMIUM: Punctele tale premium au fost modificate: +%d\n\nSent at: %02d.%02d.%02d %02d:%02d:%02d", playerVariables[userID][pPremiumPoints], Get[0],Get[1],Get[2], Get[3],Get[4],Get[5]);
					mysql_format(handle, query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", playerVariables[userID][pID], string2);
					mysql_tquery(handle, query, "","");
				}
				else return S(playerid, COLOR_RED, "Comanda doar pentru owneri.");
			}
   			else if(strcmp(item, "robpoints", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					playerVariables[userID][pRobPoints] = amount;
					Update(userID, pRobPointsx);

					format(szMessage,256,"%s's rob points was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);
				}
				else return S(playerid, COLOR_RED, "Comanda doar pentru owneri.");
			}
  		 	else if(strcmp(item, "wanted", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					playerVariables[userID][pWanted] = amount;
					Update(userID, pWantedx);
					
					WantedTime[userID] = 900;
					
					SetPlayerWantedLevel(userID, playerVariables[userID][pWanted]);
					TextDrawHideForPlayer(userID, wantedscade[userID]);
				}
				else return S(playerid, COLOR_RED, "Comanda doar pentru owneri.");
			}
   			else if(strcmp(item, "money", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					playerVariables[userID][pCash] = amount;
					Update(userID, pCashx);

					SetPlayerCash(userID, amount);

					format(string, sizeof(string),"%s's money was set to $%s (( Admin %s ))", GetName(userID), NumberFormat(amount), GetName(playerid));
					submitToAdmins(string, COLOR_YELLOW);
				}
				else return S(playerid, COLOR_RED, "Comanda doar pentru owneri.");
			}
   			else if(strcmp(item, "level", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					playerVariables[userID][pLevel] = amount;
					Update(userID, pLevelx);
					
					SetPlayerScore(playerid, amount);

					format(szMessage,256,"%s's level was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);
				}
				else return S(playerid, COLOR_RED, "Comanda doar pentru owneri.");
			}
   			else if(strcmp(item, "materials", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					playerVariables[userID][pMaterials] = amount;
					Update(userID, pMaterialsx);

					format(szMessage,256,"%s's materials was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);
				}
				else return S(playerid, COLOR_RED, "Comanda doar pentru owneri.");
			}
		 	else if(strcmp(item, "drugs", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					playerVariables[userID][pDrugs] = amount;
					Update(userID, pDrugsx);

					format(szMessage,256,"%s's drugs was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);
				}
				else return S(playerid, COLOR_RED, "Comanda doar pentru owneri.");
			}
   			else if(strcmp(item, "bankmoney", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					playerVariables[userID][pAccount] = amount;
					Update(userID, pAccountx);

					format(szMessage,256,"%s's bank money was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);
				}
				else return S(playerid, COLOR_RED, "Comanda doar pentru owneri.");
			}
   			else if(strcmp(item, "grouprank", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					if(amount >= 0 && amount <= 7)
					{
						playerVariables[userID][pGroupRank] = amount;
						Update(userID, pGroupRankx);

						format(szMessage,256,"%s's group rank was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
						submitToAdmins(szMessage, COLOR_YELLOW);
					}
				}
			}
   			else if(strcmp(item, "health", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 3)
				{
					SetPlayerHealthEx(userID, amount);

					format(szMessage,256,"%s's health was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);

				}
			}
			else if(strcmp(item, "vip", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					if(amount == 1)
					{
						playerVariables[userID][pDonate] = 1;
						Update(userID, pDonatex);

						format(szMessage,256,"%s's VIP was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
						submitToAdmins(szMessage, COLOR_YELLOW);

						format(szMessage, 256, "* Ai fost promovat la rangul de Premium User de catre %s.", GetName(playerid));
						S(userID,COLOR_RED,szMessage);
					}
     				if(amount == 0)
					{
						playerVariables[userID][pDonate] = 0;
						Update(userID, pDonatex);

						format(szMessage,256,"%s's VIP was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
						submitToAdmins(szMessage, COLOR_YELLOW);
					}
				}
			}
   			else if(strcmp(item, "gun", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 3)
				{
					if(amount > 1000) return S(playerid, COLOR_GREY, "Poti oferi licenta pentru maxim 1000 ore.");

					playerVariables[userID][pLicentaArme] = amount;
					Update(userID, pLicentaArmex);


					format(szMessage,256,"%s's gun licence was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);

					format(string,256,"[userid: %d]'s gun licence was set to %d (( Admin [userid: %d] ))", playerVariables[userID][pID], amount, playerVariables[playerid][pID]);
					chatlogs(string, COLOR_YELLOW);

					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'set', '%d')", string, playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);

				}
			}
   			else if(strcmp(item, "fly", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 3)
				{
					if(amount > 1000) return S(playerid, COLOR_GREY, "Poti oferi licenta pentru maxim 1000 ore.");

					playerVariables[userID][pLicentaFly] = amount;
					Update(userID, pLicentaFlyx);


					format(szMessage,256,"%s's fly licence was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);

					format(string,256,"[userid: %d]'s fly licence was set to %d (( Admin [userid: %d] ))", playerVariables[userID][pID], amount, playerVariables[playerid][pID]);
					chatlogs(string, COLOR_YELLOW);

					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'set', '%d')", string, playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);

				}
			}
   			else if(strcmp(item, "boat", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 3)
				{
					if(amount > 1000) return S(playerid, COLOR_GREY, "Poti oferi licenta pentru maxim 1000 ore.");

					playerVariables[userID][pLicentaBoat] = amount;
					Update(userID, pLicentaBoatx);


					format(szMessage,256,"%s's boat licence was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);

					format(string,256,"[userid: %d]'s boat licence was set to %d (( Admin [userid: %d] ))", playerVariables[userID][pID], amount, playerVariables[playerid][pID]);
					chatlogs(string, COLOR_YELLOW);

					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'set', '%d')", string, playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);

				}
			}
   			else if(strcmp(item, "drive", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 3)
				{
					if(amount > 1000) return S(playerid, COLOR_GREY, "Poti oferi licenta pentru maxim 1000 ore.");

					playerVariables[userID][pLicentaCondus] = amount;
					Update(userID, pLicentaCondusx);


					format(szMessage,256,"%s's driving licence was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);

					format(string,256,"[userid: %d]'s driving licence was set to %d (( Admin [userid: %d] ))", playerVariables[userID][pID], amount, playerVariables[playerid][pID]);
					chatlogs(string, COLOR_YELLOW);

					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'set', '%d')", string, playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);

				}
			}
			else if(strcmp(item, "armour", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 3)
				{
					SetPlayerArmourEx(userID, amount);

					format(szMessage,256,"%s's armour was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);
				}
			}
			else if(strcmp(item, "virtualworld", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 3)
				{
					SetPlayerVirtualWorld(userID, amount);

					format(szMessage,256,"%s's VirtualWorld was set to %d (( Admin %s ))", GetName(userID), amount, GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);

				}
			}
			else if(strcmp(item, "job", true) == 0)
			{
				if(playerVariables[playerid][pAdminLevel] >= 6)
				{
					playerVariables[userID][pJob] = amount;
					Update(userID, pJobx);

					format(szMessage,256,"%s's job was set to %s (( Admin %s ))", GetName(userID), jobVariables[amount][jJobName], GetName(playerid));
					submitToAdmins(szMessage, COLOR_YELLOW);

				}
			}
        }
		else S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
    }
	return 1;
}
CMD:fly(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
	    new Float:f[8];
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
		SetPlayerPosEx(playerid, f[0], f[1], f[2]+10);
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:gotopoint(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
	    new interiorID, Float: coordinates[3];

		if(sscanf(params, "fffd", coordinates[0], coordinates[1], coordinates[2], interiorID))
		{
		    S(playerid, COLOR_GREY,"/gotopoint [x] [y] [z] [interior id]");
		}
		else
		{
		    InHQ[playerid] = -1;
		    SetPlayerInterior(playerid, interiorID);
		    SetPlayerPos(playerid, coordinates[0], coordinates[1], coordinates[2]);
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:gotocar(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{

		new testcar;
		if(sscanf(params, "d", testcar)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gotocar [carid]");


    	new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
		new Float:cwx2,Float:cwy2,Float:cwz2;
		GetVehiclePos(testcar, cwx2, cwy2, cwz2);
		InHQ[playerid] = -1;

		if(!vehicleid)
		{
			SetPlayerPos(playerid, cwx2,cwy2,cwz2);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, cwx2,cwy2,cwz2);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotospawn(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;
	    
	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1414.4384,-1687.1469,18.2737);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1414.4384,-1687.1469,18.2737);
			
			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:gotohq(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		if(isnull(params)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/gotohq [groupid]");

	    new groupID = strval(params);
		if(groupID < 1 || groupID > 9) return S(playerid, COLOR_GREY, "Invalid group ID.");
		
		
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

		if(groupID == 1)
		{
			if(!vehicleid)
			{
				SetPlayerPos(playerid, 242.4560,66.2830,1003.6406);
				LinkVehicleToInterior(vehicleid, 6);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 6);
			}
			else
			{
				SetVehiclePos(vehicleid, 242.4560,66.2830,1003.6406);

				foreach(Player, i)
				{
				    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
				    {
					    SetPlayerVirtualWorld(i, 0);
					    LinkVehicleToInterior(vehicleid, 6);
						SetVehicleVirtualWorld(vehicleid, 0);
						SetPlayerInterior(i, 6);
					}
				}
	  		}
	  	}
	  	else
	  	{
   		 	if(!vehicleid)
			{
				SetPlayerPos(playerid, groupVariables[groupID][gGroupExteriorPos][0],groupVariables[groupID][gGroupExteriorPos][1], groupVariables[groupID][gGroupExteriorPos][2]);
				LinkVehicleToInterior(vehicleid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
			}
			else
			{
				SetVehiclePos(vehicleid, groupVariables[groupID][gGroupExteriorPos][0],groupVariables[groupID][gGroupExteriorPos][1], groupVariables[groupID][gGroupExteriorPos][2]);

				foreach(Player, i)
				{
				    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
				    {
					    SetPlayerVirtualWorld(i, 0);
					    LinkVehicleToInterior(vehicleid, 0);
						SetVehicleVirtualWorld(vehicleid, 0);
						SetPlayerInterior(i, 0);
					}
				}
	  		}
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:gotoa(playerid,params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1487.1321,-2493.9741,13.5547);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1487.1321,-2493.9741,13.5547);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
  		S(playerid,COLOR_IN2,"You have teleported to the LS airport.");
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:gotom(playerid,params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, -2325.6992,-1625.4056,483.4446);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, -2325.6992,-1625.4056,483.4446);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:gotolms(playerid,params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 2810.3640,-1821.7709,9.6566);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 2810.3640,-1821.7709,9.6566);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:aaa2(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1487.1321,-2493.9741,13.5547);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 1337);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1487.1321,-2493.9741,13.5547);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 1337);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 1337);
					SetPlayerInterior(i, 0);
				}
			}
  		}
  		S(playerid,COLOR_WHITE,"Welcome to LS airport (in virtual world).");
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}

CMD:gotobusiness(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		if(isnull(params)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/gotobusiness [businessid]");

		new businessID = strval(params);

  		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, businessVariables[businessID][bExteriorPos][0],businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2]);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, businessVariables[businessID][bExteriorPos][0],businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2]);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
  		format(szMessage, 256, "AdmCmd: {FFFFFF}%s used /gotobusiness %d", GetName(playerid), businessID);
		submitToAdmins(szMessage, COLOR_RED);
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotohouse(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		if(isnull(params)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/gotohouse [houseid]");

		new houseID = strval(params);

		if(houseID < 1 || houseID > MAX_HOUSES) return S(playerid, COLOR_GREY, "Invalid house ID.");

  		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, houseVariables[houseID][hHouseExteriorPos][0], houseVariables[houseID][hHouseExteriorPos][1], houseVariables[houseID][hHouseExteriorPos][2]);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, houseVariables[houseID][hHouseExteriorPos][0], houseVariables[houseID][hHouseExteriorPos][1], houseVariables[houseID][hHouseExteriorPos][2]);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}

			}
  		}
		format(szMessage, 256, "AdmCmd: {FFFFFF}%s used /gotohouse %d", GetName(playerid), houseID);
		submitToAdmins(szMessage, COLOR_RED);
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:aaa3(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1487.1321,-2493.9741,13.5547);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 1338);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1487.1321,-2493.9741,13.5547);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 1338);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 1338);
					SetPlayerInterior(i, 0);
				}

			}
  		}
  		S(playerid,COLOR_WHITE,"Welcome to LS airport (in virtual world 1338).");
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotoexam(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1250.4077,-1825.0721,13.4038);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1250.4077,-1825.0721,13.4038);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
  		S(playerid,COLOR_IN2,"You teleported to the exam zone!");
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotopns(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1037.6398,-1064.6914,45.6649);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1037.6398,-1064.6914,45.6649);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}

			}
  		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotomark(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}

			}
  		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotols(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1613.7285,-896.3664,52.2932);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1613.7285,-896.3664,52.2932);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotosf(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, -1531.0603,529.2117,6.9068);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, -1531.0603,529.2117,6.9068);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotolv(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1840.1718,892.1860,10.5675);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1840.1718,892.1860,10.5675);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotods(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1064.7686,-1797.6863,13.3201);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1064.7686,-1797.6863,13.3201);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
  		S(playerid,COLOR_IN2,"You teleported to the dealership");
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:gotobank(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1472.1284,-1026.5964,23.3992);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1472.1284,-1026.5964,23.3992);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
  		S(playerid,COLOR_IN2,"You teleported to the bank!");
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:gotogiftbox(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, 1130.2744,-1454.0243,15.7969);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, 1130.2744,-1454.0243,15.7969);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:flymode(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		if(pUseFly[playerid] == 0)
		{
		    new vw;
		    vw = GetPlayerVirtualWorld(playerid);
		    if(vw == 1337)
		    {
		    	StartFly(playerid);
				SetPlayerHealthEx(playerid, 999);
				SetPlayerArmourEx(playerid, 999);
				pUseFly[playerid] = 1;
		    }
		    else
		    {
		    	StartFly(playerid);
				SetPlayerHealthEx(playerid, 999);
				SetPlayerArmourEx(playerid, 999);
				format(szMessage, 256, "%s is now in fly mode.",GetName(playerid));
				submitToAdmins(szMessage,COLOR_ADMCHAT);
				pUseFly[playerid] = 1;
		    }
   		}
   		else
   		{
   			pUseFly[playerid] = 0;
			S(playerid,COLOR_IN2,"Fly mode off.");
			ClearAnimations(playerid);
			SetCameraBehindPlayer(playerid);
			new Float:slx, Float:sly, Float:slz;
		    GetPlayerPos(playerid, slx, sly, slz);
		    SetPlayerPos(playerid, slx, sly, slz);
			SetTimerEx("unfreezeint", 100, false, "i", playerid);
			TogglePlayerControllable(playerid,0) ;
			StopFly(playerid);
			SetPlayerHealthEx(playerid, 100);
			SetPlayerArmourEx(playerid, 0);
 		}
  	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:kill(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		SetPlayerHealthEx(playerid, 0);
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:arepair(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 5)
	{
 		if(IsPlayerInAnyVehicle(playerid))
  		{
		    new VehicleID = GetPlayerVehicleID(playerid);
			RepairVehicle(VehicleID);
			S(playerid, COLOR_BLUE, "Vehicle repaired!");
		}
		else return S(playerid, -1, "You are not in any vehicle!");
    }
    else return S(playerid, -1, "{BFFF8B}This command can only be used by level 5+ admins.");
    return 1;
}
CMD:getcar(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new iVehicleID = strval(params);

		if(doesVehicleExist(iVehicleID))
		{
	        GetPlayerPos(playerid, playerVariables[playerid][pPos][0], playerVariables[playerid][pPos][1], playerVariables[playerid][pPos][2]);
	        SetVehiclePos(iVehicleID, playerVariables[playerid][pPos][0], playerVariables[playerid][pPos][1]+5, playerVariables[playerid][pPos][2]);
        }
    }
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}


CMD:freeze(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new userID, string[128];

		if(sscanf(params, "u", userID)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/freeze [playerid]");

		if(IsPlayerConnected(userID))
	    {
	    	if(playerVariables[playerid][pAdminLevel] >= playerVariables[userID][pAdminLevel])
			{
				TogglePlayerControllable(userID, 0);

				format(string, sizeof(string),"AdmCmd: %s used /freeze-ed on player %s.", GetName(playerid), GetName(userID));
				submitToAdmins(string, COLOR_ADMCHAT);
			}
		}
		else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:disarm(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new userID, string[128];

		if(sscanf(params, "u", userID)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/disarm [playerid]");

		if(IsPlayerConnected(userID))
	    {
	    	if(playerVariables[playerid][pAdminLevel] >= playerVariables[userID][pAdminLevel])
			{
				ResetPlayerWeaponsEx(userID);

				format(string, sizeof(string),"AdmCmd: %s used /disarm on player %s.", GetName(playerid), GetName(userID));
				submitToAdmins(string, COLOR_ADMCHAT);
				format(szMessage, sizeof(szMessage), "Armele tale au fost confiscate de adminul %s.", GetName(playerid));
				S(userID, COLOR_RED, szMessage);
			}
		}
		else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:aduty(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
	    switch(playerVariables[playerid][pAdminDuty])
		{
			case 0:
			{
			    timer = SetTimerEx("offadminduty", 60000, false, "i", playerid);
			    playerVariables[playerid][pAdminDuty] = 1;
				SetPlayerHealthEx(playerid, 500000.0);
				SetPlayerArmourEx(playerid, 500000.0);
				format(szMessage, sizeof(szMessage), "Notice: {FFFFFF}Admin %s (%d) is now on administrative duty.", playerVariables[playerid][pUsername], playerid);
			}
			case 1:
			{
			    KillTimer(timer);
			    playerVariables[playerid][pAdminDuty] = 0;
			    SetPlayerHealthEx(playerid, 100.0);
			    SetPlayerArmourEx(playerid, 0.0);
				format(szMessage, sizeof(szMessage), "Notice: {FFFFFF}Admin %s (%d) is now off administrative duty.", playerVariables[playerid][pUsername], playerid);
			}
		}
	}
	submitToAdmins(szMessage, COLOR_RED);
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new userID, string[128];

		if(sscanf(params, "u", userID)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/unfreeze [playerid]");

		if(IsPlayerConnected(userID))
	    {
			TogglePlayerControllable(userID, 1);

			format(string, sizeof(string),"AdmCmd: %s used /unfreeze on %s.", GetName(playerid), GetName(userID));
			submitToAdmins(string, COLOR_ADMCHAT);
		}
		else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:slap(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pHelperLevel] >= 1)
	{
 		new userID;

		if(sscanf(params, "u", userID))
		return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/slap [playerid]");

		if(!IsPlayerConnected(userID))
		return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");

		if(playerVariables[playerid][pAdminLevel] >= playerVariables[userID][pAdminLevel])
		{
			new	string[256], Float: fPos[3];

			GetPlayerPos(userID, fPos[0], fPos[1], fPos[2]);
			SetPlayerPos(userID, fPos[0], fPos[1], fPos[2]+5);
			PlayerPlaySoundEx(1190, fPos[0], fPos[1], fPos[2]);

			format(string, 256,"/slap: %s has slapped %s.",GetName(playerid), GetName(userID));
			submitToAdmins(string, COLOR_ADMCHAT);

			StopAudioStreamForPlayer(userID);
			TransportDuty[playerid] = 0;
		}
	}
	else return S(playerid, COLOR_WHITE, StaffOnly);
	return 1;
}
CMD:spawn(playerid, params[])
{
	new id, string[256];
	if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/spawn [playerid]");

	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		if(id != INVALID_PLAYER_ID)
		{
			OnPlayerSpawn(id);

			format(string, sizeof(string), "AdmCmd: %s has /spawn-ed %s.", GetName(playerid), GetName(id));
			submitToAdmins(string, COLOR_ADMCHAT);

			format(szMessage, sizeof(szMessage), "* Admin %s has spawned you!", GetName(playerid));
			S(id, COLOR_IN2, szMessage);
		}
		else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:slapcar(playerid,params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new iVehicleID = strval(params);
		if(doesVehicleExist(iVehicleID))
		{
		    new string[256];
	   		new Float:x, Float:y, Float:z;
	    	GetVehiclePos(iVehicleID , x, y, z);
	    	SetVehiclePos(iVehicleID , x, y, z+5);

			format(string, 256,"AdmCmd: %s slapped (/slapcar) the car %d.", GetName(playerid), iVehicleID);
			submitToAdmins(string, COLOR_ADMCHAT);
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}

CMD:ff(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float: f[5];
		GetPlayerPos(playerid, f[0], f[1], f[2]);
		GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
		SetPlayerPos(playerid, f[0]+2, f[1], f[2]);
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:bb(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float: f[5];
		GetPlayerPos(playerid, f[0], f[1], f[2]);
		GetXYInFrontOfPlayer(playerid, f[0], f[1], -20);
		SetPlayerPos(playerid, f[0]+2, f[1], f[2]);
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:up(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float: fPos[3];
		GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
		PlayerPlaySoundEx(1190, fPos[0], fPos[1], fPos[2]);
		SetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]+5);
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:down(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new Float: fPos[3];
		GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
		SetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]-5);
		PlayerPlaySoundEx(1190, fPos[0], fPos[1], fPos[2]);
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:sstats(playerid, params[])
{
	new string[256];
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		S(playerid, COLOR_TEAL, "---------------------------------------------------------------------");
	
     	format(string, sizeof(string), "Server started %d minutes ago (%02d.%02d.%02d, %02d:%02d).", serveropen/60, dataserver3, dataserver2, dataserver1, hourserver, minutserver);
     	S(playerid, COLOR_YELLOW, string);
     	
		S(playerid, COLOR_TEAL, "---------------------------------------------------------------------");
	}
  	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:jetpack(playerid, params[])
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	return 1;
}
CMD:test(playerid, params[])
{
	new amount;
    if(sscanf(params, "d", amount))
	{
		S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/test [amount]");
	}

	playerVariables[playerid][pQuestValue] = 3;
	Update(playerid, pQuestValuex);
	playerVariables[playerid][pQuest] = amount;
	Update(playerid, pQuestx);
	playerVariables[playerid][pQuestFinalizat] = 0;
	Update(playerid, pQuestFinalizatx);
	return 1;
}

CMD:test2(playerid, params[])
{
	playerVariables[playerid][pCarKey1] = 0;
	Update(playerid, pCarKey1x);
    return 1;
}     



    
CMD:healme(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
	    new string[126];

		SetPlayerHealthEx(playerid, 100);
		
		S(playerid,COLOR_IN2,"Healed!");
		format(string, sizeof(string), "AdmCmd: %s used /healme.", GetName(playerid));
		submitToAdmins(string, COLOR_ADMCHAT);
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:vre(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new string[128];
		new vehicleid = GetPlayerVehicleID(playerid);
		
	  	if(isnull(params))
		{
			if(IsPlayerInVehicle(playerid, vehicleid))
			{
			    if(Carspawn[vehicleid] != 0)
				{
					DestroyVehicle(vehicleid);
					Carspawn[vehicleid] = 0;
				}
	 			SetVehicleToRespawn(vehicleid);
	 			format(string, sizeof(string), "AdmCmd: Admin %s respawned vehicle %d.", GetName(playerid), vehicleid);
				submitToAdmins(string, COLOR_ADMCHAT);
	 		}
	 	}
	 	else if(sscanf(params, "d", vehicleid)) return S(playerid,COLOR_GREY,"Syntax: {FFFFFF}/vre [vehicleid]");
	 	{
	 	    if(isnull(params))
	 	    {
		 		return 1;
			}
			else
			{
			    if(Carspawn[vehicleid] != 0)
				{
					DestroyVehicle(vehicleid);
					Carspawn[vehicleid] = 0;
				}
				SetVehicleToRespawn(vehicleid);

		 		format(string, sizeof(string), "AdmCmd: Admin %s respawned vehicle %d.", GetName(playerid), vehicleid);
				submitToAdmins(string, COLOR_ADMCHAT);
			}
	 	}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:mark(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
		S(playerid, COLOR_GREY, "Teleporter destination set.");
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:goto(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 1)
	{
        new userID;
		if(sscanf(params, "u", userID))
		{
			return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/goto [playerid]");
		}
        else
        {
            if(userID == playerid) return S(playerid, -1, "Nu poti folosi /goto la tine.");
        	if(!IsPlayerConnected(userID)) return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			if(playerVariables[userID][pBusy] == 1) return S(playerid, -1, "Nu poti folosi /goto la owneri.");
			if(playerVariables[userID][pStatus] == 0) return S(playerid, -1, "Acel player nu este logat.");
			if(playerVariables[userID][pTutorial] == 0) return S(playerid, COLOR_GREY, "This player is currently in the tutorial.");

			new Float:x, Float:y, Float:z;
			GetPlayerPos(userID, x, y, z);

			if(!IsPlayerInAnyVehicle(userID))
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					SetPlayerPos(playerid, x, y+2, z);
					SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userID));
					SetPlayerInterior(playerid, GetPlayerInterior(userID));
				}
				else
				{
	    			SetVehiclePos(GetPlayerVehicleID(playerid), x, y+4, z);

					foreach(Player, i)
					{
					    if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)) || GetPlayerSurfingVehicleID(i) == GetPlayerVehicleID(playerid))
					    SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(userID));
					    LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(userID));
						SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(userID));
						SetPlayerInterior(i, GetPlayerInterior(userID));
					}
				}
			}
			else
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
           			SetVehiclePos(GetPlayerVehicleID(playerid), x, y+4, z);

					foreach(Player, i)
					{
					    if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)) || GetPlayerSurfingVehicleID(i) == GetPlayerVehicleID(playerid))
					    SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(userID));
					    LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(userID));
						SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(userID));
						SetPlayerInterior(i, GetPlayerInterior(userID));
					}
			    
			    }
			    else
			    {
      				if(IsPlayerInAnyVehicle(userID) && getEmptySeat(GetPlayerVehicleID(userID))>-1)
			  		{
			  		    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userID));
						SetPlayerInterior(playerid, GetPlayerInterior(userID));
						PutPlayerInVehicleEx(playerid, GetPlayerVehicleID(userID), getEmptySeat(GetPlayerVehicleID(userID)));
					}
					else
					{
     					SetPlayerPos(playerid, x, y+2, z);
						SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userID));
						SetPlayerInterior(playerid, GetPlayerInterior(userID));
					}
				}
			}
		}
    }
    else return S(playerid, COLOR_WHITE, AdminOnly);
    return 1;
}
CMD:closestcar(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
  			new playerWarpVehicle = GetClosestVehicle(playerid);
			if(doesVehicleExist(playerWarpVehicle))
			{
				new string[256];
				PutPlayerInVehicleEx(playerid, playerWarpVehicle, 0);
				format(string, sizeof(string), "AdmCmd: %s used /closestcar and teleported into a %s.", GetName(playerid), VehicleNames[GetVehicleModel(playerWarpVehicle) - 400]);
				submitToAdmins(string, COLOR_ADMCHAT);
			}
			else return S(playerid, COLOR_GREY, "No vehicles are in range.");
		}
		else return S(playerid, COLOR_GREY, "You can only use this command while on foot.");
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:santahat(playerid, params[])
{
    if(assetVariables[9][aAssetValue] == 1)
	{
		new id;
        if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/santahat <0/1>");

	    if(id == 0)
		{
			RemovePlayerAttachedObject(playerid, 3);
		}
		else if(id == 1)
		{
			SetPlayerAttachedObject(playerid, 3, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
		}
	}
	else return S(playerid,-1, "{BFFF8B}Aceasta comanda poate fi folosita doar cand o activeaza un owner!");
	return 1;
}


CMD:areagun(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 2)
 	{
  		new range, gun;
  		new count=0;
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x,y,z);

		if(sscanf(params, "ii", gun, range)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/areagun [gun] [range]");
		{
		    if(range > 200) return S(playerid, COLOR_GREY, "Max range: 200.");
		    if(gun < 1 || gun > 46 || gun==19 || gun==20 || gun==21 || gun==45 || gun > 48) return S(playerid, -1,"Invalid weapond ID.");

			foreach(Player, i)
			{
				if(IsPlayerConnected(i))
				{
					if(IsPlayerInRangeOfPoint(i, range * 1, x, y, z))
					{
						GivePlayerWeaponEx(i, gun, 9999);
						if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
						{
				        	new gun2, tmp;
				        	GetPlayerWeaponData(i, 5, gun2, tmp);
				        	#pragma unused tmp
				        	if(gun2) SetPlayerArmedWeapon(i, gun2);
				        	else SetPlayerArmedWeapon(i, 0);
						}
					}
				}
			}
			format(szMessage, 256, "AdmCmd: %s used /areagun and gived weapon %d to %d players.", GetName(playerid), gun, count);
			submitToAdmins(szMessage,COLOR_ADMCHAT);
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
  	return 1;
}
CMD:spawnweapon(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 2)
	{
        new weaponID, userID;

		if(sscanf(params, "ud", userID, weaponID))
			return S(playerid, COLOR_GREY, SYNTAX_MESSAGE"/spawnweapon [playerid] [weaponid]");

        if(userID != INVALID_PLAYER_ID)
		{
		    if(playerVariables[userID][pLicentaArme] == 0) return S(playerid, -1, "Acel player nu are licenta de arme.");
			
			if(weaponID < 1 && weaponID > 48)
			    return S(playerid, COLOR_GREY, "Invalid weapon ID.");
			    
			    
			    
   			

			if(weaponID == 19) return S(playerid, COLOR_GREY, "Invalid weapon ID.");
			if(weaponID == 39) return S(playerid, COLOR_GREY, "Invalid weapon ID.");
			if(weaponID == 40) return S(playerid, COLOR_GREY, "Invalid weapon ID.");
			if(weaponID == 44) return S(playerid, COLOR_GREY, "Invalid weapon ID.");
			if(weaponID == 45) return S(playerid, COLOR_GREY, "Invalid weapon ID.");
			
			GivePlayerWeaponEx(userID, weaponID, 999);
			
			new string[256], gunname[32];
			
			GetWeaponName(weaponID, gunname, sizeof(gunname));

			
			format(string, sizeof(string), "AdmCmd: %s used /spawnweapon and gave a %s to %s.", GetName(playerid), gunname, GetName(userID));
	        submitToAdmins(string, COLOR_ADMCHAT);
			
			
			
		}
		else S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
    }
    else return S(playerid, -1, "{BFFF8B}This command can only be used by level 2+ admins.");
    return 1;
}

CMD:askin(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
	    if(playerVariables[playerid][pSex] == 1)
	    {
			if(playerVariables[playerid][pID] == 1)
			{
	        	SetPlayerSkin(playerid, 119);
	        	playerVariables[playerid][pSkin] = 119;
	        	Update(playerid, pSkinx);
	        }
	        else if(playerVariables[playerid][pID] == 2)
	        {
	        	SetPlayerSkin(playerid, 285);
	        	playerVariables[playerid][pSkin] = 285;
	        	Update(playerid, pSkinx);
	        }
	        else
	        {
	        	SetPlayerSkin(playerid, 217);
	        	playerVariables[playerid][pSkin] = 217;
	        	Update(playerid, pSkinx);
	        }
	    }
     	if(playerVariables[playerid][pSex] == 2)
	    {
	        SetPlayerSkin(playerid, 211);
	        playerVariables[playerid][pSkin] = 211;
	        Update(playerid, pSkinx);
	    }
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}

CMD:spec(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pHelperLevel] >= 1)
	{
	    new id;
		if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/spec [playerid]");

		if(IsPlayerConnected(id))
   		{
			if(playerVariables[playerid][pHelperLevel] >= 1)
			{
				if(playerVariables[id][pAdminLevel] >= 1) return S(playerid, -1, "Nu te poti pune /spec pe admini.");
			}

			if(playerVariables[id][pAdminLevel] >= 6 && playerVariables[id][pBusy] == 1) return S(playerid, -1, "{BFFF8B}Nu poti da spectate pe owneri.");
			if(WatchingTV[id]) return S(playerid, COLOR_GREY, "That player is on spectating someone else.");
			if(playerVariables[id][pStatus] == 0) return S(playerid, -1, "Acel player nu este logat.");
			if(playerVariables[id][pTutorial] == 0) return S(playerid, COLOR_GREY, "This player is currently in the tutorial.");


			if(!WatchingTV[playerid])
			{
				GetPlayerPos(playerid, s_pos[playerid][retx], s_pos[playerid][rety],s_pos[playerid][retz]);
				GetPlayerFacingAngle(playerid,s_pos[playerid][retang]);
   				s_pos[playerid][retint] = GetPlayerInterior(playerid);
   				s_pos[playerid][retworld] = GetPlayerVirtualWorld(playerid);
			}

			new intt, vww;
			Spectate[playerid] = id;
			WatchingTV[playerid] = 1;
			TogglePlayerSpectating(playerid, 1);
			intt = GetPlayerInterior(id);
			vww = GetPlayerVirtualWorld(id);
			SetPlayerInterior(playerid,intt);
			SetPlayerVirtualWorld(playerid,vww);

			new Float:HAFloats;
			GetPlayerHealth(id,HAFloats);

			format(szMessage, sizeof(szMessage), "(%i) %s | Level: %i | Health: %.1f | Ping: %i | FPS: %d", id, GetName(id), playerVariables[id][pLevel], HAFloats, GetPlayerPing(id), FPS2[id]);
			S(playerid, COLOR_IN2, szMessage);

			if(playerVariables[id][pAdminLevel] >= 5)
			{
				new string2[128];
				format(string2, sizeof(string2), "%s is now spectating you..", GetName(playerid));
				S(id, COLOR_WHITE, string2);
			}


			if(IsPlayerInAnyVehicle(id))
		    {
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
			}
			else
			{
			    PlayerSpectatePlayer(playerid, id, 1);
			}
		}
		else
		{
			if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, COLOR_GREY, "Acel player nu este conectat.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			}
		}
	}
	else return S(playerid, COLOR_WHITE, StaffOnly);
	return 1;
}


CMD:vehname(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{

		S(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
		S(playerid, COLOR_WHITE, "Vehicle Search:");

		new rcount;

		if(isnull(params))
			return S(playerid, COLOR_GREY, "No keyword specified.");

		if(strlen(params) < 3)
			return S(playerid, COLOR_GREY, "Search keyword too short.");

		for(new v; v < sizeof(VehicleNames); v++)
	 	{
			if(strfind(VehicleNames[v], params, true) != -1)
			{

				if(rcount == 0)
					format(szMessage, sizeof(szMessage), "%s (ID %d)", VehicleNames[v], v+400);
				else
					format(szMessage, sizeof(szMessage), "%s | %s (ID %d)", szMessage, VehicleNames[v], v+400);

				rcount++;
			}
		}

		if(rcount == 0)
			S(playerid, COLOR_GREY, "No results found.");

		else
			if(strlen(szMessage) >= 128)
				S(playerid, COLOR_GREY, "Too many results found.");
			else
				S(playerid, COLOR_WHITE, szMessage);

		S(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}

CMD:auninvite(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 3)
   	{
		new id, reason[64], fp, query69[250], string2[250];

		if(sscanf(params, "uis[64]", id, fp, reason)) return S(playerid, -1,"Syntax: {FFFFFF}/auninvite [playerid] [FP] [reason]");
		{
			format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s", GetName(id), GetName(playerid), groupVariables[playerVariables[id][pGroup]][gGroupName], playerVariables[id][pGroupRank], playerVariables[id][pGroupDays], fp, reason);
			SendToGroup(playerVariables[id][pGroup], COLOR_GENANNOUNCE, string2);

			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'fhistory', '%d')", string2, playerVariables[id][pID]);
			mysql_query(handle, szLargeString);


			format(query69,sizeof(query69),"Ai primit uninvite de la adminul %s din factiunea din care faceai parte dupa %d zile, cu %d FP. Motiv: %s", GetName(playerid), playerVariables[id][pGroupDays], fp, reason);
			chatlogs(query69, COLOR_WHITE);

			mysql_format(handle, query69, sizeof(query69), "INSERT INTO email (text, ID) VALUES ('%e', '%d')", query69, playerVariables[id][pID]);
			mysql_query(handle, query69);

			format(string2, sizeof(string2), "(staff) %s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s", GetName(id), GetName(playerid), groupVariables[playerVariables[id][pGroup]][gGroupName], playerVariables[id][pGroupRank], playerVariables[id][pGroupDays], fp, reason);
			submitToAdmins(string2,COLOR_BOSS2);


			playerVariables[id][pGroup] = 0;
			Update(id, pGroupx);

			playerVariables[id][pGroupDays] = 0;
			Update(id, pGroupDaysx);

			playerVariables[id][pGroupRank] = 0;
			Update(id, pGroupRankx);

			playerVariables[id][pFactionPunish] = fp;
			Update(id, pFactionPunishx);

			SetPlayerSkin(id, 170);
			playerVariables[id][pSkin] = 170;
			Update(id, pSkinx);

			SetPlayerToTeamColor(id);

		}
	}
	else return S(playerid, -1, "{BFFF8B}This command can only be used by level 3+ admins.");
	return 1;
}


CMD:spawnhere(playerid, params[])
{
	new id;

	if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/spawnhere [playerid]");

	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		if(id != INVALID_PLAYER_ID)
		{
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(id, X,Y,Z);

			SetPlayerPos(id, X,Y,Z+1);

   			playerVariables[id][pFreezeTime] = 0;
			playerVariables[id][pFreezeType] = 0;
			TogglePlayerControllable(id, 1);

			format(szMessage, sizeof(szMessage), "AdmCmd: %s has /spawn-ed %s and restored his position.", GetName(playerid), GetName(id));
			submitToAdmins(szMessage, COLOR_ADMCHAT);

			format(szMessage, sizeof(szMessage), "Done: You have /spawn-ed %s and restored his position.", GetName(id));
			S(playerid, COLOR_IN2, szMessage);

			format(szMessage, sizeof(szMessage), "* Admin %s has respawned you!", GetName(playerid));
			S(id, COLOR_IN2, szMessage);

		}
		else
		{
			if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, COLOR_GREY, "Acel player nu este conectat.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			}
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:unjail(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id, string[256], reason[128];

		if(sscanf(params, "us[128]", id, reason)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/unjail [playerid] [reason]");
		{
			if(id != INVALID_PLAYER_ID)
			{
			    if(playerVariables[id][pPrisonID] > 0)
	   			{
	   				playerVariables[id][pPrisonID] = 0;
					Update(id, pPrisonIDx);

					playerVariables[id][pPrisonTime] = 0;
					Update(id, pPrisonTimex);

					OnPlayerSpawn(id);

					format(string, sizeof(string), "Unjail: %s has been unjailed by %s, reason: %s", playerVariables[id][pUsername], playerVariables[playerid][pUsername], reason);
					SendClientMessageToAll(COLOR_LIGHTRED, string);

					new var100[256];
					mysql_format(handle, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','6','%s','%s','%s')", playerVariables[id][pID], playerVariables[playerid][pID], reason, playerVariables[id][pUsername], playerVariables[playerid][pUsername]);
					mysql_tquery(handle, var100, "","");
	   			}
	   		}
	   		else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:dmp(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id, string[256];

		if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dmp [playerid]");
		{
		    if(!IsPlayerConnected(id)) return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		    if(playerVariables[id][pAdminLevel] >= 1) return S(playerid, COLOR_GREY, "Nu poti baga in jail un administrator.");
		    if(id == playerid) return S(playerid, COLOR_WHITE, "There you can give yourself prison.");

		    if(playerVariables[id][pPrisonID] != 2)
   			{
   			    if(DeelaySystem == 0)
  		    	{
					ResetPlayerWeaponsEx(id);
					SetPlayerInterior(id, 10);
					SetPlayerVirtualWorld(id, 0);
					SetPlayerWantedLevel(playerid, 0);

					playerVariables[id][pPrisonID] = 2;
					Update(id, pPrisonIDx);

					playerVariables[id][pPrisonTime] = 30 * 60;
					Update(id, pPrisonTimex);
					
					playerVariables[id][pWanted] = 0;
					Update(id, pWantedx);

					playerVariables[playerid][pCheckpoint] = 0;
					playerVariables[playerid][pCheckpointPizza] = 0;
					DisablePlayerCheckpoint(id);
					DisablePlayerRaceCheckpoint(id);

					new spawn = random(sizeof(JailSpawns));
					SetPlayerPos(id, JailSpawns[spawn][0], JailSpawns[spawn][1], JailSpawns[spawn][2]);


			    	format(string, sizeof(string), "Jail: %s has been jailed by %s, reason: DM #2 (30 minutes)", playerVariables[id][pUsername], playerVariables[playerid][pUsername]);
					SendClientMessageToAll(COLOR_LIGHTRED, string);
					
					new var100[256];
					mysql_format(handle, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','5','DM #2','%s','%s')", playerVariables[id][pID], playerVariables[playerid][pID], playerVariables[id][pUsername], playerVariables[playerid][pUsername]);
					mysql_tquery(handle, var100, "","");
					
					DeelaySystem = 10;
		    	}
	       		else
				{
					format(szMessage, 256, "[System] Poti folosi aceasta comanda in %d secunde.", DeelaySystem);
					S(playerid, COLOR_NOB, szMessage);
				}
		    }
		    else return S(playerid, COLOR_GREY, "Acel player se afla deja in jail.");
	   	}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:sleep(playerid, params[])
{
    if(playerVariables[playerid][pWanted] == 0)
	{
        if(playerVariables[playerid][pSleep] == 0)
		{
			playerVariables[playerid][pSleep] = 1;
			TogglePlayerControllable(playerid,0);
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 1, 0, 0, 0);
			SetPlayerColor(playerid, COLOR_GREY);
		}
		else
		{
			playerVariables[playerid][pSleep] = 0;
			ClearAnimations(playerid);
			TogglePlayerControllable(playerid, 1);
			SetPlayerToTeamColor(playerid);
	    }
    }
	return 1;
}
CMD:afklist(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
	    new string[128];
		new on = 0;
		new afktwo = 0;
		new afk = 0;
		new ten = 0;
		new jumaora = 0;
		new hour = 0;
		new doi = 0;
	 	foreach(Player, t)
	 	{
 			if(playerVariables[t][pSleep] > 0)
			{
				on++;
			}
			if(IsPlayerAFK[t] > 7200)
			{
				afktwo++;
			}
			if(IsPlayerAFK[t] < 60)
			{
				afk++;
			}
			if(IsPlayerAFK[t] >= 120 && IsPlayerAFK[t] <= 600)
			{
				ten++;
			}
			if(IsPlayerAFK[t] >= 600 && IsPlayerAFK[t] <= 1800)
			{
				jumaora++;
			}
			if(IsPlayerAFK[t] >= 1800 && IsPlayerAFK[t] <= 3600)
			{
				hour++;
			}
			if(IsPlayerAFK[t] > 60 && IsPlayerAFK[t] <= 120)
			{
				doi++;
			}
 		}
		S(playerid, COLOR_TEAL, "----- AFK Players -----");
		
		format(string, sizeof(string), "/sleep: %d players", on);
		S(playerid, COLOR_WHITE, string);
		
		format(string, sizeof(string), "AFK for more than 2 hours: %d", afktwo);
		S(playerid, COLOR_WHITE, string);
		
		format(string, sizeof(string), "AFK for 30 minutes - 1 hour: %d", hour);
		S(playerid, COLOR_WHITE, string);
		
		format(string, sizeof(string), "AFK for 10-30 minutes: %d", jumaora);
		S(playerid, COLOR_WHITE, string);
		
		format(string, sizeof(string), "AFK for 2-10 minutes: %d", ten);
		S(playerid, COLOR_WHITE, string);
		
		format(string, sizeof(string), "AFK for than 2 minutes: %d", doi);
		S(playerid, COLOR_WHITE, string);

  		format(string, sizeof(string), "Not AFK: %d", afk);
		S(playerid, COLOR_WHITE, string);
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:check(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id;
		if(sscanf(params, "i", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/check [playerid]");
			
		if(playerVariables[playerid][pAdminLevel] >= playerVariables[id][pAdminLevel])
		{
			if(IsPlayerConnected(id))
			{
				if(id != INVALID_PLAYER_ID)
				{
					ShowStats(playerid, id);
				}
			}
			else return S(playerid, COLOR_GREY, "Player not connected.");
		}
		else return S(playerid, COLOR_GREY, "Youn can't check a higher level administrator.");
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:stats(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		ShowStats(playerid, playerid);
	}
	return 1;
}
CMD:eject(playerid, params[])
{
    new State;
    if(IsPlayerInAnyVehicle(playerid))
    {
		new id;
 		State= GetPlayerState(playerid);
 		
   		if(State!=PLAYER_STATE_DRIVER) return S(playerid, COLOR_GREY, "You can only eject people as the driver.");

		if(sscanf(params, "u", id)) return S(playerid,COLOR_GREY, "Syntax: {FFFFFF}/eject [playerid]");

		new test;
		test = GetPlayerVehicleID(playerid);

	    if(id != INVALID_PLAYER_ID)
	    {
  			if(id == playerid) return S(playerid, -1, "You cannot eject yourself.");
	        if(IsPlayerInVehicle(id, test))
	        {
				RemovePlayerFromVehicleEx(id);
				return 1;
			}
			else return S(playerid, COLOR_GREY, "That player is not in your car.");
		}
	}
	return 1;
}


CMD:ah(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		S(playerid,COLOR_TEAL,"----------------------------------------------------------------------------------------------------------------------------------");
	}
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		S(playerid,COLOR_WHITE,"Level 1: /da, /a, /kill, /healme, /askin, /sstats, /anno(unce), /flymode, /up, /down, /ff, /bb, /va, /vre");
		S(playerid,COLOR_WHITE,"Level 1: /dmp, /warn, /kick, /spawn, /spawnhere, /areaheal, /closestcar, /goto, /mark, /check");
		S(playerid,COLOR_WHITE,"Level 1: /vehname, /vrank, /afklist, /freeze, /unfreeze, /disarm, /aduty, /slap, /slapcar, /getcar");
	}
	if(playerVariables[playerid][pAdminLevel] >= 2)
	{
		S(playerid,COLOR_WHITE,"Level 2: /areagun, /areadisarm, /areafreeze, /areaunfreeze, /spawnweapon");
	}
	if(playerVariables[playerid][pAdminLevel] >= 3)
	{
		S(playerid,COLOR_WHITE,"Level 3: /set, /auninvite, /makeleader, /unban");
	}
	if(playerVariables[playerid][pAdminLevel] >= 3)
	{
		S(playerid,COLOR_WHITE,"Level 5: /vgroup, /arepair");
	}
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		S(playerid,COLOR_WHITE,"Level 6: /setsvar, /o, /specme, /apay, /fulldmv, /makeadmin, /sethelper, /createhouse, /createbusiness");
		S(playerid,COLOR_WHITE,"Level 6: /flip, /nos, /acover, /cs, /payday, /explode, /movejob, /savedata, /setskill,/abusinessname /movebusiness");
		S(playerid,COLOR_WHITE,"Edit faction: /gname, /setgslots, /setgrouplevel, /gtype, /gsafepos, /movehq");
		S(playerid,COLOR_WHITE,"Houses: /createhouse, /housename");
		S(playerid,COLOR_WHITE,"Vehicles: /saveveh, /vcolor, /vjob, /vmodel, /vmove");
	}
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		S(playerid,COLOR_WHITE,"Teleports: /aaa2, /aaa3, /gotoa, /gotopoint, /gotoexam, /gotods, /gotols, /gotosf, /gotolv, /gotocar, /gotom");
		S(playerid,COLOR_WHITE,"Teleports: /gotospawn, /gotobank, /gotobusiness, /gotohouse, /gotogiftbox, /gotomark, /gotohq, /gotolms");
	}
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		S(playerid,COLOR_TEAL,"----------------------------------------------------------------------------------------------------------------------------------");
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:vcolor(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return S(playerid, COLOR_GREY, "You must be inside the vehicle that you wish to alter the colour of.");

		new string[80], colour1, colour2;

		if(sscanf(params,"dd", colour1, colour2)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/vcolor [color 1] [color 2]");

        for(new x = 0; x < MAX_VEHICLES; x++)
		{
            if(vehicleVariables[x][vVehicleScriptID] == GetPlayerVehicleID(playerid))
			{
                vehicleVariables[x][vVehicleColour][0] = colour1;
				vehicleVariables[x][vVehicleColour][1] = colour2;
				ChangeVehicleColor(vehicleVariables[x][vVehicleScriptID], vehicleVariables[x][vVehicleColour][0], vehicleVariables[x][vVehicleColour][1]);
                saveVehicle(x);
				format(string, sizeof(string), "You have changed this vehicle's colour combination to %d, %d (vehicle %d).", colour1, colour2, x);
				S(playerid, COLOR_WHITE, string);
				return 1;
			}
        }
        new vehicle = GetPlayerVehicleID(playerid);
        ChangeVehicleColor(vehicle, colour1, colour2);
		format(string, sizeof(string), "You have changed this vehicle's colour combination to %d, %d (vehicle %d).", colour1, colour2, vehicle);
		S(playerid, COLOR_WHITE, string);
	}
	else return S(playerid, -1, OwnerError);
 	return 1;
}

CMD:vgroup(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 5)
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return S(playerid, COLOR_GREY, "You must be inside the vehicle that you wish to alter the group requirement of.");

		new string[96], groupParam = strval(params);

		if(groupParam < 0 || groupParam > MAX_GROUPS) return S(playerid, COLOR_GREY, "Invalid group ID.");

        for(new x = 0; x < MAX_VEHICLES; x++)
		{
            if(vehicleVariables[x][vVehicleScriptID] == GetPlayerVehicleID(playerid))
			{
                vehicleVariables[x][vVehicleGroup] = groupParam;

                saveVehicle(x);

                switch(groupParam)
				{
					case 0: format(string, sizeof(string), "You have removed group restrictions from this vehicle (%d).", x);
					default: format(string, sizeof(string), "You have changed this vehicle's group to %s (vehicle %d).", groupVariables[groupParam][gGroupName], x);
				}
				S(playerid, COLOR_WHITE, string);
				return 1;
			}
        }
	}
	else return S(playerid, -1, "{BFFF8B}This command can only be used by level 5+ admins.");
	return 1;
}
CMD:vspawn(playerid, params[])
{
	return cmd_spawncar(playerid, params);
}
CMD:spawncar(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 1)
    {
        if(!isnull(params))
        {
			new carid = strval(params), Float: carSpawnPos[4], string[126];
			new vw = GetPlayerVirtualWorld(playerid);

			if(carid < 400 || carid > 611)
				return S(playerid, COLOR_WHITE, "Valid car IDs start at 400, and end at 611.");


			GetPlayerPos(playerid, carSpawnPos[0], carSpawnPos[1], carSpawnPos[2]);
			GetPlayerFacingAngle(playerid, carSpawnPos[3]);
			new masina = CreateVehicle(carid, carSpawnPos[0], carSpawnPos[1], carSpawnPos[2], carSpawnPos[3], random(250), random(250), 1800);
			Carspawn[masina] = masina;
			SetVehicleNumberPlate(masina,"ADMCAR");
			LinkVehicleToInterior(masina, GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(masina, GetPlayerVirtualWorld(playerid));
			PutPlayerInVehicleEx(playerid, masina, 0);
			SetVehicleParamsEx(GetPlayerVehicleID(playerid), 1, lights, alarm, 0, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, objective);
			Gas[GetPlayerVehicleID(playerid)] = 50 + random(50);

		    if(vw != 1337)
		    {
				format(string, sizeof(string), "AdmCmd: %s has spawned a %s.", N(playerid), VehicleNames[carid - 400]);
				submitToAdmins(string, COLOR_ADMCHAT);
			}
		}
		else
		{
			return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/spawncar [vehicleid]");
		}
    }
	else return S(playerid, -1, AdminOnly);
	return 1;
}
CMD:getgift(playerid, params[])
{
	new string[256];
	if(assetVariables[1][aAssetValue] == 1)
	{
		if(playerVariables[playerid][pGiftHours] == 0)
		{
	    	if(playerVariables[playerid][pCheckpoint] == 0)
	    	{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, 1128.9078,-1453.7595,15.7969))
				{
					playerVariables[playerid][pGiftHours] = 2;
					Update(playerid, pGiftHoursx);
				}
				else
				{
					SS(playerid, COLOR_YELLOW, "Mergi la checkpoint-ul de pe minimap pentru a ajunge la giftbox!", "Follow the checkpoint on the map to reach the giftbox!");
					SetPlayerCheckpoint(playerid, 1128.9078,-1453.7595,15.4969, 5);
					playerVariables[playerid][pCheckpoint] = 1;
				}
			}
			else return SS(playerid, COLOR_ERROR, "Foloseste /killcp si apoi /getgift pentru a pune un checkpoint catre giftbox pe map.","Use /killcp and then /getgift if you want a checkpoint to the gitbox place on the minimap.");
  		}
  		else
		{
		    if(playerVariables[playerid][pLimba] == 1)
		    {
				format(string, sizeof(string), "Vei putea folosi /getgift din nou peste %d ore.", playerVariables[playerid][pGiftHours]);
				S(playerid, COLOR_YELLOW, string);

				format(string, sizeof(string), "Timpul petrecut pe /sleep sau afk nu va fi contorizat. Trebuie sa joci %d ore.", playerVariables[playerid][pGiftHours]);
				S(playerid, COLOR_YELLOW, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				format(string, sizeof(string), "You will be able to use /getgift after playing %d hours.", playerVariables[playerid][pGiftHours]);
				S(playerid, COLOR_YELLOW, string);

				format(string, sizeof(string), "The time spent on /sleep or being AFK doesn't count towards the %d hours needed.", playerVariables[playerid][pGiftHours]);
				S(playerid, COLOR_YELLOW, string);
			}
		}
	}
	else return SS(playerid, -1, "{91D09A}Giftbox-ul nu este activat.", "{91D09A}The giftbox is not active.");
	return 1;
}



CMD:sethelper(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 5)
	{
	    new id, level, string[200];
	    if(sscanf(params, "ui", id, level)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/sethelper [playerid] [level]");

		if(IsPlayerConnected(id))
	    {
		    if(level >= 0 && level <= 3)
		    {
		        format(szMessage, sizeof(szMessage), "You have made %s a level %d helper.", GetName(id), level);
				S(playerid, COLOR_WHITE, szMessage);
		    
		        format(string, sizeof(string),"* Admin %s set %s's helper level to %d.", GetName(playerid), GetName(id), level);
				submitToStaff(string, 0x975708FF);

				if(level == 0)
				{
					format(string, sizeof(string), "Administrator %s has removed you from the helpers team.", GetName(playerid));
					S(id, COLOR_BOSS2, string);
				}
				if(level >= playerVariables[id][pHelperLevel])
				{
					format(string, sizeof(string), "Administrator %s has promoted you to a level %d helper.", GetName(playerid), level);
					S(id, COLOR_NICESKY, string);
				}
				
				playerVariables[id][pHelperLevel] = level;
				Update(id, pHelperLevelx);
		    }
		    else S(playerid, COLOR_GREY, "Valid helpers levels are 0 to 3.");
		}
		else S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, -1, "{BFFF8B}This command can only be used by level 5+ admins.");
	return 1;
}

CMD:cc(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] < 1) return S(playerid, COLOR_WHITE, AdminOnly);
	{
	    new string[128];
	    foreach(Player, p)
		{
			if(playerVariables[p][pAdminLevel] == 0 && playerVariables[p][pHelperLevel] == 0)
			{
				for( new i = 0; i <= 40; i++)
				{
					S(p, COLOR_WHITE, " ");
				}
			}
		}
		format(string, sizeof(string), "AdmCmd: {FFFFFF}%s used /cc.", GetName(playerid));
		submitToAdmins(string, COLOR_RED);
	}
	return 1;
}
CMD:pm(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new message[128], id, string[256];
		if(sscanf(params, "us[128]", id, message)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/pm [playerid] [message]");
		
		if(IsPlayerConnectedEx(id))
		{	
			format(string, sizeof(string), "PM from %s: %s", N(playerid), message);
			S(id, COLOR_YELLOW, string);

			format(string, sizeof(string), "PM sent to %s: %s", N(id), message);
			S(playerid, COLOR_GREY, string);

			PlayerPlaySound(id, 1149, 0.0, 0.0, 0.0);
	    }
	    else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
    }
    else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:re(playerid, params[])
{
	new message[128], id, string[256];

	if(sscanf(params, "us[128]", id, message)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/re [playerid] [message]");

	if(playerVariables[playerid][pHelperLevel] >= 1 || playerVariables[playerid][pAdminLevel] >= 1)
	{
	    if(IsPlayerConnectedEx(id))
		{
			format(string, sizeof(string), "PM from %s: %s", N(playerid), message);
			S(id, COLOR_YELLOW, string);

			format(string, sizeof(string), "(/re) %s -> %s: %s", N(playerid), N(id), message);
			submitToStaff(string, COLOR_YELLOW);
	    }
	    else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, COLOR_WHITE, StaffOnly);
	return 1;
}




CMD:acolor(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pHelperLevel] >= 1)
	{
		ShowPlayerDialog(playerid, DIALOG_ACOLOR, DIALOG_STYLE_LIST, "Nickname color:", "White\nCool Red\nDark Red\nLight Red","Choose","Cancel");
	}
	else return S(playerid, COLOR_WHITE,StaffOnly);
	return 1;
}

/*CMD:ban(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id, reason[128], string[200], str[1400], days, year, month, day, hour, minute, second, time;


		if(sscanf(params, "uds[128]", id, days, reason)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/ban [playerid] [days] [reason]");

		if(id != INVALID_PLAYER_ID)
  		{
        	if(playerVariables[id][pAdminLevel] >= playerVariables[playerid][pAdminLevel]) return S(playerid, COLOR_GREY, "You can't ban a higher (or equal) level administrator.");

			if(DeelaySystem == 0)
  		    {
  		        getdate(year, month, day);
        		gettime(hour, minute, second);

	        	if(days == 0)
				{
				    format(string, sizeof(string),"Ban: %s has been permanent banned by %s, reason: %s.", GetName(id), GetName(playerid), reason);
			    	SendClientMessageToAll(COLOR_LIGHTRED, string);

					DeelaySystem = 10;
				}
				if(days > 0)
				{
					format(string, sizeof(string),"Ban: %s has been banned by %s for %d days, reason: %s.", GetName(id), GetName(playerid), days, reason);
	    			SendClientMessageToAll(COLOR_LIGHTRED, string);

	    			time = gettime() + (days*86400);

	    			mysql_format(handle, str, sizeof(str), "INSERT INTO bans (PlayerName, AdminName, Reason, Days, Time) VALUES('%s', '%s', '%s', '%d', %d)",
					GetName(id), GetName(playerid), reason, days, time);
					mysql_tquery(handle, str,"","");

	    			DeelaySystem = 10;
				}
			}
			else
			{
				format(szMessage, 256, "[System] Poti folosi aceasta comanda in %d secunde.", DeelaySystem);
				S(playerid, COLOR_NOB, szMessage);
			}
		}
		else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}*/

CMD:banoff(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id[30], reason[128], string[200], days, str[1400], year, month, day, hour, minute, second, time, cont, qstr[500], playeridd;

		if(sscanf(params, "s[30]ds[128]", id, days, reason)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/banoff [username] [days] [reason]");


		if(days < 0) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/banoff [username] [days] [reason]");
        cont = MySQLCheckAccount(id);
		
		if(cont == 0) return S(playerid,-1,"This name does not exist.");
		
        getdate(year, month, day);
        gettime(hour, minute, second);
        
        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'", id);
		new Cache: banuri = mysql_query(handle, qstr);
		if(cache_get_row_count() > 0)
		{
		    S(playerid, COLOR_GREY, "This player is already banned.");
		}
		else
		{
			format(qstr, sizeof(qstr), "SELECT `id` FROM players WHERE `username` = '%s'", id);
			mysql_store_result();
			mysql_query(handle, qstr);
			if(mysql_retrieve_row())
			{
				mysql_fetch_field_row(result, "id"); playeridd = strval( result );
			}
			mysql_free_result();
			
			
			if(DeelaySystem == 0)
  		    {
				if(days == 0)
				{
					format(string,sizeof(string),"Ban: %s has been permanent banned by %s, reason: %s.",id, playerVariables[playerid][pUsername], reason);
					SendClientMessageToAll(COLOR_LIGHTRED, string);

					mysql_format(handle, str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, Permanent, Active, Time) VALUES('%s', '%s', '%s', '0', 0, 1, 1, 0)",
					id,playerVariables[playerid][pUsername], reason);
					mysql_tquery(handle, str, "","");

					new var100[256];
					mysql_format(handle, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','1','0','%s','%s','%s')", playeridd, playerVariables[playerid][pID], reason, id, playerVariables[playerid][pUsername]);
					mysql_tquery(handle, var100, "","");
					DeelaySystem = 10;
				}
				if(days > 0)
				{
					time = gettime() + (days*86400);

					format(string,sizeof(string),"Ban: %s has been banned by %s for %d days, reason: %s.", id, playerVariables[playerid][pUsername], days, reason);
					SendClientMessageToAll(COLOR_LIGHTRED, string);


					mysql_format(handle, str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, Permanent, Active, Time) VALUES('%s', '%s', '%s', '0', %d, 0, 1, %d)",
					id, playerVariables[playerid][pUsername], reason, days, time);
					mysql_tquery(handle, str, "","");


					new var100[256];
					mysql_format(handle, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','2','%d','%s','%s','%s')", playeridd, playerVariables[playerid][pID], days, reason, id, playerVariables[playerid][pUsername]);
					mysql_tquery(handle, var100, "","");
					DeelaySystem = 10;
				}
			}
			else
			{
				format(szMessage, 256, "[System] Poti folosi aceasta comanda in %d secunde.", DeelaySystem);
				S(playerid, COLOR_DEELAY, szMessage);
			}
		}
		cache_delete(banuri);
	}
	else return S(playerid, -1, AdminOnly);
	return 1;
}
CMD:unban(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
		if(playerVariables[playerid][pAdminLevel] >= 3)
		{
		    new id[30], cont, str1[256], string[128], qstr[256];
		    
			if(sscanf(params, "s[30]", id)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/unban [username]");

			cont = MySQLCheckAccount(id);
	        if(cont == 0) return S(playerid, COLOR_WHITE,"This name does not exist.");
	        
	        format(qstr, sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'", id);
    		new Cache: banuri = mysql_query(handle, qstr);
    		if(cache_get_row_count() > 0)
    		{
    		    format(string,sizeof(string),"AdmCmd: %s has unbanned user %s.", playerVariables[playerid][pUsername], id);
    		    submitToAdmins(string, COLOR_RED);
    		    
			    mysql_format(handle, str1,sizeof(str1),"UPDATE bans SET `Active`='0' WHERE `PlayerName`= '%s'", id);
				mysql_tquery(handle, str1, "","");
			}
			else
			{
			    S(playerid, COLOR_GREY, "This player is not banned.");
			}
			cache_delete(banuri);
		}
		else return S(playerid, -1, "{BFFF8B}This command can only be used by level 3+ admins.");
	}
	return 1;
}
CMD:warn(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id, reason[128], string[200], time, playerip[16];
		
		if(sscanf(params, "us[128]", id, reason)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/warn [playerid] [reason]");
		{
			if(DeelaySystem == 0)
  		    {
			    if(IsPlayerConnected(id))
			    {
				    if(playerVariables[id][pAdminLevel] >= playerVariables[playerid][pAdminLevel]) return S(playerid, -1, "You can't warn a higher (or equal) level administrator.");

					playerVariables[id][pWarns] += 1;
					Update(id, pWarnsx);

					format(string, sizeof(string), "Warn: %s received a warn from admin %s, reason: %s.", playerVariables[id][pUsername], playerVariables[playerid][pUsername], reason);
					SendClientMessageToAll(COLOR_LIGHTRED, string);
					
					
					new var100[256];
					
    				mysql_format(handle, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','1','%s','%s','%s')", playerVariables[id][pID], playerVariables[playerid][pID], reason, playerVariables[id][pUsername], playerVariables[playerid][pUsername]);
					mysql_tquery(handle, var100, "","");

					DeelaySystem = 10;
					
					new string2[128], query[500], Get[6];

         			gettime(Get[3],Get[4],Get[5]);
    				getdate(Get[0],Get[1],Get[2]);

					format(string2, sizeof(string2), "Ai primit un warn de la adminul %s, motiv: %s.\n\nSent at: %02d.%02d.%02d %02d:%02d:%02d", playerVariables[playerid][pUsername], reason, Get[0], Get[1], Get[2], Get[3], Get[4], Get[5]);
					mysql_format(handle, query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", playerVariables[id][pID], string2);
					mysql_tquery(handle, query, "","");
					
					if(playerVariables[id][pWarns] >= 3)
					{
					    new str[500];
					    GetPlayerIp(id, playerip, sizeof(playerip));
					    time = gettime() + (3*86400);

						mysql_format(handle, str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, Permanent, Active, Time) VALUES('%s', 'AdmBot', '3/3 warns', '%s', 3, 0, 1, %d)",
						playerVariables[id][pUsername], playerip, time);
						mysql_tquery(handle, str, "","");

						playerVariables[id][pWarns] = 0;
						Update(id, pWarnsx);

						format(string, sizeof(string), "Ban: %s has been banned by AdmBot for 3 days, reason: 3/3 warns.", playerVariables[id][pUsername]);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						
						mysql_format(handle, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`, `actiontime`) VALUES ('%d','0','3','3/3 warns','%s','AdmBot', '3')", playerVariables[id][pID], playerVariables[id][pUsername]);
						mysql_tquery(handle, var100, "","");
						
						SetTimerEx("KickPublic", 1000, 0, "d", id);
					}
				}
		    	else return S(playerid, COLOR_GREY, "Player not connected.");
		    }
		    else
			{
				format(szMessage, 256, "[System] Poti folosi aceasta comanda in %d secunde.", DeelaySystem);
				S(playerid, COLOR_DEELAY, szMessage);
			}
		}
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:kick(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pHelperLevel] >= 2)
	{
	    new id, reason[60], string[126];

    	if(sscanf(params, "us[60]", id, reason))
		return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/kick [playerid] [reason]");

		if(id == INVALID_PLAYER_ID)
		return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");

		if(playerVariables[playerid][pAdminLevel] < playerVariables[id][pAdminLevel])
		return S(playerid, COLOR_GREY, "You can't kick an administrator witch have an admin level higher than you.");
		
		if(FindIP(reason) || GasesteReclama(reason))
		{
		    if(playerVariables[playerid][pMuted] == 0)
		    {
				format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising in /kick: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], reason);
				submitToStaff(szMessage, COLOR_RED);
			}
			SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
			playerVariables[playerid][pMuted] += 20;
			return 1;
		}
		
		if(DeelaySystem == 0)
  		{
		  	if(strfind(reason, "| silent", true) != -1)
			{
				format(string, sizeof(string), "Silent:");
				submitToStaff(string, COLOR_LIGHTRED);
				format(string, sizeof(string), "Kick: %s has been kicked by %s, reason: %s", GetName(id), GetName(playerid), reason);
				submitToStaff(string, COLOR_LIGHTRED);
			}
			else
			{
				format(string, sizeof(string), "Kick: %s has been kicked by %s, reason: %s", GetName(id), GetName(playerid), reason);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
			}
			
	   		DeelaySystem = 10;

			new var100[256];
			mysql_format(handle, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','8','%s','%s','%s')", playerVariables[id][pID], playerVariables[playerid][pID], reason, playerVariables[id][pUsername], playerVariables[playerid][pUsername]);
			mysql_tquery(handle, var100, "","");

			SetTimerEx("KickPublic", 1500, 0, "d", id);
		}
		else
		{
			format(szMessage, 256, "[System] Poti folosi aceasta comanda in %d secunde.", DeelaySystem);
			S(playerid, COLOR_NOB, szMessage);
		}
	}
	else return S(playerid, COLOR_WHITE, StaffOnly);
	return 1;
}
//----------------------------------- Diferite chat-uri ----------------------------------------
CMD:a(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
  		new string[128];

		if(isnull(params))
		    return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/a [text]");

		format(string, sizeof(string), "(%d) Admin %s: %s", playerVariables[playerid][pAdminLevel], N(playerid), params);
		submitToAdmins(string, COLOR_ADMCHAT);
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:o(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		new string[128];

 		if(isnull(params))
   			return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/o [text]");

		format(string, sizeof(string), "{ACD3D6}[Owner Chat] %s: %s", GetName(playerid), params);
		submitToOwners(string, COLOR_WHITE);
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:e(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pHelperLevel] >= 1)
	{
		new string[128];

		if(isnull(params))
		    return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/e [text]");
		    

		if(playerVariables[playerid][pAdminLevel] >= 1)
	    {
			format(string, sizeof(string), "(%d) Admin %s: %s", playerVariables[playerid][pAdminLevel], GetName(playerid), params);
	   		submitToStaff(string, 0x975708FF);
	   	}
	   	if(playerVariables[playerid][pHelperLevel] >= 1)
	   	{
			format(string, sizeof(string), "(%d) Helper %s: %s", playerVariables[playerid][pHelperLevel], GetName(playerid), params);
	   		submitToStaff(string, 0x975708FF);
	   	}
	}
	else return S(playerid, COLOR_WHITE,StaffOnly);
	return 1;
}
CMD:cw(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid))
    {
		new message[128], string[250];

		if(sscanf(params, "s[128]", message)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/cw [message]");
		
		if(FindIP(message) || GasesteReclama(message))
		{
		    if(playerVariables[playerid][pMuted] == 0)
		    {
				format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], message);
				submitToStaff(szMessage, COLOR_RED);
			}
			SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
			playerVariables[playerid][pMuted] += 20;
			return 1;
		}


	    format(string, sizeof(string), "(Car Whisper) %s: %s", GetName(playerid), message);
        foreach(Player,i)
        {
            if(IsPlayerConnected(i))
            {
                if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
                {
                    S(i, COLOR_YELLOW, string);
                }
            }
        }

		new var100[300], resulttt[300], strr[300];
		format(strr, sizeof(strr),"(Car Whisper) %s: %s", GetName(playerid), message);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(handle, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`, `type`) VALUES ('%d','%s', 'cw')", playerVariables[playerid][pID], resulttt);
		mysql_tquery(handle, var100, "","");
        return 1;
    }
    return 1;
}
CMD:shout(playerid, params[])
{
    return cmd_s(playerid, params);
}
CMD:s(playerid, params[])
{
	new string[250];

	if(sscanf(params, "s[250]", result)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/s(hout) [message]");
	

	format(string, sizeof(string), "%s shouts: %s!", N(playerid), result);
	ProxDetector(30.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);

	format(string, sizeof(string), "(shouts) \"%s!\"", params);
	SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 30.0, 10000);
	return 1;
}
CMD:whisper(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
		new string[128], id, mess[250];

		if(sscanf(params, "us[250]", id, mess)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/whisper [playerid] [message]");
		
		if(FindIP(mess) || GasesteReclama(mess))
		{
		    if(playerVariables[playerid][pMuted] == 0)
		    {
				format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], mess);
				submitToStaff(szMessage, COLOR_RED);
			}
			SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
			playerVariables[playerid][pMuted] += 20;
			return 1;
		}

		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				if(GetDistanceBetweenPlayers(playerid, id) > 5) return S(playerid, COLOR_GREY,"This player is not near you.");
			    if(HidePM[id] > 0) return S(playerid, COLOR_GREY,"This player doesn't allow whispers.");
				if(id == playerid) return S(playerid, COLOR_WHITE,"You can not send a message to yourself.");

				format(string, sizeof(string), "%s whispers: %s", GetName(playerid), mess);
				S(id, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You whisper to %s: %s", GetName(id), mess);
				S(playerid, COLOR_LIGHTBLUE, string);

				new var100[300], resulttt[300], strr[300];
				format(strr, sizeof(strr),"%s whispers to %s: %s", GetName(playerid), GetName(id), mess);
				mysql_real_escape_string(strr, resulttt);
				mysql_format(handle,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`, `type`) VALUES ('%d','%s', 'w')", playerVariables[playerid][pID], resulttt);
				mysql_tquery(handle,var100,"","");

				return 1;
			}
		}
		else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	return 1;
}
CMD:w(playerid, params[])
{
	return cmd_whisper(playerid, params);
}
CMD:togwhisper(playerid,params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(playerVariables[playerid][pDonate] == 1 || playerVariables[playerid][pAdminLevel] >= 1)
        {
			if(!HidePM[playerid])
			{
				HidePM[playerid] = 1;
				S(playerid, COLOR_IN2, "Whisper chat channel Disabled.");
			}
			else if (HidePM[playerid])
			{
				HidePM[playerid] = 0;
				S(playerid, COLOR_IN2, "Whisper chat channel Enabled.");
			}
		}
		else return S(playerid, COLOR_WHITE, "{FFFFCC}Error: Your are not admin or you don't have premium account.");
	}
	return 1;
}
CMD:togw(playerid, params[])
{
    return cmd_togwhisper(playerid, params);
}

CMD:tognews(playerid,params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(tognews[playerid] == 0)
		{
		    tognews[playerid] = 1;
		    S(playerid, COLOR_IN2,"You disable news chat.");
		}
		else if(tognews[playerid] == 1)
		{
		    tognews[playerid] = 0;
		    S(playerid ,COLOR_IN2, "You enable news chat.");
		}
	}
	return 1;
}



CMD:r(playerid, params[])
{
	return cmd_radio(playerid, params);
}

CMD:radio(playerid, params[])
{
	if(playerVariables[playerid][pGroup] < 1)
		return S(playerid, COLOR_GREY, "Your group data is invalid.");

	if(groupVariables[playerVariables[playerid][pGroup]][gGroupType] != 1)
	{
    	return S(playerid, COLOR_GREY, "This group does not have an official radio frequency.");
	}

	if(isnull(params))
		return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/r(adio) [message]");
		
		
		
 	if(FindIP(params) || GasesteReclama(params))
	{
	    if(playerVariables[playerid][pMuted] == 0)
	    {
			format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], params);
			submitToStaff(szMessage, COLOR_RED);
		}
		SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
		playerVariables[playerid][pMuted] += 20;
		return 1;
	}

	new string[128];

	switch(playerVariables[playerid][pGroupRank])
	{
		case 1:	format(string, sizeof(string), "*  %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName1], GetName(playerid), params);
		case 2:	format(string, sizeof(string), "* %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName2], GetName(playerid), params);
		case 3:	format(string, sizeof(string), "* %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName3], GetName(playerid), params);
		case 4:	format(string, sizeof(string), "* %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName4], GetName(playerid), params);
		case 5:	format(string, sizeof(string), "* %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName5], GetName(playerid), params);
		case 6:	format(string, sizeof(string), "** %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName6], GetName(playerid), params);
		case 7:	format(string, sizeof(string), "*** %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName7], GetName(playerid), params);
	}
 	SendToGroup(playerVariables[playerid][pGroup], COLOR_RADIOCHAT, string);
	return 1;
}
CMD:d(playerid, params[])
{
	return cmd_department(playerid, params);
}
CMD:department(playerid, params[])
{
	if(playerVariables[playerid][pGroup] < 1)
		return S(playerid, COLOR_GREY, "Your group data is invalid.");

	if(groupVariables[playerVariables[playerid][pGroup]][gGroupType] != 1 && groupVariables[playerVariables[playerid][pGroup]][gGroupType] != 3)
	{
	    return S(playerid, COLOR_GREY, "This group does not have an official radio frequency.");
	}

	if(isnull(params))
		return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/d(epartment) [message]");
		
 	if(FindIP(params) || GasesteReclama(params))
	{
	    if(playerVariables[playerid][pMuted] == 0)
	    {
			format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], params);
			submitToStaff(szMessage, COLOR_RED);
		}
		SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
		playerVariables[playerid][pMuted] += 20;
		return 1;
	}
		
	new string[256];

	switch(playerVariables[playerid][pGroupRank])
	{
		case 1:	format(string, sizeof(string), "* %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName1], GetName(playerid), params);
		case 2:	format(string, sizeof(string), "* %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName2], GetName(playerid), params);
		case 3:	format(string, sizeof(string), "* %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName3], GetName(playerid), params);
		case 4:	format(string, sizeof(string), "* %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName4], GetName(playerid), params);
		case 5:	format(string, sizeof(string), "* %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName5], GetName(playerid), params);
		case 6:	format(string, sizeof(string), "** %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName6], GetName(playerid), params);
		case 7:	format(string, sizeof(string), "*** %s %s: %s, over.", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName7], GetName(playerid), params);
	}
    sendDepartmentMessage(COLOR_ALLDEPT, string);
    format(string, sizeof(string), "(radio) ''%s''",params);
    SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
	return 1;
}
CMD:l(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pGroupRank] == 7)
	{
		new string[128];

		if(isnull(params))
	 		return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/l [text]");
	 		
	 	if(FindIP(params) || GasesteReclama(params))
		{
		    if(playerVariables[playerid][pMuted] == 0)
		    {
				format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], params);
				submitToStaff(szMessage, COLOR_RED);
			}
			SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
			playerVariables[playerid][pMuted] += 20;
			return 1;
		}

		if(playerVariables[playerid][pAdminLevel] >= 1)
		{
			format(string, sizeof(string), "(/l) Admin %s: %s", GetName(playerid), params);
		}
		if(playerVariables[playerid][pGroupRank] == 7)
		{
		    format(string, sizeof(string), "(/l) Leader %s %s: %s", groupVariables[playerVariables[playerid][pGroup]][gGroupName], GetName(playerid), params);
		}
		SendLeaderMessage(string, COLOR_TEAL);
	}
	return 1;
}

CMD:toglc(playerid, params[])
{
	if(playerVariables[playerid][pGroupRank] >= 7 || playerVariables[playerid][pAdminLevel] >= 1)
	{
		if(toglc[playerid] == 0)
		{
		    toglc[playerid] = 1;
		    S(playerid,COLOR_IN2,"You disable leader chat.");
		}
		else if(toglc[playerid] == 1)
		{
		    toglc[playerid] = 0;
		    S(playerid,COLOR_IN2,"You enable leader chat.");
		}
	}
	return 1;
}
CMD:f(playerid, params[])
{
	if(playerVariables[playerid][pGroup] < 1)
		return S(playerid, COLOR_GREY, "Your group data is invalid.");

	if(playerVariables[playerid][pGroup] == 1 || playerVariables[playerid][pGroup] == 2 || playerVariables[playerid][pGroup] == 3)
	    return S(playerid, COLOR_GREY, "This group does not have an OOC chat.");

	if(isnull(params))
		return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/f [message]");
		
	if(FindIP(params) || GasesteReclama(params))
	{
	    if(playerVariables[playerid][pMuted] == 0)
	    {
			format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], params);
			submitToStaff(szMessage, COLOR_RED);
		}
		SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
		playerVariables[playerid][pMuted] += 20;
		return 1;
	}


	switch(playerVariables[playerid][pGroupRank])
	{
		case 1:	format(szMessage, sizeof(szMessage), "%s %s: %s", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName1], GetName(playerid), params);
		case 2:	format(szMessage, sizeof(szMessage), "%s %s: %s", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName2], GetName(playerid), params);
		case 3:	format(szMessage, sizeof(szMessage), "%s %s: %s", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName3], GetName(playerid), params);
		case 4:	format(szMessage, sizeof(szMessage), "%s %s: %s", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName4], GetName(playerid), params);
		case 5:	format(szMessage, sizeof(szMessage), "%s %s: %s", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName5], GetName(playerid), params);
		case 6:	format(szMessage, sizeof(szMessage), "{3869A5}%s %s: %s", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName6], GetName(playerid), params);
		case 7:	format(szMessage, sizeof(szMessage), "{3869A5}%s %s: %s", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName7], GetName(playerid), params);
		default: format(szMessage, sizeof(szMessage),"%s %s: %s", groupVariables[playerVariables[playerid][pGroup]][gGroupRankName1], GetName(playerid), params);
	}
    foreach(Player, x)
	{
	    if(Specf[x] == playerVariables[playerid][pGroup])
	    {
			S(x, COLOR_RADIOCHAT, szMessage);
		}
	}
	SendToGroup(playerVariables[playerid][pGroup], COLOR_RADIOCHAT, szMessage);
	return 1;
}

//-----------------------------------------------------------------------------------------------
CMD:lc(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id, query[500], test[300], test2[300], string[1800];

		if(isnull(params))
		{
		    if(playerVariables[playerid][pAdminLevel] >= 5)
		    {
				format(query, sizeof(query), "SELECT * FROM `chat_logs` ORDER BY `ID` DESC LIMIT 30");
				new Cache: resultt = mysql_query(handle, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
				    cache_get_field_content(i, "time", result); format(test, 300, result);
				    cache_get_field_content(i, "text", result); format(test2, 300, result);
				    format(string,sizeof(string),"%s[%s] %s\n", string, test, test2);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"chat",string,"Close","");
			}
			else return S(playerid, -1, "Only admins 5+ can use /lc.");
		}
		else
		{
			if(sscanf(params, "u", id)) return S(playerid, COLOR_WHITE, "Usage: /lc [playerid]");

			if(IsPlayerConnected(id))
		   	{
		   	    if(playerVariables[playerid][pAdminLevel] >= 5)
		   	    {
		   	    	format(query, sizeof(query), "SELECT * FROM `chat_logs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT 10", playerVariables[id][pID]);
					new Cache: resultt = mysql_query(handle, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
					    cache_get_field_content(i, "time", result); format(test, 300, result);
					    cache_get_field_content(i, "text", result); format(test2, 300, result);
					    format(string,sizeof(string),"%s[%s] %s\n", string, test, test2);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"chat for player",string,"Close","");
				}
				else if(playerVariables[id][pLevel] < 6)
				{
				    format(query, sizeof(query), "SELECT * FROM `chat_logs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT 10", playerVariables[id][pID]);
					new Cache: resultt = mysql_query(handle, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
					    cache_get_field_content(i, "time", result); format(test, 300, result);
					    cache_get_field_content(i, "text", result); format(test2, 300, result);
					    format(string,sizeof(string),"%s[%s] %s\n", string, test, test2);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"chat for player",string,"Close","");
				}
				else return S(playerid, COLOR_WHITE, "Nu poti vedea chat log pentru playerii de level 5+.");
			}
			else return S(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}
CMD:lp(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id, query[500], test[300], string[1800], name[30], name2[30], reason[300], actionid, actiontime;
		
		if(sscanf(params, "i", id)) return S(playerid, COLOR_WHITE, "Usage: /lp [playerid]");
	        
  		format(query, sizeof(query), "SELECT * FROM `punishlogs` WHERE `playerid`= '%d' ORDER BY `ID` DESC LIMIT 20", playerVariables[id][pID]);
		new Cache: resultt = mysql_query(handle, query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
		    cache_get_field_content(i, "time", result); format(test, 300, result);
		    cache_get_field_content(i, "reason", result); format(reason, 300, result);
		    actionid                    = cache_get_field_content_int(i, "actionid");
		    actiontime                  = cache_get_field_content_int(i, "actiontime");
			cache_get_field_content(i, "playername", result); format(name, 30, result);
			cache_get_field_content(i, "givername", result); format(name2, 30, result);

			if(actionid == 1)
			{
		    	format(string,sizeof(string),"%s[%s] Warn: %s received a warn from admin %s, reason: %s.\n", string, test, name, name2, reason);
			}
			else if(actionid == 2)
			{
		    	format(string,sizeof(string),"%s[%s] Ban: %s has been permanent banned by %s, reason: %s.\n", string, test, name, name2, reason);
			}
			else if(actionid == 3)
			{
		    	format(string,sizeof(string),"%s[%s] Ban: %s has been banned by %s for %d days, reason: %s.\n", string, test, name, name2, actiontime, reason);
			}
   			else if(actionid == 4)
			{
		    	format(string,sizeof(string),"%s[%s] Jail: %s was jailed by %s for %d minutes, reason: %s.\n", string, test, name, name2, actiontime, reason);
			}
			else if(actionid == 5)
			{
		    	format(string,sizeof(string),"%s[%s] Jail: %s was jailed by %s for 30 minutes, reason: %s.\n", string, test, name, name2, reason);
			}
			else if(actionid == 6)
			{
		    	format(string,sizeof(string),"%s[%s] Unjail: %s has been unjailed by %s, reason: %s.\n", string, test, name, name2, reason);
   			}
			else if(actionid == 7)
			{
			    format(string,sizeof(string),"%s[%s] Mute: %s has been muted by %s for %d minutes, reason: %s.\n", string, test, name, name2, actiontime, reason);
			}
			else if(actionid == 8)
			{
			    format(string,sizeof(string),"%s[%s] Kick: %s has been kicked by %s, reason: %s.\n", string, test, name, name2, reason);
			}
		}
		cache_delete(resultt);
		ShowPlayerDialog(playerid, DIALOG_LASTPUNISH, DIALOG_STYLE_MSGBOX,"punish for player",string,"Close","");
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}





CMD:la(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id, query[500], test[300], test2[200], string[1800];
		
		if(isnull(params)) return S(playerid,-1,"{BFFF8B}Nu poti folosi /la fara id.");

		if(sscanf(params, "d", id)) return S(playerid, COLOR_WHITE, "Usage: /la [playerid]");

		if(IsPlayerConnected(id))
	   	{
		    format(query, sizeof(query), "SELECT * FROM `playerlogs` WHERE `ID`='%d' ORDER BY `logID` DESC LIMIT 10", playerVariables[id][pID]);
			new Cache: resultt = mysql_query(handle, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
			    cache_get_field_content(i, "time", result); format(test, 300, result);
			    cache_get_field_content(i, "text", result); format(test2, 300, result);
			    format(string,sizeof(string),"%s[%s] %s\n", string, test, test2);
			}
			cache_delete(resultt);
			ShowPlayerDialog(playerid, DIALOG_LASTACTIONS, DIALOG_STYLE_MSGBOX,"actions for player",string,"Close","");
		}
		else return S(playerid, COLOR_GREY, "Player not connected.");
	}
	else return S(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}




CMD:last(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 1)
	{
		new id, action[10], query[500], test[300], test2[300], string[2500], list[64], name[30], name2[30], reasonn,gunname[50];


		if(sscanf(params, "s[10]d", action, id))
		{
			S(playerid, COLOR_WHITE, "Usage: /last [action] [playerid]");
			S(playerid, COLOR_WHITE, "Actions: chat, kills, actions");
			return 1;
		}
		if(IsPlayerConnected(id))
	   	{
   			if(strcmp(list,"chat",true) == 0)
			{
			    format(query, sizeof(query), "SELECT * FROM `chat_logs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT 10", playerVariables[id][pID]);
				new Cache: resultt = mysql_query(handle, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
				    cache_get_field_content(i, "time", result); format(test, 300, result);
				    cache_get_field_content(i, "text", result); format(test2, 300, result);
				    format(string,sizeof(string),"%s[%s] %s\n", string, test, test2);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"chat for player",string,"Close","");
			}
			if(strcmp(list,"actions",true) == 0)
			{
			    format(query, sizeof(query), "SELECT * FROM `playerlogs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT 10", playerVariables[id][pID]);
				new Cache: resultt = mysql_query(handle, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
				    cache_get_field_content(i, "action", result); format(test, 300, result);
				    format(string,sizeof(string),"%s%s\n",string,test);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTACTIONS,DIALOG_STYLE_MSGBOX,"actions",string,"Close","");
			}
			if(strcmp(list,"kills",true) == 0)
			{
			    format(query, sizeof(query), "SELECT * FROM `kill_logs` WHERE `playerid`='%d' OR `killerid`='%d' ORDER BY `ID` DESC LIMIT 10", playerVariables[id][pID], playerVariables[id][pID]);
				new Cache: resultt = mysql_query(handle, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
				    cache_get_field_content(i, "time", result); format(test, 300, result);
				    reasonn						= cache_get_field_content_int(i, "reason");
				    cache_get_field_content(i, "playername", result); format(name2, 30, result);
				    cache_get_field_content(i, "killername", result); format(name, 30, result);
				 	GetWeaponNameEx(reasonn,gunname,sizeof(gunname));
				    format(string,sizeof(string),"%s[%s] %s was killed by %s, reason: %s.\n",string,test,name2,name,gunname);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"kills",string,"Close","");
			}
		}
  		else
		{
			if(playerVariables[playerid][pLimba] == 1)
		    {
				S(playerid, COLOR_GREY, "Acel player nu este conectat.");
			}
			if(playerVariables[playerid][pLimba] == 2)
		    {
				S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			}
		}
	}
	else return S(playerid, COLOR_WHITE,AdminOnly);
	return 1;
}









//================================ PREMIUM COMMANDS ============================
CMD:pcolor(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
		if(playerVariables[playerid][pDonate] == 1)
		{
			if(playerVariables[playerid][pLimba] == 1)
			{
				ShowPlayerDialog(playerid, DIALOG_PCOLOR, DIALOG_STYLE_LIST, "Culori premium:" , "Alb\n{4890E7}Albastru\n{FFFF00}Galben\n{17E81E}Verde\n{EA2685}Roz\n{777274}Negru\n{FF9E00}Portocaliu\n{EE5DDB}Mov\n{6F00AB}Mov inchis\n{4D8E14}Verde inchis","Alege","Inchide");
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				ShowPlayerDialog(playerid, DIALOG_PCOLOR, DIALOG_STYLE_LIST, "Premium colors:" , "White\n{4890E7}Blue\n{FFFF00}Yellow\n{17E81E}Green\n{EA2685}Pink\n{777274}Black\n{FF9E00}Orange\n{EE5DDB}Purple\n{6F00AB}Dark purple\n{4D8E14}Dark green","Choose","Cancel");
			}
		}
		else return S(playerid,COLOR_WHITE,"{C6FEAE}Aceasta comanda poate fi folosita doar de playerii care detin cont premium.");
	}
 	return 1;
}






CMD:pay(playerid, params[])
{
	new id,cash,string[128];

	if(sscanf(params, "ud", id, cash))
	return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/pay [playerid] [amount]");

	if(playerVariables[playerid][pLevel] >= 2)
	{
		if(playerVariables[playerid][pCash] >= cash)
		{
			if(IsPlayerConnected(id))
			{
				if(playerVariables[playerid][pDonate] == 1)
				{
					if(id == playerid) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/pay [playerid] [amount]");
					if((cash) > 0 && (cash < 1000001))
					{
						if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
						{
							if(playerVariables[playerid][pDeelayPay] < 1)
 							{
								playerVariables[playerid][pCash] -= cash;
								GivePlayerCash(playerid, -cash);
								Update(playerid, pCashx);

								playerVariables[id][pCash] += cash;
								GivePlayerCash(id, cash);
								Update(id, pCashx);

								playerVariables[playerid][pDeelayPay] = 30;


								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);

								format(string, sizeof(string), "You have paid $%s to %s.", NumberFormat(cash), GetName(id));
								S(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "%s has paid you $%s.", GetName(playerid), NumberFormat(cash));
								S(id, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s takes out $%s in cash, and hands it to %s.", GetName(playerid), NumberFormat(cash), GetName(id));
								nearByMessage(playerid, COLOR_PURPLE, string);
							}
       						else
							{
							    if(playerVariables[playerid][pLimba] == 1)
							    {
									format(szMessage, 256, "Nu poti folosi aceasta comanda acum. Poti folosi din nou comanda in %d secunde.", playerVariables[playerid][pDeelayPay]);
		   						 	S(playerid,COLOR_WHITE,szMessage);
							    }
							    if(playerVariables[playerid][pLimba] == 2)
							    {
									format(szMessage, 256, "You can't use this command now. You will be able to use the command in %d seconds. ", playerVariables[playerid][pDeelayPay]);
		   						 	S(playerid,COLOR_WHITE,szMessage);
								}
							}
						}
						else
						{
							if(playerVariables[playerid][pLimba] == 1)
						    {
								S(playerid, -1, "Esti prea departe de acest jucator.");
							}
							if(playerVariables[playerid][pLimba] == 2)
						    {
								S(playerid, -1, "You're too far away from this player.");
							}
						}
					}
     				else
					{
						if(playerVariables[playerid][pLimba] == 1)
					    {
							S(playerid, -1, "Poti oferi maxim $1.00.000.");
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
							S(playerid, -1, "You can provide maximum $1.00.000.");
						}
					}
				}
				else
				{
				    if(id == playerid) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/pay [playerid] [amount]");
					if((cash) > 0 && (cash < 100001))
					{
						if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
						{
							if(playerVariables[playerid][pDeelayPay] < 1)
 							{
								playerVariables[playerid][pCash] -= cash;
								GivePlayerCash(playerid, -cash);
								Update(playerid, pCashx);

								playerVariables[id][pCash] += cash;
								GivePlayerCash(id, cash);
								Update(id, pCashx);

								playerVariables[playerid][pDeelayPay] = 30;


								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);

								format(string, sizeof(string), "You have paid $%s to %s.", NumberFormat(cash), GetName(id));
								S(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "%s has paid you $%s.", GetName(playerid), NumberFormat(cash));
								S(id, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s takes out $%s in cash, and hands it to %s.", GetName(playerid), NumberFormat(cash), GetName(id));
								nearByMessage(playerid, COLOR_PURPLE, string);
							}
						 	else
							{
							    if(playerVariables[playerid][pLimba] == 1)
							    {
									format(szMessage, 256, "Nu poti folosi aceasta comanda acum. Poti folosi din nou comanda in %d secunde.", playerVariables[playerid][pDeelayPay]);
		   						 	S(playerid,COLOR_WHITE,szMessage);
							    }
							    if(playerVariables[playerid][pLimba] == 2)
							    {
									format(szMessage, 256, "You can't use this command now. You will be able to use the command in %d seconds. ", playerVariables[playerid][pDeelayPay]);
		   						 	S(playerid,COLOR_WHITE,szMessage);
								}
							}
						}
						else
						{
							if(playerVariables[playerid][pLimba] == 1)
						    {
								S(playerid, -1, "Esti prea departe de acest jucator.");
							}
							if(playerVariables[playerid][pLimba] == 2)
						    {
								S(playerid, -1, "You're too far away from this player.");
							}
						}
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
					    {
							S(playerid, COLOR_GREY, "{C4F293}Nu poti transfera mai mult de $100.000 folosind /pay. Userii ce au cont premium pot trimite pana la $1.000.000 prin /pay.");
						}
						if(playerVariables[playerid][pLimba] == 2)
					    {
							S(playerid, COLOR_GREY, "{C4F293}You can not transfer more than $100.000 using /pay. Users who have premium account can send up to $1.000.000 by /pay.");
						}
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid, COLOR_GREY, "Acel player nu este conectat.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
				}
			}
		}
		else
		{
		    if(playerVariables[playerid][pLimba] == 1)
			{
			    S(playerid,COLOR_WHITE,"{BDFD79}Nu ai suficienti bani.");
	  		}
	  		if(playerVariables[playerid][pLimba] == 2)
			{
			    S(playerid,COLOR_WHITE,"{BDFD79}You do not have enough money.");
	  		}
		}
	}
	else
	{
	    if(playerVariables[playerid][pLimba] == 1)
		{
		    S(playerid,COLOR_WHITE,"Ai nevoie de minim level 2 pentru a putea folosi aceasta comanda.");
  		}
	}
	return 1;
}
//===================================== Animatii ================================
CMD:stopanim(playerid, params[])
{
	check_anim

	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	return 1;
}
CMD:pee(playerid, params[])
{
	check_anim

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}
CMD:wank(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "PAULNMAC", "wank_out", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:dance(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/dance [1-4]");
	switch(animid)
	{
  		case 1: SetPlayerSpecialAction(playerid, 5);
	    case 2: SetPlayerSpecialAction(playerid, 6);
        case 3: SetPlayerSpecialAction(playerid, 7);
	    case 4: SetPlayerSpecialAction(playerid, 8);
	}
 	return 1;
}
CMD:handsup(playerid, params[])
{
    check_anim

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}
CMD:bomb(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
CMD:drunk(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 0);
	return 1;
}
CMD:taichi(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
CMD:crack(playerid, params[])
{
    check_anim

	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
CMD:slapass(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
CMD:robman(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
CMD:cry(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
CMD:box(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
CMD:crabs(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "MISC", "Scratchballs_01", 4.0, 0, 0, 0, 0, 0);
   	return 1;
}
CMD:salute(playerid, params[])
{
	check_anim

	ApplyAnimation(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0);
   	return 1;
}
CMD:rap(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/rap [1-3]");
	switch(animid)
	{
  		case 1: ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
   	}
   	return 1;
}
CMD:gesture(playerid, params[])
{
	check_anim

	new animid;
 	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/gesture [1-15]");
	switch(animid)
	{
  		case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0);
        case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0);
        case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0);
        case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0);
        case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0);
        case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0);
        case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0);
        case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0);
        case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
        case 10: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
        case 11: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0);
        case 12: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0);
        case 13: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0);
        case 14: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0);
        case 15: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0);
   	}
   	return 1;
}
CMD:lay(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/lay [1-3]");
	switch(animid)
	{
  		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
 	}
 	return 1;
}
CMD:wave(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/wave [1-3]");
	switch(animid)
	{
 		case 1: ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
 		case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.0, 0, 0, 0, 0, 0);
 		case 3: ApplyAnimation(playerid, "PED", "endchat_03", 4.0, 0, 0, 0, 0, 0);
 	}
 	return 1;
}
CMD:fallover(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/fallover [1-3]");
	switch(animid)
	{
  		case 1: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0);
    	case 2: ApplyAnimation(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0);
     	case 3: ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
 	}
 	return 1;
}
CMD:pedmove(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/pedmove [1-26]");
	switch(animid)
	{
  		case 1: ApplyAnimation(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1);
    	case 2: ApplyAnimation(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1);
	    case 3: ApplyAnimation(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 4: ApplyAnimation(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1);
	    case 5: ApplyAnimation(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1);
	    case 6: ApplyAnimation(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1);
	    case 7: ApplyAnimation(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1);
	    case 8: ApplyAnimation(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1);
     	case 9: ApplyAnimation(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1);
      	case 10: ApplyAnimation(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1);
       	case 11: ApplyAnimation(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1);
	    case 12: ApplyAnimation(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1);
	    case 13: ApplyAnimation(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1);
	    case 14: ApplyAnimation(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1);
	    case 15: ApplyAnimation(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1);
	    case 16: ApplyAnimation(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1);
	    case 17: ApplyAnimation(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1);
	    case 18: ApplyAnimation(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1);
	    case 19: ApplyAnimation(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1);
	    case 20: ApplyAnimation(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1);
	    case 21: ApplyAnimation(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 22: ApplyAnimation(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1);
	    case 23: ApplyAnimation(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1);
     	case 24: ApplyAnimation(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1);
  		case 25: ApplyAnimation(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1);
  		case 26: ApplyAnimation(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1);
  	}
	return 1;
}
CMD:getjiggy(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/getjiggy [1-9]");
	switch(animid)
	{
  		case 1: ApplyAnimation(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0);
      	case 4: ApplyAnimation(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0);
       	case 5: ApplyAnimation(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0);
        case 6: ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0);
       	case 7: ApplyAnimation(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0);
        case 8: ApplyAnimation(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0);
        case 9: ApplyAnimation(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0);
   	}
   	return 1;
}
CMD:smoke(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/smoke [1-3]");
	switch(animid)
	{
		case 1: ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
 	}
 	return 1;
}
CMD:dj(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/dj [1-4]");
	switch(animid)
	{
  		case 1: ApplyAnimation(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0);
     	case 4: ApplyAnimation(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0);
 	}
	return 1;
}
CMD:crossarms(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/crossarms [1-4]");
	switch(animid)
	{
  		case 1: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
  		case 2: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0);
 	}
 	return 1;
}
CMD:sit(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/sit [1-6]");
	switch(animid)
	{
  		case 1:
 		{
	  		ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	  		ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	  	}
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "PED", "SEAT_down", 4.0, 0, 1, 1, 1, 0);
 	}
 	return 1;
}
CMD:siteat(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/siteat [1-2]");
	switch(animid)
	{
		case 1: ApplyAnimation(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "FOOD", "FF_Sit_Eat2", 4.0, 1, 0, 0, 0, 0);
   	}
   	return 1;
}
CMD:bar(playerid, params[])
{
	check_anim

	new animid;
   	if(sscanf(params,"d",animid)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/bar [1-5]");
	switch(animid)
	{
  		case 1: ApplyAnimation(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0);
	    case 5: ApplyAnimation(playerid, "BAR", "BARman_idle", 4.0, 0, 0, 0, 0, 0);
 	}
   	return 1;
}


CMD:createbusiness(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		new size[32], string[128];
		if(sscanf(params, "s[32]", size)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/createbusiness [bank]");

  		if(strcmp(size, "bank", true) == 0)
		{
  			new i, query[256];
			
			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

  				businessVariables[i][bInteriorPos][0] = 2305.2527;
		    	businessVariables[i][bInteriorPos][1] = -16.0707;
		    	businessVariables[i][bInteriorPos][2] = 26.7422;

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bInterior] = 0;
				businessVariables[i][bType] = 1;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bPrice] = 10000000;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");
				
				saveBusiness(i);
				systemVariables[businessCount]++;
				

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);
			}
		}
  		if(strcmp(size, "24/7", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

			    businessVariables[i][bInteriorPos][0] = -30.9925;
		    	businessVariables[i][bInteriorPos][1] = -91.4320;
		    	businessVariables[i][bInteriorPos][2] = 1003.5469;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bInterior] = 18;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 2;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);
				
				saveBusiness(i);
			}
		}
  		if(strcmp(size, "gunshop", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

			    businessVariables[i][bInteriorPos][0] = 285.3711;
		    	businessVariables[i][bInteriorPos][1] = -41.4480;
		    	businessVariables[i][bInteriorPos][2] = 1001.5156;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bInterior] = 1;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 3;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
  		if(strcmp(size, "sexshop", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

			    businessVariables[i][bInteriorPos][0] = -100.4037;
		    	businessVariables[i][bInteriorPos][1] = -24.9191;
		    	businessVariables[i][bInteriorPos][2] = 1000.7188;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bInterior] = 3;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 4;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
  		if(strcmp(size, "burger", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

			    businessVariables[i][bInteriorPos][0] = 363.0108;
		    	businessVariables[i][bInteriorPos][1] = -75.0515;
		    	businessVariables[i][bInteriorPos][2] = 1001.5078;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bInterior] = 10;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 5;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
  		if(strcmp(size, "clothing", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

			    businessVariables[i][bInteriorPos][0] = 161.4024;
		    	businessVariables[i][bInteriorPos][1] = -96.9283;
		    	businessVariables[i][bInteriorPos][2] = 1001.8047;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bInterior] = 18;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 6;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
  		if(strcmp(size, "bar", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

			    businessVariables[i][bInteriorPos][0] = 493.3727;
		    	businessVariables[i][bInteriorPos][1] = -24.6141;
		    	businessVariables[i][bInteriorPos][2] = 1000.6797;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bInterior] = 17;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 7;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
  		if(strcmp(size, "pns", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

				businessVariables[i][bLocked] = 1;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bInterior] = 0;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 10;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
		if(strcmp(size, "cnn", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bFee] = 40;
				businessVariables[i][bInterior] = 0;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 12;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
  		
  		if(strcmp(size, "gas", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bInterior] = 0;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 11;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
  		if(strcmp(size, "casino", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

			    businessVariables[i][bInteriorPos][0] = 2019.0215;
		    	businessVariables[i][bInteriorPos][1] = 1017.9082;
		    	businessVariables[i][bInteriorPos][2] = 996.8750;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bInterior] = 10;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 8;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
  		if(strcmp(size, "gym", true) == 0)
		{
  			new i, query[256];

			format(query, sizeof(query), "INSERT INTO `businesses` (businessOwner, businessName) VALUES('AdmBot','Business de vanzare')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(businessVariables[i][bOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

			    businessVariables[i][bExteriorPos][0] = x;
			    businessVariables[i][bExteriorPos][1] = y;
			    businessVariables[i][bExteriorPos][2] = z;

			    businessVariables[i][bInteriorPos][0] = 772.2690;
		    	businessVariables[i][bInteriorPos][1] = -5.1211;
		    	businessVariables[i][bInteriorPos][2] = 1000.7286;

				businessVariables[i][bLocked] = 0;
				businessVariables[i][bVault] = 0;
				businessVariables[i][bFee] = 1;
				businessVariables[i][bInterior] = 5;
				businessVariables[i][bPrice] = 10000000;
				businessVariables[i][bType] = 9;

				format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "AdmBot");

				format(businessVariables[i][bName], 64, "Business de vanzare");

				systemVariables[businessCount]++;

				S(playerid, COLOR_WHITE, "Business created!");

				format(string, sizeof(string), "Admin %s create business %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);

				saveBusiness(i);
			}
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:buybusiness(playerid, params[])
{
    if(playerVariables[playerid][pStatus] >= 1)
	{
        for(new x = 0; x < MAX_BUSINESSES; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2]))
			{
				if(!strcmp(businessVariables[x][bOwner], "AdmBot", true))
				{
					if(getPlayerBusinessID(playerid) >= 1) return S(playerid, COLOR_GREY, "You already own a business.");
					if(businessVariables[x][bPrice] == 0) return SS(playerid, COLOR_WHITE, "Acest business nu este pus la vanzare!", "This business is not for sale.");
					if(playerVariables[playerid][pLevel] < 7) return SS(playerid, COLOR_GREY, "Ai nevoie de minim level 7 pentru a putea cumpara acest business!", "You need to have atleast level 7 to buy this business!");

					if(playerVariables[playerid][pCash] >= businessVariables[x][bPrice])
					{
						GivePlayerCash(playerid, -businessVariables[x][bPrice]);

						new labelString[500], query[256], string[256];
						
						
						format(string, sizeof(string), "%s bought [biz: %d] for $%s.", playerVariables[playerid][pUsername], x, NumberFormat(businessVariables[x][bPrice]));
						submitToAdmins(string, COLOR_YELLOW);

						mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'buybusiness', '%d')", string, playerVariables[playerid][pID]);
						mysql_query(handle, szLargeString);
						
						businessVariables[x][bLocked] = 0;
						businessVariables[x][bPrice] = 0;
      					strcpy(businessVariables[x][bOwner], playerVariables[playerid][pUsername], MAX_PLAYER_NAME);
                        mysql_format(handle, query, sizeof(query), "UPDATE `businesses` SET `businessOwner`= '%s' WHERE `businessID`= '%d'", businessVariables[x][bOwner], x);
						mysql_tquery(handle, query, "","");
						saveBusiness(x);

						if(!strcmp(businessVariables[x][bOwner], "AdmBot", true) && strlen(businessVariables[x][bOwner]) >= 1)
						{
							if(businessVariables[x][bLocked] == 1)
							{
							    if(businessVariables[x][bPrice] > 0)
							    {
									format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
								}
								else
								{
									format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee]);
								}
							}
							else
							{
								if(businessVariables[x][bPrice] > 0)
							    {
									format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
								}
								else
								{
									format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bFee]);
								}
							}
						}
						else
						{
				  			if(businessVariables[x][bLocked] == 1)
							{
							    if(businessVariables[x][bPrice] > 0)
							    {
									format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
								}
								else
								{
									format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
								}
							}
							else
							{
								if(businessVariables[x][bPrice] > 0)
							    {
									format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
								}
								else
								{
									format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
								}
							}
						}
						UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], COLOR_YELLOW, labelString);

						S(playerid, COLOR_WHITE, "Congratulations on your purchase!");
					}
					else return S(playerid, COLOR_GREY, "You don't have enough money to purchase this business.");
				}
				else
				{
					return S(playerid, COLOR_GREY, "You can't purchase an owned business.");
				}
			}
		}
    }
	return 1;
}
CMD:gname(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	   	new gname[32], groupid, string[256];
		if(sscanf(params, "is[32]", groupid, gname)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/gname [groupid] [group name]");
		{
			if(groupid < 1 || groupid > MAX_GROUPS) return S(playerid, COLOR_GREY, "Invalid group ID.");

			format(string, sizeof(string), "You have changed the group name to %s.", gname);
			S(playerid, COLOR_WHITE, string);

			mysql_real_escape_string(gname, string);

			strcpy(groupVariables[groupid][gGroupName], gname, 32);


   			switch(groupVariables[groupid][gGroupHQLockStatus])
			{
				case 0: format(string, sizeof(string), "%s's HQ", groupVariables[groupid][gGroupName]);
				case 1: format(string, sizeof(string), "%s's HQ\n\n(locked)", groupVariables[groupid][gGroupName]);
			}

			UpdateDynamic3DTextLabelText(groupVariables[groupid][gGroupLabelID], COLOR_Riffa, string);

		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:setgslots(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	   	new id, string[256], slot;
		if(sscanf(params, "ii", id, slot)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/setgslots [groupid] [slots]");
		{
			if(id < 1 || id > MAX_GROUPS) return S(playerid, COLOR_GREY, "Invalid group ID.");

			groupVariables[id][gSlots] = slot;

			format(string, 256, "%s has set %d slots to faction %s (%d).", GetName(playerid), slot, groupVariables[id][gGroupName], id);
			submitToAdmins(string, COLOR_LIGHTRED);
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:setgrouplevel(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	   	new id, level, string[256];
		if(sscanf(params, "ii", id, level)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/setgrouplevel [groupid] [level]");
		{
			if(id < 1 || id > MAX_GROUPS) return S(playerid, COLOR_GREY, "Invalid group ID.");

			groupVariables[id][gLevel] = level;

			format(string, 256, "%s a setat levelul minim de a aplica in factiunea %s la %d.", GetName(playerid), groupVariables[id][gGroupName], level);
			submitToAdmins(string, COLOR_LIGHTBLUE);

			mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'faction', '%d')", string, playerVariables[playerid][pID]);
			mysql_query(handle, szLargeString);
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}

CMD:gtype(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    new groupID, groupType;
		if(sscanf(params, "dd", groupID, groupType))
		{
			S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/gtype [groupid] [grouptypeid]");
			S(playerid, COLOR_WHITE,"Types: 1. Departamente 2. Paramedic 3. Taxi/News/Instructors/Hitman 4. Mafii");
		}

		if(groupID > 0 && groupID < MAX_GROUPS)
		{
            format(szMessage, sizeof(szMessage), "You have set group %s's group type to %d.", groupVariables[groupID][gGroupName], groupType);
            S(playerid, COLOR_WHITE, szMessage);
            groupVariables[groupID][gGroupType] = groupType;
  		}
  		else return S(playerid, COLOR_GREY, "Invalid Group ID.");
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:gsafepos(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		GetPlayerPos(playerid, groupVariables[playerVariables[playerid][pGroup]][gSafePos][0], groupVariables[playerVariables[playerid][pGroup]][gSafePos][1], groupVariables[playerVariables[playerid][pGroup]][gSafePos][2]);
		DestroyDynamicPickup(groupVariables[playerVariables[playerid][pGroup]][gSafePickupID]);
		DestroyDynamic3DTextLabel(groupVariables[playerVariables[playerid][pGroup]][gSafeLabelID]);
		
		format(szMessage, sizeof(szMessage), "%s\nGroup Safe", groupVariables[playerVariables[playerid][pGroup]][gGroupName]);
		groupVariables[playerVariables[playerid][pGroup]][gSafePickupID] = CreateDynamicPickup(1274, 23, groupVariables[playerVariables[playerid][pGroup]][gSafePos][0], groupVariables[playerVariables[playerid][pGroup]][gSafePos][1], groupVariables[playerVariables[playerid][pGroup]][gSafePos][2], GROUP_VIRTUAL_WORLD+playerVariables[playerid][pGroup], groupVariables[playerVariables[playerid][pGroup]][gGroupHQInteriorID], -1, 70);
		groupVariables[playerVariables[playerid][pGroup]][gSafeLabelID] = CreateDynamic3DTextLabel(szMessage, COLOR_DEPOSIT, groupVariables[playerVariables[playerid][pGroup]][gSafePos][0], groupVariables[playerVariables[playerid][pGroup]][gSafePos][1], groupVariables[playerVariables[playerid][pGroup]][gSafePos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GROUP_VIRTUAL_WORLD+playerVariables[playerid][pGroup], groupVariables[playerVariables[playerid][pGroup]][gGroupHQInteriorID], -1, 15.0);
		SendClientMessage(playerid, COLOR_WHITE, "You have adjusted the position of your group's safe.");
		saveGroup(playerVariables[playerid][pGroup]);
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:movehq(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    new ID, subject[32], string[128];

		if(sscanf(params, "ds[32]", ID, subject))
		{
		    S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/movehq [group ID] [exterior/interior]");
		}
		else
		{
		    if(ID < 1 || ID > MAX_GROUPS) return S(playerid, COLOR_GREY, "Invalid group ID.");

            if(strcmp(subject, "exterior", true) == 0)
			{
			    GetPlayerPos(playerid, groupVariables[ID][gGroupExteriorPos][0], groupVariables[ID][gGroupExteriorPos][1], groupVariables[ID][gGroupExteriorPos][2]);
			    DestroyDynamic3DTextLabel(groupVariables[ID][gGroupLabelID]);
			    DestroyDynamicPickup(groupVariables[ID][gGroupPickupID]);

				new labelString[96];

				switch(groupVariables[ID][gGroupHQLockStatus])
				{
			    	case 0: format(labelString, sizeof(labelString), "%s's HQ", groupVariables[ID][gGroupName]);
			    	case 1: format(labelString, sizeof(labelString), "%s's HQ\n\n(locked)", groupVariables[ID][gGroupName]);
			    }

				groupVariables[ID][gGroupLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_Riffa, groupVariables[ID][gGroupExteriorPos][0], groupVariables[ID][gGroupExteriorPos][1], groupVariables[ID][gGroupExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				groupVariables[ID][gGroupPickupID] = CreateDynamicPickup(1239, 23, groupVariables[ID][gGroupExteriorPos][0], groupVariables[ID][gGroupExteriorPos][1], groupVariables[ID][gGroupExteriorPos][2], 0, -1, -1, 50);
			}
			else if(strcmp(subject, "interior", true) == 0)
			{
			    GetPlayerPos(playerid, groupVariables[ID][gGroupInteriorPos][0], groupVariables[ID][gGroupInteriorPos][1], groupVariables[ID][gGroupInteriorPos][2]);
			    groupVariables[ID][gGroupHQInteriorID] = GetPlayerInterior(playerid);

			}
			format(string,sizeof(string),"You have successfully moved the %s of the %s group (ID %d).",subject,groupVariables[ID][gGroupName],ID);
			S(playerid, COLOR_WHITE, string);
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:movejob(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    new ID;

		if(sscanf(params, "d", ID))
		{
		    S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/movejob [job ID]");
		}
		else
		{
		    if(ID < 1 || ID > MAX_JOBS) return S(playerid, COLOR_GREY, "Invalid job ID.");

			GetPlayerPos(playerid, jobVariables[ID][jJobPosition][0], jobVariables[ID][jJobPosition][1], jobVariables[ID][jJobPosition][2]);
   			DestroyDynamic3DTextLabel(jobVariables[ID][jJobLabelID]);
   			DestroyDynamicPickup(jobVariables[ID][jJobPickupID]);


			new labelString[256];

			format(labelString, sizeof(labelString), "{FFFFFF}ID: {991932}%d\n{FFFFFF}Job: {991932}%s\n{FFFFFF}Use {991932}/getjob {FFFFFF}to get the job.", ID, jobVariables[ID][jJobName]);
			jobVariables[ID][jJobLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_Riffa, jobVariables[ID][jJobPosition][0], jobVariables[ID][jJobPosition][1], jobVariables[ID][jJobPosition][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			jobVariables[ID][jJobPickupID] = CreateDynamicPickup(1275, 23, jobVariables[ID][jJobPosition][0], jobVariables[ID][jJobPosition][1], jobVariables[ID][jJobPosition][2], 0, -1, -1, 50);

			saveJobs(ID);
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:btype(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
        new businessID, businessType;

		if(sscanf(params, "dd", businessID, businessType))
		{
		    S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/btype [businessid] [type]");
            S(playerid, COLOR_GREY, "Types: 1 - Bank, 2 - 24/7, 3 - | 2 - Clothing | 3 - Bar | 4 - Bank | 5 - Rentcar | 6 - Gym");
			return 1;
		}

		if(businessID > 0 && businessID < MAX_BUSINESSES)
		{
		    new string[128];

  			format(string, sizeof(string), "You have changed business ID %d to type %d.", businessID, businessType);
		    S(playerid, COLOR_WHITE, string);

			businessVariables[businessID][bType] = businessType;
			saveBusiness(businessID);
			
			foreach(Player, x)
			{
		        if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD == businessID)
					businessTypeMessages(businessID, x);
		    }
  		}
  		else return S(playerid, COLOR_GREY, "Invalid business ID.");
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:gotojob(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		if(isnull(params)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/gotojob [job id]");

		new jobID = strval(params);

		if(jobID < 1 || jobID > MAX_JOBS) return S(playerid, COLOR_GREY, "Invalid job ID.");
	
 		new Float:f[8];
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetPlayerPos(playerid, f[3], f[4], f[2]);
	    GetXYInFrontOfPlayer(playerid, f[0], f[1], 20);
	    InHQ[playerid] = -1;

	    if(!vehicleid)
		{
			SetPlayerPos(playerid, jobVariables[jobID][jJobPosition][0], jobVariables[jobID][jJobPosition][1], jobVariables[jobID][jJobPosition][2]);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		else
		{
			SetVehiclePos(vehicleid, jobVariables[jobID][jJobPosition][0], jobVariables[jobID][jJobPosition][1], jobVariables[jobID][jJobPosition][2]);

			foreach(Player, i)
			{
			    if(IsPlayerInVehicle(i, vehicleid) || GetPlayerSurfingVehicleID(i) == vehicleid)
			    {
				    SetPlayerVirtualWorld(i, 0);
				    LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetPlayerInterior(i, 0);
				}
			}
  		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:halloweenhat(playerid, params[])
{
	new Year, Month, Day;
	getdate(Year, Month, Day);
	
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		new id;
        if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/halloweenhat <0/1>");

	    if(id == 0)
		{
			RemovePlayerAttachedObject(playerid, 3);
		}
		else if(id == 1)
		{
			SetPlayerAttachedObject(playerid, 3, 19065, 2, 0.091, 0.025, 0.0, 0.0, 0.0, -26.1, 1.227, 1.395, 1.4);
		}
	}
	else if(Month == 10 && Day == 30 || Month == 10 && Day == 31 || Month == 11 && Day == 1)
	{
		new id;
        if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/halloweenhat <0/1>");

	    if(id == 0)
		{
			RemovePlayerAttachedObject(playerid, 3);
		}
		else if(id == 1)
		{
			SetPlayerAttachedObject(playerid, 3, 19065, 2, 0.091, 0.025, 0.0, 0.0, 0.0, -26.1, 1.227, 1.395, 1.4);
		}
	}
 	else return S(playerid, -1, "{BFFF8B}Aceasta comanda poate fi folosita doar pe data de 30.10, 31.10 si 01.11");
	return 1;
}
CMD:acover(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
        new name[60];
        if(sscanf(params, "s[60]", name)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/acover [name]");

        if(playerVariables[playerid][pAdminCover] == 0)
        {
       		S(playerid, COLOR_WHITE, "Admin cover enabled!");
 	        SetPlayerName(playerid, params);

 	        new skin = random(300);
       	 	SetPlayerSkin(playerid, skin);

            playerVariables[playerid][pAdminCover] = 1;
        }
        else if(playerVariables[playerid][pAdminCover] == 1)
        {
         	S(playerid, COLOR_WHITE, "Admin cover disabled!");

			SetPlayerName(playerid, playerVariables[playerid][pUsername]);

        	playerVariables[playerid][pAdminCover] = 0;

        	SetPlayerSkin(playerid, playerVariables[playerid][pSkin]);
        }
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:specme(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    if(playerVariables[playerid][pBusy] == 1)
	    {
	        playerVariables[playerid][pBusy] = 0;
	        Update(playerid, pBusyx);
	        S(playerid, COLOR_BLUE, "Adminii pot da acum spectate si /goto la tine.");
	    }
	    else if(playerVariables[playerid][pBusy] == 0)
	    {
	    	playerVariables[playerid][pBusy] = 1;
	        Update(playerid, pBusyx);
	        S(playerid, COLOR_BLUE, "Adminii nu mai pot da spectate si /goto la tine.");
	    }
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:setskill(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		new item[32], userID, amount;
        if(sscanf(params, "us[32]d", userID, item, amount))
		{
			S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/setskill [playerid] [job] [amount]");
		}
		else if(IsPlayerConnected(userID))
		{
		    new string[256];
			if(strcmp(item, "fish", true) == 0)
			{
				playerVariables[userID][pFishSkill] = amount;
				Update(userID, pFishSkillx);
				
				format(string, sizeof(string), "Ownerul %s a setat skill-ul la job-ul 'Fisher' playerului %s la level %d.", GetName(playerid), GetName(userID), amount);
				submitToAdmins(string, COLOR_RED);
			}
   			else if(strcmp(item, "pizza", true) == 0)
			{
				playerVariables[userID][pPizzaSkill] = amount;
				Update(userID, pPizzaSkillx);

				format(string, sizeof(string), "Ownerul %s a setat skill-ul la job-ul 'Pizza Boy' playerului %s la level %d.", GetName(playerid), GetName(userID), amount);
				submitToAdmins(string, COLOR_RED);
			}
			else if(strcmp(item, "trucker", true) == 0)
			{
				playerVariables[userID][pTruckSkill] = amount;
				Update(userID, pTruckSkillx);

				format(string, sizeof(string), "Ownerul %s a setat skill-ul la job-ul 'Trucker' playerului %s la level %d.", GetName(playerid), GetName(userID), amount);
				submitToAdmins(string, COLOR_RED);
			}
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:flip(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
 		if(IsPlayerInAnyVehicle(playerid))
  		{
  			new currentveh;
    		new Float:angle;
    		currentveh = GetPlayerVehicleID(playerid);
    		GetVehicleZAngle(currentveh, angle);
   			SetVehicleZAngle(currentveh, angle);
   			RepairVehicle(currentveh);
    		S(playerid, COLOR_GREY, "You're vehicle has ben successfully flipped.");
  		}
  		else return S(playerid, -1, "You are not in any vehicle!");
  	}
  	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:nos(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
 		if(IsPlayerInAnyVehicle(playerid))
  		{
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
			S(playerid, COLOR_BLUE, "Vehicle nos added!");
		}
		else return S(playerid, -1, "You are not in any vehicle!");
	}
  	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:explode(playerid, params[])
{
	new ID;

	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		if(sscanf(params, "u", ID))
		{
			return S(playerid, COLOR_GREY, SYNTAX_MESSAGE"/explode [playerid]");
		}
	    else if(IsPlayerConnectedEx(ID))
		{
			new Float:fNuke[3], string[45];

			GetPlayerName(ID, szPlayerName, MAX_PLAYER_NAME);
			GetPlayerPos(ID, fNuke[0], fNuke[1], fNuke[2]);

			CreateExplosion(fNuke[0], fNuke[1], fNuke[2], 9, 100.0);
			CreateExplosion(fNuke[0], fNuke[1], fNuke[2], 7, 100.0);
			CreateExplosion(fNuke[0], fNuke[1], fNuke[2]+10.0, 7, 100.0);
			CreateExplosion(fNuke[0]+random(10)-5, fNuke[1]+random(10)-5, fNuke[2]+random(10)-5, 6, 100.0);

			if(IsPlayerInAnyVehicle(ID))
			{
				GetVehicleVelocity(GetPlayerVehicleID(ID), fNuke[0], fNuke[1], fNuke[2]);
				SetVehicleVelocity(GetPlayerVehicleID(ID), fNuke[0]+random(10)-5, fNuke[1]+random(10)-5, fNuke[2]+random(10)-5);
			}
			else SetPlayerVelocity(ID, random(10)-5, random(10)-5, random(10)-5);

			format(string, sizeof(string), "You have exploded %s.", szPlayerName);
			S(playerid, COLOR_WHITE, string);

	    }
	    else S(playerid, COLOR_GREY, "The specified player is not connected, or has not authenticated.");
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:payday(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
 		new string[256];
 		
 		PayDay();
 		
 		format(string, sizeof(string), "Ownerul %s a acordat PAYDAY tuturor playerilor online!", GetName(playerid));
		SendClientMessageToAll(COLOR_RED, string);
	}
  	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:cs(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		clearScreen(playerid);
	}
  	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:movebusiness(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    new businessID, subject[32], labelString[500];
	        
		if(sscanf(params, "ds[32]", businessID, subject))
		{
		    S(playerid, COLOR_GREY, SYNTAX_MESSAGE"/movebusiness [businessid] [exterior/interior]");
		}
		else
		{
		    if(businessID < 1 || businessID > MAX_BUSINESSES) return S(playerid, COLOR_GREY, "Invalid business ID.");

            if(strcmp(subject, "exterior", true) == 0)
			{
			    GetPlayerPos(playerid, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2]);

			    DestroyDynamic3DTextLabel(businessVariables[businessID][bLabelID]);
			    DestroyDynamicPickup(businessVariables[businessID][bPickupID]);
			    
			    
	       		if(!strcmp(businessVariables[businessID][bOwner], "AdmBot", true) && strlen(businessVariables[businessID][bOwner]) >= 1)
				{
					if(businessVariables[businessID][bLocked] == 1)
					{
					    if(businessVariables[businessID][bPrice] > 0)
					    {
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[businessID][bName], businessID, businessVariables[businessID][bFee], NumberFormat(businessVariables[businessID][bPrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[businessID][bName], businessID, businessVariables[businessID][bFee]);
						}
					}
					else
					{
						if(businessVariables[businessID][bPrice] > 0)
					    {
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[businessID][bName], businessID, businessVariables[businessID][bFee], NumberFormat(businessVariables[businessID][bPrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d", businessVariables[businessID][bName], businessID, businessVariables[businessID][bFee]);
						}
					}
   				 	businessVariables[businessID][bLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_YELLOW, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
					businessVariables[businessID][bPickupID] = CreateDynamicPickup(1239, 23, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 0, 0, -1, 250);

				}
				else
				{
		  			if(businessVariables[businessID][bLocked] == 1)
					{
					    if(businessVariables[businessID][bPrice] > 0)
					    {
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[businessID][bName], businessID, businessVariables[businessID][bOwner], businessVariables[businessID][bFee], NumberFormat(businessVariables[businessID][bPrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[businessID][bName], businessID, businessVariables[businessID][bOwner], businessVariables[businessID][bFee]);
						}
					}
					else
					{
						if(businessVariables[businessID][bPrice] > 0)
					    {
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[businessID][bName], businessID, businessVariables[businessID][bOwner], businessVariables[businessID][bFee], NumberFormat(businessVariables[businessID][bPrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d", businessVariables[businessID][bName], businessID, businessVariables[businessID][bOwner], businessVariables[businessID][bFee]);
						}
					}
					businessVariables[businessID][bLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_YELLOW, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
					businessVariables[businessID][bPickupID] = CreateDynamicPickup(1239, 23, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 0, 0, -1, 250);
				}
				S(playerid, COLOR_WHITE, "The business exterior has successfully been changed.");
			}
			else if(strcmp(subject, "interior", true) == 0)
			{
			    GetPlayerPos(playerid, businessVariables[businessID][bInteriorPos][0], businessVariables[businessID][bInteriorPos][1], businessVariables[businessID][bInteriorPos][2]);
			    businessVariables[businessID][bInterior] = GetPlayerInterior(playerid);
			    S(playerid, COLOR_WHITE, "The business interior has successfully been changed.");
			}
			saveBusiness(businessID);
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:abusinessname(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    new x, text[32], labelString[500], string[256];

		if(sscanf(params, "ds[64]", x, text))
		{
		    S(playerid, COLOR_GREY, SYNTAX_MESSAGE"/abusinessname [businessid] [text]");
		}
		else
		{
		    if(x < 1 || x > MAX_BUSINESSES) return S(playerid, COLOR_GREY, "Invalid business ID.");
		    
		    new maxc = strlen(text);
			if(maxc > 64) return S(playerid, COLOR_GREY,"Maximum caracter is 64.");

			mysql_real_escape_string(text, szMessage);
			strcpy(businessVariables[x][bName], szMessage, 250);
			saveBusiness(x);
			
			format(string, sizeof(string), "Text modificat: %s", text);
			S(playerid, COLOR_WHITE, string);
			
   			if(!strcmp(businessVariables[x][bOwner], "AdmBot", true) && strlen(businessVariables[x][bOwner]) >= 1)
			{
				if(businessVariables[x][bLocked] == 1)
				{
				    if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee]);
					}
				}
				else
				{
					if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bFee]);
					}
				}
			}
			else
			{
	  			if(businessVariables[x][bLocked] == 1)
				{
				    if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
					}
				}
				else
				{
					if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
					}
				}
			}
			UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], COLOR_YELLOW, labelString);
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}

CMD:playeri(playerid, params[])
{
	if(playerVariables[playerid][pID] == 1)
	{
		new Cache:resultt = mysql_query(handle, "SELECT COUNT(*) FROM `players`");
		
		format(szMessage, sizeof(szMessage), "There are %d players in the database.", cache_get_row_int(0, 0));
		S(playerid, COLOR_GREY, szMessage);
		cache_delete(resultt);
	}
	else return S(playerid, -1, "SERVER: Unknown command.");
	return 1;
}
CMD:savedata(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		for(new xh = 0; xh < MAX_HOUSES; xh++)
		{
            saveHouse(xh);
		}
		S(playerid, COLOR_YELLOW, "House data saved.");

		for(new xf = 0; xf < MAX_GROUPS; xf++)
		{
            saveGroup(xf);
		}
		S(playerid, COLOR_YELLOW, "Group data saved.");

		for(new xf = 0; xf < MAX_BUSINESSES; xf++)
	 	{
            saveBusiness(xf);
		}
		S(playerid, COLOR_YELLOW, "Business data saved.");

		for(new xf = 0; xf < MAX_ASSETS; xf++)
		{
            saveAsset(xf);
		}
		S(playerid, COLOR_YELLOW, "Server asset data saved.");

    }
    else return S(playerid, -1, OwnerError);
    return 1;
}
CMD:apay(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		new cash, id;
		if(sscanf(params, "ui",id,cash)) return S(playerid,COLOR_WHITE, "Syntax: /apay <Name/Playerid> <Amount of Money>");
		if(IsPlayerConnected(id))
		{
			GivePlayerCash(id, cash);
  			Update(id, pCashx);
			playerVariables[id][pCash] += cash;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);


			format(szMessage, sizeof(szMessage), "** Admin %s has given you $%s. **", GetName(playerid),NumberFormat(cash));
			S(id, COLOR_YELLOW, szMessage);

			format(szMessage, sizeof(szMessage), "(/apay) Admin %s takes out $%s in cash, and hands it to %s.", GetName(playerid), NumberFormat(cash), GetName(id));
			submitToAdmins(szMessage, COLOR_WHITE);

		}
	    else return S(playerid, COLOR_WHITE, "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:vjob(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return S(playerid, COLOR_GREY, "You must be inside the vehicle that you wish to alter the job requirement of.");

		new string[96],groupParam = strval(params);

		if(groupParam < 0 || groupParam > MAX_JOBS) return S(playerid, COLOR_GREY, "Invalid job ID.");

        for(new x = 0; x < MAX_VEHICLES; x++)
		{
            if(vehicleVariables[x][vVehicleScriptID] == GetPlayerVehicleID(playerid))
			{
                vehicleVariables[x][vVehicleJob] = groupParam;
                saveVehicle(x);
                new queryString[255];
			    format(queryString, sizeof(queryString), "UPDATE vehicles SET vehicleJob = '%d' WHERE vehicleID = '%d'",groupParam, x);
				mysql_query(handle,queryString);
				switch(groupParam)
				{
					case 0: format(string, sizeof(string), "You have removed job restrictions from this vehicle (%d).", x);
					default: format(string, sizeof(string), "You have changed this vehicle's job to %s (vehicle %d).", jobVariables[groupParam][jJobName], x);
				}
				S(playerid, COLOR_WHITE, string);
				return 1;
			}
        }
	}
	else return S(playerid, -1, OwnerError);
 	return 1;
}
CMD:vmodel(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		if(isnull(params)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/vmodel [modelid]");
		else if(!IsPlayerInAnyVehicle(playerid)) return S(playerid, COLOR_GREY, "You must be inside the vehicle that you wish to change the model of.");
		else if(strval(params) < 400 || strval(params) > 611) return S(playerid, COLOR_WHITE, "Valid car IDs start at 400, and end at 611.");

        for(new x = 0; x < MAX_VEHICLES; x++)
		{
            if(vehicleVariables[x][vVehicleScriptID] == GetPlayerVehicleID(playerid))
			{
				vehicleVariables[x][vVehicleModelID] = strval(params);

				DestroyVehicle(vehicleVariables[x][vVehicleScriptID]);
				vehicleVariables[x][vVehicleScriptID] = CreateVehicle(vehicleVariables[x][vVehicleModelID], vehicleVariables[x][vVehiclePosition][0], vehicleVariables[x][vVehiclePosition][1], vehicleVariables[x][vVehiclePosition][2], vehicleVariables[x][vVehicleRotation], vehicleVariables[x][vVehicleColour][0], vehicleVariables[x][vVehicleColour][1], -1);
				PutPlayerInVehicleEx(playerid, vehicleVariables[x][vVehicleScriptID], 0);

                saveVehicle(x);

				return 1;
			}
        }
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}

CMD:vmove(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
			return S(playerid, COLOR_ERROR, "Error: You are not in a vehicle.");

		new string[128];

        for(new x = 0; x < MAX_VEHICLES; x++)
		{
            if(vehicleVariables[x][vVehicleScriptID] == GetPlayerVehicleID(playerid))
			{
                GetVehiclePos(x, vehicleVariables[x][vVehiclePosition][0], vehicleVariables[x][vVehiclePosition][1], vehicleVariables[x][vVehiclePosition][2]);
				GetVehicleZAngle(x, vehicleVariables[x][vVehicleRotation]);

				DestroyVehicle(vehicleVariables[x][vVehicleScriptID]);
				vehicleVariables[x][vVehicleScriptID] = CreateVehicle(vehicleVariables[x][vVehicleModelID], vehicleVariables[x][vVehiclePosition][0], vehicleVariables[x][vVehiclePosition][1], vehicleVariables[x][vVehiclePosition][2], vehicleVariables[x][vVehicleRotation], vehicleVariables[x][vVehicleColour][0], vehicleVariables[x][vVehicleColour][1], -1);
				PutPlayerInVehicleEx(playerid, vehicleVariables[x][vVehicleScriptID], 0);
				LinkVehicleToInterior(x, GetPlayerInterior(x));
				SetVehicleVirtualWorld(x, 0);

                saveVehicle(x);

				format(string, sizeof(string), "You have successfully moved vehicle %d.", x);
				S(playerid, -1, string);
				return 1;
			}
        }
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:saveveh(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		if(!IsPlayerInAnyVehicle(playerid))
			return S(playerid, COLOR_GREY, "You need to be in a vehicle to save it.");

		if(GetPVarInt(playerid, "sCc") == 1)
		{
		    new i,queryString[255],Float: vPos[4];

		    GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
		    GetVehicleZAngle(GetPlayerVehicleID(playerid), vPos[3]);

		    format(queryString, sizeof(queryString), "INSERT INTO vehicles (vehicleModelID, vehiclePosX, vehiclePosY, vehiclePosZ, vehiclePosRotation) VALUES('%d', '%f', '%f', '%f', '%f')", GetVehicleModel(GetPlayerVehicleID(playerid)), vPos[0], vPos[1], vPos[2], vPos[3]);
		    new Cache: resultxx = mysql_query(handle, queryString);

		    i = cache_insert_id();
		    cache_delete(resultxx);

		    S(playerid, COLOR_WHITE, "Vehicle saved!");

		    vehicleVariables[i][vVehicleModelID] = GetVehicleModel(GetPlayerVehicleID(playerid));
		    vehicleVariables[i][vVehiclePosition][0] = vPos[0];
		    vehicleVariables[i][vVehiclePosition][1] = vPos[1];
		    vehicleVariables[i][vVehiclePosition][2] = vPos[2];

		    vehicleVariables[i][vVehicleRotation] = vPos[3];
		    vehicleVariables[i][vVehicleGroup] = 0;

		    vehicleVariables[i][vVehicleScriptID] = GetPlayerVehicleID(playerid);

			DeletePVar(playerid, "sCc");
		}
		else
		{
		    SetPVarInt(playerid, "sCc", 1);
		    return S(playerid, COLOR_GREY, "Daca esti sigur ca vrei sa salvezi vehiculul, tasteaza din nou /saveveh.");
		}
	}
	return 1;
}
CMD:setsvar(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    new item[32], amount, string[256];

		if(sscanf(params, "s[32]d", item, amount))
		{
	 		S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/setsvar [item] [amount]");

	 		if(assetVariables[1][aAssetValue] == 0)
			{
		 		S(playerid, COLOR_WHITE, "giftbox = dezactivat");
		 	}
		 	if(assetVariables[1][aAssetValue] == 1)
			{
		 		S(playerid, COLOR_WHITE, "giftbox = activat");
		 	}
	 		format(szMessage, sizeof(szMessage), "giftbox_minmoney = %d", assetVariables[3][aAssetValue]);
			S(playerid, COLOR_WHITE, szMessage);
	 		format(szMessage, sizeof(szMessage), "giftbox_maxmoney = %d", assetVariables[4][aAssetValue]);
			S(playerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), "giftbox_minmats = %d", assetVariables[6][aAssetValue]);
			S(playerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), "giftbox_maxmats = %d", assetVariables[5][aAssetValue]);
			S(playerid, COLOR_WHITE, szMessage);
	 		format(szMessage, sizeof(szMessage), "giftbox_objectmodel = %d", assetVariables[2][aAssetValue]);
			S(playerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), "giftbox_premiumaccounts = %d", assetVariables[7][aAssetValue]);
			S(playerid, COLOR_WHITE, szMessage);
			if(assetVariables[9][aAssetValue] == 0)
			{
		 		S(playerid, COLOR_WHITE, "christmas = dezactivat");
		 	}
		 	if(assetVariables[9][aAssetValue] == 1)
			{
		 		S(playerid, COLOR_WHITE, "christmas = activat");
		 	}
		 	format(szMessage, sizeof(szMessage), "night_time = %d", assetVariables[10][aAssetValue]);
			S(playerid, COLOR_WHITE, szMessage);
			
			format(szMessage, sizeof(szMessage), "moneylms = %d", assetVariables[11][aAssetValue]);
			S(playerid, COLOR_WHITE, szMessage);
			
			format(szMessage, sizeof(szMessage), "block_lms = %d", assetVariables[12][aAssetValue]);
			S(playerid, COLOR_WHITE, szMessage);

	 	}
	 	else
	 	{
	   		if(strcmp(item, "giftbox", true) == 0)
			{
				if(amount == 0)
	  			{
	  				if(assetVariables[1][aAssetValue] == 1)
					{
						assetVariables[1][aAssetValue] = 0;
						saveAsset(1);

						format(string, sizeof(string), "{D2F49F}The giftbox has been disabled by admin %s", N(playerid));
						submitToAdmins(string, -1);

						DestroyDynamicObject(dynamicgift);
						DestroyDynamic3DTextLabel(Text3D: dynamicgift3DText);
					}
				}
	  			if(amount == 1)
	  			{
	  				if(assetVariables[1][aAssetValue] == 0)
					{
						assetVariables[1][aAssetValue] = 1;
						saveAsset(1);

						format(string, sizeof(string), "{D2F49F}Giftbox has been placed by admin %s.", GetName(playerid));
						submitToAdmins(string, -1);

						new objectid = assetVariables[2][aAssetValue];
						dynamicgift = CreateDynamicObject(objectid, 1128.9078,-1453.7595,15.4969,   179.8316, 179.8316, 179.8316);
						dynamicgift3DText = CreateDynamic3DTextLabel("Leet.Ro Giftbox\nUse /getgift to get a gift", COLOR_LIGHT, 1128.9078,-1453.7595,15.7969,20.0);
					}
				}
			}
  		 	else if(strcmp(item, "christmas", true) == 0)
			{
				if(amount == 0)
	  			{
	  				if(assetVariables[9][aAssetValue] == 1)
					{
						assetVariables[1][aAssetValue] = 0;
						format(string, sizeof(string), "SetSVar: Admin %s a dezactivat /santahat.", GetName(playerid));
						submitToAdmins(string, COLOR_YELLOW);
					}
				}
	  			if(amount == 1)
	  			{
	  				if(assetVariables[9][aAssetValue] == 0)
					{
						assetVariables[9][aAssetValue] = 1;
						format(string, sizeof(string), "SetSVar: Admin %s a activat /santahat.", GetName(playerid));
						submitToAdmins(string, COLOR_YELLOW);
					}
				}
			}
   			else if(strcmp(item, "block_lms", true) == 0)
			{
				if(amount == 0)
	  			{
	  				if(assetVariables[12][aAssetValue] == 1)
					{
						assetVariables[12][aAssetValue] = 0;
						format(string, sizeof(string), "SetSVar: Admin %s a blocat comanda /createlms.", GetName(playerid));
						submitToAdmins(string, COLOR_YELLOW);
					}
				}
	  			if(amount == 1)
	  			{
	  				if(assetVariables[12][aAssetValue] == 0)
					{
						assetVariables[12][aAssetValue] = 1;
						format(string, sizeof(string), "SetSVar: Admin %s a deblocat comanda /createlms.", GetName(playerid));
						submitToAdmins(string, COLOR_YELLOW);
					}
				}
			}
   			else if(strcmp(item, "giftbox_objectmodel", true) == 0)
			{
				assetVariables[2][aAssetValue] = amount;
				format(string, sizeof(string), "SetSVar: Admin %s changed giftbox_objectmodel [%d].", GetName(playerid), amount);
				submitToOwners(string, COLOR_YELLOW);

				if(assetVariables[1][aAssetValue] == 1)
				{
					DestroyDynamicObject(dynamicgift);
					DestroyDynamic3DTextLabel(Text3D:dynamicgift3DText);

					new objectid = assetVariables[2][aAssetValue];
					dynamicgift = CreateDynamicObject(objectid, 1128.9078,-1453.7595,15.4969,   179.8316, 179.8316, 179.8316);
					dynamicgift3DText = CreateDynamic3DTextLabel("Leet.Ro Giftbox\nUse /getgift to get a gift",COLOR_LIGHT,1128.9078,-1453.7595,15.7969,20.0);
				}
			}
   			else if(strcmp(item, "moneylms", true) == 0)
			{
				assetVariables[11][aAssetValue] = amount;
				format(string, sizeof(string), "SetSVar: Admin %s changed moneylms [%d].", GetName(playerid), amount);
				submitToOwners(string, COLOR_YELLOW);
			}
			else if(strcmp(item, "night_time", true) == 0)
			{
				assetVariables[10][aAssetValue] = amount;
				saveAsset(10);

				format(string, sizeof(string), "SetSVar: Admin %s changed night_time [%d].", N(playerid), amount);
				submitToAdmins(string, COLOR_YELLOW);
			}
   			else if(strcmp(item, "giftbox_minmoney", true) == 0)
			{
				assetVariables[3][aAssetValue] = amount;
				format(string, sizeof(string), "SetSVar: Admin %s changed giftbox_minmoney [%d].", GetName(playerid), amount);
				submitToOwners(string, COLOR_YELLOW);
			}
			else if(strcmp(item, "giftbox_maxmoney", true) == 0)
			{
				assetVariables[4][aAssetValue] = amount;
				format(string, sizeof(string), "SetSVar: Admin %s changed giftbox_minmoney [%d].", GetName(playerid), amount);
				submitToOwners(string, COLOR_YELLOW);
			}
			else if(strcmp(item, "giftbox_maxmats", true) == 0)
			{
				assetVariables[5][aAssetValue] = amount;
				format(string, sizeof(string), "SetSVar: Admin %s changed giftbox_maxmats [%d].", GetName(playerid), amount);
				submitToOwners(string, COLOR_YELLOW);
			}
			else if(strcmp(item, "giftbox_minmats", true) == 0)
			{
				assetVariables[6][aAssetValue] = amount;
				format(string, sizeof(string), "SetSVar: Admin %s changed giftbox_minmats [%d].", GetName(playerid), amount);
				submitToOwners(string, COLOR_YELLOW);
			}
			else if(strcmp(item, "giftbox_premiumaccounts", true) == 0)
			{
				assetVariables[7][aAssetValue] = amount;
				format(string, sizeof(string), "SetSVar: Admin %s changed giftbox_premiumaccounts [%d].", GetName(playerid), amount);
				submitToOwners(string, COLOR_YELLOW);
			}
			else return S(playerid,COLOR_WHITE, "Invalid item.");
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:gmx(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 6)
	{
	    if(iGMXTick == 0)
		{
			ShowPlayerDialog(playerid, DIALOG_GMX, DIALOG_STYLE_MSGBOX, "Server Restart", "Please confirm whether you are positive that you wish to a server restart?", "Yes", "No");
    	}
    	else return S(playerid, -1, "Serverul tocmai se restarteaza.");
    }
    else return S(playerid, -1, OwnerError);
    return 1;
}
CMD:fulldmv(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		foreach(Player, i)
		{
			playerVariables[i][pLicentaCondus] += 10;
			Update(i, pLicentaCondusx);
			format(szMessage, sizeof(szMessage), "(( Ownerul %s, a acordat licenta de condus pentru 10 ore tuturor playerilor de pe server. ))", GetName(playerid));
			S(i, COLOR_YELLOW, szMessage);
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}
CMD:makeadmin(playerid, params[])
{
	if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		new id, level, string[200];
		
		if(sscanf(params, "ui", id, level)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/makeadmin [playerid] [level]");

		if(IsPlayerConnected(id))
		{
			if(level >= 0 && level <= 7)
   			{
    			format(szMessage, sizeof(szMessage), "You have made %s a level %d admin.", GetName(id), level);
				S(playerid, COLOR_WHITE, szMessage);

		        format(string, sizeof(string),"* Admin %s set %s's admin level to %d.", playerVariables[playerid][pUsername], GetName(id), level);
				submitToAdmins(string, COLOR_ADMCHAT);

				if(level == 0)
				{
					format(string, sizeof(string), "Administrator %s has removed you from the admin team.", playerVariables[playerid][pUsername]);
					S(id, COLOR_BOSS2, string);
				}
				if(level >= playerVariables[id][pHelperLevel])
				{
					format(string, sizeof(string), "Administrator %s has promoted you to a level %d admin.", playerVariables[playerid][pUsername], level);
					S(id, COLOR_NICESKY, string);

				}

				playerVariables[id][pAdminLevel] = level;
				Update(id, pAdminLevelx);
   			}
		    else S(playerid, COLOR_GREY, "Valid admins levels are 0 to 7.");
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}

CMD:createhouse(playerid, params[])
{
    if(playerVariables[playerid][pAdminLevel] >= 6)
	{
		new size[32], string[128], labelString[256];
		if(sscanf(params, "s[32]", size)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/createhouse [size]");

  		if(strcmp(size, "small", true) == 0)
		{
  			new i, query[256];


			format(query, sizeof(query), "INSERT INTO `houses` (houseOwner) VALUES('AdmBot')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(houseVariables[i][hHouseOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

  				new interior = random(9);

                if(interior == 0)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2283.04;
			    	houseVariables[i][hHouseInteriorPos][1] = -1140.28;
			    	houseVariables[i][hHouseInteriorPos][2] = 1050.90;
			    	houseVariables[i][hHouseInterior] = 11;
				}
				if(interior == 1)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 223.20;
			    	houseVariables[i][hHouseInteriorPos][1] = 1287.08;
			    	houseVariables[i][hHouseInteriorPos][2] = 1082;
			    	houseVariables[i][hHouseInterior] = 1;
				}
    			if(interior == 2)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 328.05;
			    	houseVariables[i][hHouseInteriorPos][1] = 1477.73;
			    	houseVariables[i][hHouseInteriorPos][2] = 1084.44;
			    	houseVariables[i][hHouseInterior] = 15;
				}
    			if(interior == 3)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2308.77;
			    	houseVariables[i][hHouseInteriorPos][1] = -1212.94;
			    	houseVariables[i][hHouseInteriorPos][2] = 1049.02;
			    	houseVariables[i][hHouseInterior] = 6;
				}
				if(interior == 4)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2233.64;
			    	houseVariables[i][hHouseInteriorPos][1] = -1115.26;
			    	houseVariables[i][hHouseInteriorPos][2] = 1050.88;
			    	houseVariables[i][hHouseInterior] = 5;
				}
				if(interior == 5)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2218.40;
			    	houseVariables[i][hHouseInteriorPos][1] = -1076.18;
			    	houseVariables[i][hHouseInteriorPos][2] = 1050.48;
			    	houseVariables[i][hHouseInterior] = 1;
				}
				if(interior == 6)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 266.5;
			    	houseVariables[i][hHouseInteriorPos][1] = 304.90;
			    	houseVariables[i][hHouseInteriorPos][2] = 999.15;
			    	houseVariables[i][hHouseInterior] = 2;
				}
    			if(interior == 7)
    			{
    				houseVariables[i][hHouseInteriorPos][0] = 243.72;
			    	houseVariables[i][hHouseInteriorPos][1] = 304.91;
			    	houseVariables[i][hHouseInteriorPos][2] = 999.15;
			    	houseVariables[i][hHouseInterior] = 1;
				}
				if(interior == 8)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 243.72;
			    	houseVariables[i][hHouseInteriorPos][1] = 304.91;
			    	houseVariables[i][hHouseInteriorPos][2] = 999.15;
			    	houseVariables[i][hHouseInterior] = 1;
				}

			    houseVariables[i][hHouseExteriorPos][0] = x;
			    houseVariables[i][hHouseExteriorPos][1] = y;
			    houseVariables[i][hHouseExteriorPos][2] = z;

				houseVariables[i][hHouseLocked] = 0;
				houseVariables[i][hHousePrice] = 5000000;
				houseVariables[i][hRent] = 1;
				houseVariables[i][hSize] = 1;
				format(houseVariables[i][hHouseOwner], MAX_PLAYER_NAME, "AdmBot");
    			format(houseVariables[i][hDescription], 64, "Casa de vanzare");

				if(!strcmp(houseVariables[i][hHouseOwner], "Nobody", true) && strlen(houseVariables[i][hHouseOwner]) >= 1)
			  	{

					if(houseVariables[i][hHouseLocked] == 1)
					{
						format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}Nobody{FFFFFF}\nPrice: {990000}$%d{FFFFFF}\n(locked)", i, houseVariables[i][hDescription], houseVariables[i][hHousePrice]);
					}
					else
					{
						format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}Nobody{FFFFFF}\nPrice: {990000}$%d{FFFFFF}", i, houseVariables[i][hDescription], houseVariables[i][hHousePrice]);
					}
				}
				else
				{

					if(houseVariables[i][hHouseLocked] == 1)
					{
						if(houseVariables[i][hHousePrice] >= 1)
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s\n{FFFFFF}Price: {990000}$%s (/buyhouse)\n(locked)", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner], NumberFormat(houseVariables[i][hHousePrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s\n(locked)", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner]);
						}
					}
					else
					{
						if(houseVariables[i][hHousePrice] >= 1)
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s\n{FFFFFF}Price: {990000}$%s (/buyhouse)", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner], NumberFormat(houseVariables[i][hHousePrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner]);
						}
					}
				}
			 	houseVariables[i][hLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_WHITE, houseVariables[i][hHouseExteriorPos][0], houseVariables[i][hHouseExteriorPos][1], houseVariables[i][hHouseExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				houseVariables[i][hPickupID] = CreateDynamicPickup(1273, 23, houseVariables[i][hHouseExteriorPos][0], houseVariables[i][hHouseExteriorPos][1], houseVariables[i][hHouseExteriorPos][2], 0, 0, -1, 250);



				systemVariables[houseCount]++;
				saveHouse(i);

				S(playerid, COLOR_WHITE, "House created!");

				format(string, sizeof(string), "Admin %s create house %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);
			}
		}
		if(strcmp(size, "big", true) == 0)
		{
  			new i, query[256];


			format(query, sizeof(query), "INSERT INTO `houses` (houseOwner) VALUES('AdmBot')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(houseVariables[i][hHouseOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

  				new interior = random(5);

                if(interior == 0)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 140.17;
			    	houseVariables[i][hHouseInteriorPos][1] = 1366.07;
			    	houseVariables[i][hHouseInteriorPos][2] = 1083.65;
			    	houseVariables[i][hHouseInterior] = 5;
				}
				if(interior == 1)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2324.53;
			    	houseVariables[i][hHouseInteriorPos][1] = -1149.54;
			    	houseVariables[i][hHouseInteriorPos][2] = 1050.71;
			    	houseVariables[i][hHouseInterior] = 12;
				}
    			if(interior == 2)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 225.68;
			    	houseVariables[i][hHouseInteriorPos][1] = 1021.45;
			    	houseVariables[i][hHouseInteriorPos][2] = 1084.02;
			    	houseVariables[i][hHouseInterior] = 7;
				}
    			if(interior == 3)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 234.19;
			    	houseVariables[i][hHouseInteriorPos][1] = 1063.73;
			    	houseVariables[i][hHouseInteriorPos][2] = 1084.21;
			    	houseVariables[i][hHouseInterior] = 6;
				}
				if(interior == 4)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 226.30;
			    	houseVariables[i][hHouseInteriorPos][1] = 1114.24;
			    	houseVariables[i][hHouseInteriorPos][2] = 1080.99;
			    	houseVariables[i][hHouseInterior] = 5;
				}

			    houseVariables[i][hHouseExteriorPos][0] = x;
			    houseVariables[i][hHouseExteriorPos][1] = y;
			    houseVariables[i][hHouseExteriorPos][2] = z;

				houseVariables[i][hHouseLocked] = 0;
				houseVariables[i][hHousePrice] = 5000000;
				houseVariables[i][hRent] = 1;
				houseVariables[i][hSize] = 3;
				format(houseVariables[i][hHouseOwner], MAX_PLAYER_NAME, "AdmBot");
    			format(houseVariables[i][hDescription], 64, "Casa de vanzare");

				if(!strcmp(houseVariables[i][hHouseOwner], "Nobody", true) && strlen(houseVariables[i][hHouseOwner]) >= 1)
			  	{

					if(houseVariables[i][hHouseLocked] == 1)
					{
						format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}Nobody{FFFFFF}\nPrice: {990000}$%d{FFFFFF}\n(locked)", i, houseVariables[i][hDescription], houseVariables[i][hHousePrice]);
					}
					else
					{
						format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}Nobody{FFFFFF}\nPrice: {990000}$%d{FFFFFF}", i, houseVariables[i][hDescription], houseVariables[i][hHousePrice]);
					}
				}
				else
				{

					if(houseVariables[i][hHouseLocked] == 1)
					{
						if(houseVariables[i][hHousePrice] >= 1)
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s\n{FFFFFF}Price: {990000}$%s (/buyhouse)\n(locked)", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner], NumberFormat(houseVariables[i][hHousePrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s\n(locked)", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner]);
						}
					}
					else
					{
						if(houseVariables[i][hHousePrice] >= 1)
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s\n{FFFFFF}Price: {990000}$%s (/buyhouse)", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner], NumberFormat(houseVariables[i][hHousePrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner]);
						}
					}
				}
			 	houseVariables[i][hLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_WHITE, houseVariables[i][hHouseExteriorPos][0], houseVariables[i][hHouseExteriorPos][1], houseVariables[i][hHouseExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				houseVariables[i][hPickupID] = CreateDynamicPickup(1273, 23, houseVariables[i][hHouseExteriorPos][0], houseVariables[i][hHouseExteriorPos][1], houseVariables[i][hHouseExteriorPos][2], 0, 0, -1, 250);



				systemVariables[houseCount]++;
				saveHouse(i);

				S(playerid, COLOR_WHITE, "House created!");

				format(string, sizeof(string), "Admin %s create house %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);
			}
		}
		if(strcmp(size, "medium", true) == 0)
		{
  			new i, query[256];


			format(query, sizeof(query), "INSERT INTO `houses` (houseOwner) VALUES('AdmBot')");
			new Cache: restulying = mysql_query(handle, query);
			i = cache_insert_id();
			cache_delete(restulying);

			if(isnull(houseVariables[i][hHouseOwner]))
			{
			    new Float: x, Float: y, Float: z;
  				GetPlayerPos(playerid, x, y, z);

  				new interior = random(20);

                if(interior == 0)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 235.34;
			    	houseVariables[i][hHouseInteriorPos][1] = 1186.68;
			    	houseVariables[i][hHouseInteriorPos][2] = 1080.26;
			    	houseVariables[i][hHouseInterior] = 3;
				}
				if(interior == 1)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 491.07;
			    	houseVariables[i][hHouseInteriorPos][1] = 1398.50;
			    	houseVariables[i][hHouseInteriorPos][2] = 1080.26;
			    	houseVariables[i][hHouseInterior] = 2;
				}
    			if(interior == 2)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 24.04;
			    	houseVariables[i][hHouseInteriorPos][1] = 1340.17;
			    	houseVariables[i][hHouseInteriorPos][2] = 1084.38;
			    	houseVariables[i][hHouseInterior] = 10;
				}
    			if(interior == 3)
				{
    				houseVariables[i][hHouseInteriorPos][0] = -283.44;
			    	houseVariables[i][hHouseInteriorPos][1] = 1470.93;
			    	houseVariables[i][hHouseInteriorPos][2] = 1084.38;
			    	houseVariables[i][hHouseInterior] = 15;
				}
				if(interior == 4)
				{
    				houseVariables[i][hHouseInteriorPos][0] = -260.49;
			    	houseVariables[i][hHouseInteriorPos][1] = 1456.75;
			    	houseVariables[i][hHouseInteriorPos][2] = 1084.37;
			    	houseVariables[i][hHouseInterior] = 4;
				}
				if(interior == 5)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 83.03;
			    	houseVariables[i][hHouseInteriorPos][1] = 1322.28;
			    	houseVariables[i][hHouseInteriorPos][2] = 1083.87;
			    	houseVariables[i][hHouseInterior] = 9;
				}
    			if(interior == 6)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2317.89;
			    	houseVariables[i][hHouseInteriorPos][1] = -1026.76;
			    	houseVariables[i][hHouseInteriorPos][2] = 1050.22;
			    	houseVariables[i][hHouseInterior] = 9;
				}
    			if(interior == 7)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2495.98;
			    	houseVariables[i][hHouseInteriorPos][1] = -1692.08;
			    	houseVariables[i][hHouseInteriorPos][2] = 1014.74;
			    	houseVariables[i][hHouseInterior] = 3;
				}
    			if(interior == 8)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2807.48;
			    	houseVariables[i][hHouseInteriorPos][1] = -1174.76;
			    	houseVariables[i][hHouseInteriorPos][2] = 1025.57;
			    	houseVariables[i][hHouseInterior] = 8;
				}
    			if(interior == 9)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2196.85;
			    	houseVariables[i][hHouseInteriorPos][1] = -1204.25;
			    	houseVariables[i][hHouseInteriorPos][2] = 1049.02;
			    	houseVariables[i][hHouseInterior] = 6;
				}
				if(interior == 10)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 377.15;
			    	houseVariables[i][hHouseInteriorPos][1] = 1417.41;
			    	houseVariables[i][hHouseInteriorPos][2] = 1081.33;
			    	houseVariables[i][hHouseInterior] = 15;
				}
				if(interior == 11)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2270.38;
			    	houseVariables[i][hHouseInteriorPos][1] = -1210.35;
			    	houseVariables[i][hHouseInteriorPos][2] = 1047.56;
			    	houseVariables[i][hHouseInterior] = 10;
				}
    			if(interior == 12)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 446.99;
			    	houseVariables[i][hHouseInteriorPos][1] = 1397.07;
			    	houseVariables[i][hHouseInteriorPos][2] = 1084.30;
			    	houseVariables[i][hHouseInterior] = 2;
				}
   				if(interior == 13)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 387.22;
			    	houseVariables[i][hHouseInteriorPos][1] = 1471.70;
			    	houseVariables[i][hHouseInteriorPos][2] = 1080.19;
			    	houseVariables[i][hHouseInterior] = 15;
				}
    			if(interior == 14)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 22.88;
			    	houseVariables[i][hHouseInteriorPos][1] = 1403.33;
			    	houseVariables[i][hHouseInteriorPos][2] = 1084.44;
			    	houseVariables[i][hHouseInterior] = 5;
				}
    			if(interior == 15)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2365.31;
			    	houseVariables[i][hHouseInteriorPos][1] = -1135.60;
			    	houseVariables[i][hHouseInteriorPos][2] = 1050.88;
			    	houseVariables[i][hHouseInterior] = 8;
				}
				if(interior == 16)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 2237.59;
			    	houseVariables[i][hHouseInteriorPos][1] = -1081.64;
			    	houseVariables[i][hHouseInteriorPos][2] = 1049.02;
			    	houseVariables[i][hHouseInterior] = 2;
				}
    			if(interior == 17)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 295.04;
			    	houseVariables[i][hHouseInteriorPos][1] = 1472.26;
			    	houseVariables[i][hHouseInteriorPos][2] = 1080.26;
			    	houseVariables[i][hHouseInterior] = 15;
				}
    			if(interior == 18)
				{
    				houseVariables[i][hHouseInteriorPos][0] = -68.81;
			    	houseVariables[i][hHouseInteriorPos][1] = 1351.21;
			    	houseVariables[i][hHouseInteriorPos][2] = 1080.21;
			    	houseVariables[i][hHouseInterior] = 6;
				}
    			if(interior == 19)
				{
    				houseVariables[i][hHouseInteriorPos][0] = 260.85;
			    	houseVariables[i][hHouseInteriorPos][1] = 1237.24;
			    	houseVariables[i][hHouseInteriorPos][2] = 1084.26;
			    	houseVariables[i][hHouseInterior] = 9;
				}

			    houseVariables[i][hHouseExteriorPos][0] = x;
			    houseVariables[i][hHouseExteriorPos][1] = y;
			    houseVariables[i][hHouseExteriorPos][2] = z;

				houseVariables[i][hHouseLocked] = 0;
				houseVariables[i][hHousePrice] = 5000000;
				houseVariables[i][hRent] = 1;
				houseVariables[i][hSize] = 2;
				format(houseVariables[i][hHouseOwner], MAX_PLAYER_NAME, "AdmBot");
    			format(houseVariables[i][hDescription], 64, "Casa de vanzare");

				if(!strcmp(houseVariables[i][hHouseOwner], "Nobody", true) && strlen(houseVariables[i][hHouseOwner]) >= 1)
			  	{

					if(houseVariables[i][hHouseLocked] == 1)
					{
						format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}Nobody{FFFFFF}\nPrice: {990000}$%d{FFFFFF}\n(locked)", i, houseVariables[i][hDescription], houseVariables[i][hHousePrice]);
					}
					else
					{
						format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}Nobody{FFFFFF}\nPrice: {990000}$%d{FFFFFF}", i, houseVariables[i][hDescription], houseVariables[i][hHousePrice]);
					}
				}
				else
				{

					if(houseVariables[i][hHouseLocked] == 1)
					{
						if(houseVariables[i][hHousePrice] >= 1)
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s\n{FFFFFF}Price: {990000}$%s (/buyhouse)\n(locked)", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner], NumberFormat(houseVariables[i][hHousePrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s\n(locked)", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner]);
						}
					}
					else
					{
						if(houseVariables[i][hHousePrice] >= 1)
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s\n{FFFFFF}Price: {990000}$%s (/buyhouse)", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner], NumberFormat(houseVariables[i][hHousePrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{FFFFFF}House {990000}%d\n%s\n{FFFFFF}Owner: {990000}%s", i, houseVariables[i][hDescription], houseVariables[i][hHouseOwner]);
						}
					}
				}
			 	houseVariables[i][hLabelID] = CreateDynamic3DTextLabel(labelString, COLOR_WHITE, houseVariables[i][hHouseExteriorPos][0], houseVariables[i][hHouseExteriorPos][1], houseVariables[i][hHouseExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				houseVariables[i][hPickupID] = CreateDynamicPickup(1273, 23, houseVariables[i][hHouseExteriorPos][0], houseVariables[i][hHouseExteriorPos][1], houseVariables[i][hHouseExteriorPos][2], 0, 0, -1, 250);



				systemVariables[houseCount]++;
				saveHouse(i);

				S(playerid, COLOR_WHITE, "House created!");

				format(string, sizeof(string), "Admin %s create house %d.", GetName(playerid), i);
				submitToAdmins(string, COLOR_BOSS2);
			}
		}
	}
	else return S(playerid, -1, OwnerError);
	return 1;
}

//========================================================= Businesses System by Wops ===============================================================

CMD:businessname(playerid, params[])
{
	if(playerVariables[playerid][pStatus] >= 1)
	{
		new x = getPlayerBusinessID(playerid);
		new labelString[256], string[500];

		if(x >= 1)
		{
		    if(!isnull(params))
			{
				new maxc = strlen(params);
				if(maxc > 64) return S(playerid, COLOR_GREY,"Maximum caracter is 64.");

			    mysql_real_escape_string(params, szMessage);
				strcpy(businessVariables[x][bName], szMessage, 250);

				saveBusiness(x);
				
    			if(!strcmp(businessVariables[x][bOwner], "AdmBot", true) && strlen(businessVariables[x][bOwner]) >= 1)
				{
					if(businessVariables[x][bLocked] == 1)
					{
					    if(businessVariables[x][bPrice] > 0)
					    {
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee]);
						}
					}
					else
					{
						if(businessVariables[x][bPrice] > 0)
					    {
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bFee]);
						}
					}
				}
				else
				{
		  			if(businessVariables[x][bLocked] == 1)
					{
					    if(businessVariables[x][bPrice] > 0)
					    {
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
						}
					}
					else
					{
						if(businessVariables[x][bPrice] > 0)
					    {
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
						}
						else
						{
							format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
						}
					}
				}
				UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], COLOR_YELLOW, labelString);
				
				format(string, sizeof(string), "Text modificat: %s", params);
				S(playerid, COLOR_WHITE, string);
			}
			else
			{
				return S(playerid, COLOR_GREY, SYNTAX_MESSAGE"/businessname [text]");
			}
		}
		else S(playerid, COLOR_GREY, "You don't own a business.");
	}
	return 1;
}
CMD:lockbusiness(playerid, params[])
{
	if(getPlayerBusinessID(playerid) >= 1)
	{
	    new x = getPlayerBusinessID(playerid);
	    new labelString[500];
	    
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2]))
		{
	        
		    switch(businessVariables[x][bLocked])
			{
				case 0:
				{
					businessVariables[x][bLocked] = 1;
					S(playerid, COLOR_WHITE, "Business locked.");
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					saveBusiness(x);
				}
				case 1:
				{
				    businessVariables[x][bLocked] = 0;
				    S(playerid, COLOR_WHITE, "Business unlocked.");
				    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				    saveBusiness(x);
				}
			}
			if(!strcmp(businessVariables[x][bOwner], "AdmBot", true) && strlen(businessVariables[x][bOwner]) >= 1)
			{
				if(businessVariables[x][bLocked] == 1)
				{
				    if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee]);
					}
				}
				else
				{
					if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bFee]);
					}
				}
			}
			else
			{
	  			if(businessVariables[x][bLocked] == 1)
				{
				    if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
					}
				}
				else
				{
					if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
					}
				}
			}
			UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], COLOR_YELLOW, labelString);
		}
		else return S(playerid, COLOR_GREY, "Trebuie sa fii langa business.");
	}
	else return S(playerid, COLOR_GREY, "You don't own a business.");
	return 1;
}
CMD:bwithdraw(playerid, params[])
{
	if(getPlayerBusinessID(playerid) >= 1)
	{
	    new x = getPlayerBusinessID(playerid), cash, string[256];
	    
	    if(businessVariables[x][bType] != 12)
	    {
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, businessVariables[x][bInteriorPos][0], businessVariables[x][bInteriorPos][1], businessVariables[x][bInteriorPos][2]))
			{
				if(sscanf(params, "d", cash)) S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/bizwithdraw [money]");
				{
				    if(cash <= businessVariables[x][bVault])
				    {
				        if(cash <= 0) return S(playerid, COLOR_GREY, "Invalid amount.");
				        
						GivePlayerCash(playerid, cash);
						businessVariables[x][bVault] -= cash;
						saveBusiness(x);
						format(string, sizeof(string), "You have withdrawn $%s from your vault. Total: $%s.", NumberFormat(cash), NumberFormat(businessVariables[x][bVault]));
						S(playerid, COLOR_TUTORIAL, string);
					}
					else  return S(playerid, COLOR_WHITE, "You don't have that much.");
				}
			}
			else return S(playerid, COLOR_GREY, "Trebuie sa fii in business pentru a scoate bani!");
		}
		else
		{
  			if(sscanf(params, "d", cash)) S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/bizwithdraw [money]");
			{
			    if(cash <= businessVariables[x][bVault])
			    {
			        if(cash <= 0) return S(playerid, COLOR_GREY, "Invalid amount.");
			        
					GivePlayerCash(playerid, cash);
					businessVariables[x][bVault] -= cash;
					saveBusiness(x);
					format(string, sizeof(string), "You have withdrawn $%s from your vault. Total: $%s.", NumberFormat(cash), NumberFormat(businessVariables[x][bVault]));
					S(playerid, COLOR_TUTORIAL, string);
				}
				else  return S(playerid, COLOR_WHITE, "You don't have that much.");
			}
		}
	}
	else return S(playerid, COLOR_GREY, "You don't own a business.");
	return 1;
}
CMD:bbalance(playerid, params[])
{
	if(getPlayerBusinessID(playerid) >= 1)
	{
	    new x = getPlayerBusinessID(playerid), string[256];

		format(string, sizeof(string), "You have $%s in your business account.", NumberFormat(businessVariables[x][bVault]));
		S(playerid, COLOR_WHITE, string);

	}
	else return S(playerid, COLOR_GREY, "You don't own a business.");
	return 1;
}
CMD:business(playerid, params[])
{
	if(getPlayerBusinessID(playerid) >= 1)
	{
		new x = getPlayerBusinessID(playerid);
		
		if(playerVariables[playerid][pCheckpoint] > 0) return ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
		if(playerVariables[playerid][pCheckpointJob] < 1)
		{
			SetPlayerCheckpoint(playerid, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 3.0);
			S(playerid, COLOR_GREY, "A checkpoint has been set to your business.");
			playerVariables[playerid][pCheckpoint] = 1;
		}
		else
		{
			ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
		}
	}
	else return S(playerid, COLOR_GREY, "You don't own a business.");
	return 1;
}
CMD:findbiz(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(playerVariables[playerid][pCheckpoint] > 0) return ShowPlayerDialog(playerid, DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
		if(playerVariables[playerid][pCheckpointJob] < 1)
		{
			new businessID, string[256];
			if(sscanf(params, "d", businessID)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/findbiz [business id]");

			if(businessID > 0 && businessID < MAX_BUSINESSES)
			{
				SetPlayerCheckpoint(playerid, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 3.0);
				playerVariables[playerid][pCheckpoint] = 1;

				if(playerVariables[playerid][pLimba] == 1)
				{
					format(string, sizeof(string), "Mergi la checkpoint-ul de pe minimap pentru a ajunge la biz-ul %d.", businessID);
					S(playerid, COLOR_YELLOW, string);
				}

				if(playerVariables[playerid][pLimba] == 2)
				{
					format(string, sizeof(string), "Follow the checkpoint to reach the business %d.", businessID);
					S(playerid, COLOR_YELLOW, string);
				}
			}
			else return S(playerid, COLOR_GREY, "Invalid business ID.");
		}
		else
		{
			ShowPlayerDialog(playerid,DIALOG_CCP, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Do you want to cancel your current checkpoint?", "Yes", "No");
		}
	}
	return 1;
}
CMD:sellbusinesstostate(playerid, params[])
{
	if(getPlayerBusinessID(playerid) >= 1)
	{
	    if(playerVariables[playerid][pLimba] == 1)
    	{
 			ShowPlayerDialog(playerid, DIALOG_CONFIRMARE, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa vinzi businessul la stat pentru $3.000.000?", "Da", "Nu");
		}
		if(playerVariables[playerid][pLimba] == 2)
    	{
			ShowPlayerDialog(playerid, DIALOG_CONFIRMARE, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure that you want to sell your business to the state for $3.000.000?", "Yes", "No");
		}
	}
	else return S(playerid, COLOR_GREY, "You don't own a business.");
	return 1;
}
CMD:bizfee(playerid, params[])
{
	if(getPlayerBusinessID(playerid) >= 1)
	{
	    new x = getPlayerBusinessID(playerid);
	    new labelString[500], string[256];
	    new bizfee = strval(params);
	    
	    if(!isnull(params))
        {
            if(businessVariables[x][bType] == 12) return SS(playerid, COLOR_GREY, "Nu poti schimba pretul de intrare la acest business.", "You can't change the entry fee on this business.");

			if(bizfee < 0) return S(playerid, COLOR_GREY, "Nu poti pune un pret mai mic de 0.");
            if(bizfee > 5000) return S(playerid, COLOR_GREY, "Nu poti pune un pret mai mare de $5000.");
            
            businessVariables[x][bFee] = bizfee;
            format(string, sizeof(string), "Entrance fee set to $%s.", NumberFormat(bizfee));
			S(playerid, COLOR_WHITE, string);
			saveBusiness(x);
        
        
        	if(!strcmp(businessVariables[x][bOwner], "AdmBot", true) && strlen(businessVariables[x][bOwner]) >= 1)
			{
				if(businessVariables[x][bLocked] == 1)
				{
				    if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bFee]);
					}
				}
				else
				{
					if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}AdmBot{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bFee]);
					}
				}
			}
			else
			{
	  			if(businessVariables[x][bLocked] == 1)
				{
				    if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n(locked)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
					}
				}
				else
				{
					if(businessVariables[x][bPrice] > 0)
				    {
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d\n{FFFFFF}Price: {0073FF}$%s (/buybusiness)", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee], NumberFormat(businessVariables[x][bPrice]));
					}
					else
					{
						format(labelString, sizeof(labelString), "{0073FF}%s\n{FFFFFF}Business {0073FF}#%d\n{FFFFFF}Owner: {0073FF}%s{FFFFFF}\nFee: {0073FF}$%d", businessVariables[x][bName], x, businessVariables[x][bOwner], businessVariables[x][bFee]);
					}
				}
			}
			UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], COLOR_YELLOW, labelString);
        }
        else
		{
			return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/bizfee [price]");
		}
	}
	else return S(playerid, COLOR_GREY, "You don't own a business.");
	return 1;
}
CMD:buyfightstyle(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;
	        
	    switch(businessVariables[businessID][bType])
		{
			case 9:
			{
       			new stringc[1000];
				format(stringc, sizeof(stringc),"Boxing ($10,000)\n");
				strcat ( stringc, "Kung Fu ($10,000)\n");
				strcat ( stringc, "Knee Head ($15,000)\n");
				strcat ( stringc, "Grab & Kick ($10,000)\n");
				strcat ( stringc, "Elbow ($10,000)\n");
				strcat ( stringc, "Default ($5,000)\n");
				ShowPlayerDialog(playerid, DIALOG_FIGHTSTYLE, DIALOG_STYLE_LIST,"Fighting Styles",stringc,"Buy","Exit");
			}
		}
	}
	return 1;
}
CMD:buyfood(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    switch(businessVariables[businessID][bType])
		{
			case 5:
			{
			    if(playerVariables[playerid][pFood] <= 0)
			    {
			        if(playerVariables[playerid][pCash] >= 250)
			        {
					    new string[256];
						GivePlayerCash(playerid, -250);
						businessVariables[businessID][bVault] += 250;
				    	GameTextForPlayer(playerid,"~r~-$250", 1500, 1);
				    	SetPlayerHealthEx(playerid, 100);
						ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
						format(string, sizeof(string), "* %s ate some food!", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, string);
						playerVariables[playerid][pFood] = 30;
						saveBusiness(businessID);
					}
					else return S(playerid, COLOR_GREY, "You do not have enough money.");
				}
    			else
				{
  					format(szMessage, 256, "You need to wait %d seconds before using /buyfood again.", playerVariables[playerid][pFood]);
					S(playerid,COLOR_WHITE, szMessage);
				}
			}
		}
	}
	return 1;
}
CMD:buy(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    switch(businessVariables[businessID][bType])
		{
			case 2:
			{
       			new stringc[1000];
				format(stringc, sizeof(stringc),"Cellphone ($500)\n");
				strcat ( stringc, "Phone book ($100)\n");
				strcat ( stringc, "Phone credit ($250)\n");
				strcat ( stringc, "Photo camera ($2,000)\n");
				strcat ( stringc, "Walkie Talkie ($2,000)\n");
				strcat ( stringc, "Parachute ($3,000)\n");
				ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST,"24/7",stringc,"Buy","Exit");
			}
		}
	}
	return 1;
}
CMD:buygun(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;
	    
	    if(playerVariables[playerid][pLicentaArme] == 0) return SS(playerid, COLOR_GREY, "Nu ai licenta de arme!", "You don't have a gun license!");

	    switch(businessVariables[businessID][bType])
		{
			case 3:
			{
       			new stringc[1000];
				format(stringc, sizeof(stringc),"Desert Eagle ($2,500)\n");
				strcat ( stringc, "M4 ($5,000)\n");
				strcat ( stringc, "AK47 ($5,000)\n");
				strcat ( stringc, "Shotgun ($1,500)\n");
				strcat ( stringc, "MP5 ($2,000)\n");
				strcat ( stringc, "Baseball Bat ($500)\n");
				ShowPlayerDialog(playerid, DIALOG_BUYGUN, DIALOG_STYLE_LIST,"Buy gun",stringc,"Buy","Exit");
			}
		}
	}
	return 1;
}
CMD:buydrink(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    switch(businessVariables[businessID][bType])
		{
			case 7:
			{
       			new stringc[1000];
				format(stringc, sizeof(stringc),"Stock Bar Cigars ($50)\n");
				strcat ( stringc, "Beer ($80)\n");
				strcat ( stringc, "Wine ($100)\n");
				strcat ( stringc, "Sprunk ($50)\n");
				ShowPlayerDialog(playerid, DIALOG_BUYDRINK, DIALOG_STYLE_LIST,"Buy",stringc,"Buy","Exit");
			}
		}
	}
	return 1;
}
CMD:buytoys(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    switch(businessVariables[businessID][bType])
		{
			case 4:
			{
       			ShowPlayerDialog(playerid, DIALOG_BUYTOYS,DIALOG_STYLE_LIST,"Buy","Purple Dildo ($500)\nSmall White Vibrator ($100)\nSilver Vibrator ($100)\nLarge White Vibrator ($100)\nFlowers ($150)","Select","Exit");
			}
		}
	}
	return 1;
}
CMD:buyglasses(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    switch(businessVariables[businessID][bType])
		{
			case 6:
			{
				if(playerVariables[playerid][pLimba] == 1)
				{
					ShowModelSelectionMenu(playerid, glskinlist, "Alege ochelarii");
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					ShowModelSelectionMenu(playerid, glskinlist, "Select glasses");
				}
			}
		}
	}
 	return 1;
}
CMD:buyhat(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    switch(businessVariables[businessID][bType])
		{
			case 6:
			{
    			new hats[18];
				hats[0] = 18926;
				hats[1] = 18927;
				hats[2] = 18928;
				hats[3] = 18929;
				hats[4] = 18930;
				hats[5] = 18931;
				hats[6] = 18932;
				hats[7] = 18933;
				hats[8] = 18934;
				hats[9] = 18935;
				hats[10] = 18944;
				hats[11] = 18945;
				hats[12] = 18946;
				hats[13] = 18947;
				hats[14] = 18948;
				hats[15] = 18949;
				hats[16] = 18950;
				hats[17] = 18951;
				ShowModelSelectionMenuEx(playerid, hats, 18, "Select hat", 2, 90.0, 0.0, 90.0);
			}
		}
	}
 	return 1;
}
CMD:clothes(playerid,params[])
{
    if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    switch(businessVariables[businessID][bType])
		{
			case 6:
			{
				if(playerVariables[playerid][pGroup] == 0) { ShowModelSelectionMenu(playerid, skinlist, "Select skin"); }
				else if(playerVariables[playerid][pGroup] == 1) { ShowModelSelectionMenu(playerid, skinlistPD, "Select skin"); }
				else if(playerVariables[playerid][pGroup] == 2) { ShowModelSelectionMenu(playerid, skinlistFBI, "Select skin"); }
				else if(playerVariables[playerid][pGroup] == 3) { ShowModelSelectionMenu(playerid, skinlistMEDIC, "Select skin"); }
				else if(playerVariables[playerid][pGroup] == 4) { ShowModelSelectionMenu(playerid, skinlistHA, "Select skin"); }
				else if(playerVariables[playerid][pGroup] == 5) { ShowModelSelectionMenu(playerid, skinlistSI, "Select skin"); }
				else if(playerVariables[playerid][pGroup] == 6) { ShowModelSelectionMenu(playerid, skinlistNR, "Select skin"); }
				else if(playerVariables[playerid][pGroup] == 7) { ShowModelSelectionMenu(playerid, skinlistTX, "Select skin"); }
				else if(playerVariables[playerid][pGroup] == 8) { ShowModelSelectionMenu(playerid, skinlistGrove, "Select skin"); }
				else if(playerVariables[playerid][pGroup] == 9) { ShowModelSelectionMenu(playerid, skinlistBallas, "Select skin"); }
			}
		}
	}
	return 1;
}
CMD:balance(playerid, params[])
{
    if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;
	    new string[256];

	    switch(businessVariables[businessID][bType])
		{
			case 1:
			{
				format(string, sizeof(string), "You have $%s in your account.", NumberFormat(playerVariables[playerid][pAccount]));
				S(playerid, COLOR_YELLOW, string);
			}
		}
	}
	else return S(playerid, COLOR_GREY, "You are not at the bank!");
	return 1;
}
CMD:deposit(playerid, params[])
{
	new cash, string[128];

	if(sscanf(params, "d", cash)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/deposit [amount]");

	else if(cash <= 0) return S(playerid, COLOR_GREY, "Invalid amount specified.");
	else
	{
		if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
		{
	    	new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    	switch(businessVariables[businessID][bType])
			{
				case 1:
				{
					if(playerVariables[playerid][pCash] < cash) S(playerid, COLOR_GREY, "You don't have enough money for this transaction.");
					else if(cash >= 1)
					{
						playerVariables[playerid][pAccount] += cash;
						Update(playerid, pAccountx);

						GivePlayerCash(playerid, -cash);

						format(string, sizeof(string), "You have deposited $%s into your bank account. Your account balance is now $%s.", NumberFormat(cash), NumberFormat(playerVariables[playerid][pAccount]));
						S(playerid, COLOR_DCHAT, string);
					}
				}
			}
		}
		else return SS(playerid, COLOR_GREY, "Nu te afli la banca.", "You are not at the Bank.");
	}
	return 1;
}
CMD:withdraw(playerid, params[])
{
	new cash, string[128];

	if(sscanf(params, "d", cash)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/withdraw [amount]");

	else if(cash <= 0) return S(playerid, COLOR_GREY, "Invalid amount specified.");
	else
	{
		if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
		{
	    	new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    	switch(businessVariables[businessID][bType])
			{
				case 1:
				{
					if(playerVariables[playerid][pAccount] < cash) S(playerid, COLOR_GREY, "You don't have enough money for this transaction.");
					else if(cash >= 1)
					{
						playerVariables[playerid][pAccount] -= cash;
						Update(playerid, pAccountx);

						GivePlayerCash(playerid, cash);

						format(string, sizeof(string), "You have withdrawn $%s from your bank account. Your account balance is now $%s.", NumberFormat(cash), NumberFormat(playerVariables[playerid][pAccount]));
						S(playerid, COLOR_DCHAT, string);
					}
				}
			}
		}
		else return SS(playerid, COLOR_GREY, "Nu te afli la banca.", "You are not at the Bank.");
	}
	return 1;
}

CMD:transfer(playerid, params[])
{
	new id, cash, string[128];

	if(sscanf(params, "ud", id, cash))
	return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/transfer [playerid] [amount]");

	if(playerVariables[playerid][pOreJucate] >= 5)
	{
		if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
		{
	    	new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    	switch(businessVariables[businessID][bType])
			{
				case 1:
				{
					if(playerid == id) return S(playerid, COLOR_GREY, "You can not transfer the money to you.");
					if(IsPlayerConnected(id))
					{
					    if(playerVariables[playerid][pAccount] >= cash)
						{
							if(cash >= 1)
							{
								if(playerVariables[playerid][pDeelayTransfer] < 1)
								{
								    if(playerVariables[playerid][pLimba] == 1)
								    {

									    format(string,sizeof(string),"Esti sigur ca vrei sa ii transferi $%s lui %s?\n\nDaca imprumuti bani cuiva, o faci pe propria raspundere.", NumberFormat(cash), GetName(id));

										TransferOffer[playerid] = id;
										TransferMoney[playerid] = cash;

										ShowPlayerDialog(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer:", string, "Da", "Nu");

									}
		       						if(playerVariables[playerid][pLimba] == 2)
								    {

								    	format(string,sizeof(string),"Are you sure you want to transfer $%s to %s?\n\nIf you lend money to someone, you do it to your own responsability.", NumberFormat(cash), GetName(id));

										TransferOffer[playerid] = id;
										TransferMoney[playerid] = cash;

										ShowPlayerDialog(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer:", string, "Yes", "No");
									}
								}
		     				 	else
								{
								    if(playerVariables[playerid][pLimba] == 1)
								    {
										format(szMessage, 256, "Nu poti folosi aceasta comanda acum. Poti folosi din nou comanda in %d secunde.", playerVariables[playerid][pDeelayTransfer]);
			   						 	S(playerid,COLOR_WHITE,szMessage);
								    }
								    if(playerVariables[playerid][pLimba] == 2)
								    {
										format(szMessage, 256, "You can't use this command now. You will be able to use the command in %d seconds. ", playerVariables[playerid][pDeelayTransfer]);
			   						 	S(playerid,COLOR_WHITE,szMessage);
									}
								}
							}
							else return S(playerid, COLOR_GREY, "Invalid amount specified.");
						}
						else return S(playerid, COLOR_GREY, "Your account balance is insufficient for this transaction.");
					}
					else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
				}
			}
		}
		else return SS(playerid, COLOR_GREY, "Nu te afli la banca.", "You are not at the Bank.");
	}
 	else return SS(playerid, COLOR_GREY, "Trebuie sa ai minim 5 ore jucate pentru a putea transfera bani cuiva.", "You need to have atleast 5 played hours to transfer money");
	return 1;
}
CMD:dice(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid) - BUSINESS_VIRTUAL_WORLD;

	    switch(businessVariables[businessID][bType])
		{
			case 8:
			{
				new id, money, string[256];
				
				if(sscanf(params, "ud", id, money)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/dice [playerid] [money]");

				if(id == INVALID_PLAYER_ID) return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
				if(money <= 0) return S(playerid, COLOR_GREY, "Invalid amount.");
				if(GetPlayerCash(playerid) < money) return SS(playerid, -1,"Nu ai suficienti bani pentru a juca barbut.", "You don't have enough money to play dice.");
				if(GetPlayerCash(id) < money) return SS(playerid, -1, "Adversarul tau nu are suficienti bani pentru a juca barbut.", "Your opponent doesn't have enough money to play dice.");
				if(id != playerid)
				{
					if(GetDistanceBetweenPlayers(playerid, id) > 5) return SS(playerid, COLOR_GREY, "Acest player nu este langa tine.", "This player is not near you.");
					if(money <= playerVariables[playerid][pLevel] * 100000)
					{
						if(money <= playerVariables[id][pLevel] * 100000)
						{
							if(playerVariables[playerid][pDeelayDice] < 1)
							{

								SS(playerid, COLOR_IN2, "Cerere de barbut trimisa.", "Dice requst sent.");
								playerVariables[playerid][pDeelayDice] = 3;

								if(playerVariables[id][pLimba] == 1)
								{
									format(string, sizeof(string), "%s te-a invitat sa joci barbut cu el pe $%s. Scrie /accept dice %d pentru a juca.", GetName(playerid), NumberFormat(money), playerid);
									S(id, COLOR_IN2, string);
								}
								if(playerVariables[id][pLimba] == 2)
								{
									format(string, sizeof(string), "%s has invited you to play dice with him for $%s. Use /accept dice %d to accept.", GetName(playerid), NumberFormat(money), playerid);
									S(id, COLOR_IN2, string);
								}


								Diceid[id] = playerid;
								Dicem[id] = money;
							}
							else
							{
								format(szMessage, 256, "{BFFF8B}You can't use this command now. You will be able to use the command in %d seconds. ", playerVariables[playerid][pDeelayDice]);
						 		S(playerid, -1, szMessage);
							}
						}
						else
						{
						    if(playerVariables[playerid][pLimba] == 1)
						    {
								format(szMessage, 256, "Nu poti paria atat de mult datorita levelului adversarului tau. Poti paria maxim $%s (level * 100000)", NumberFormat(playerVariables[id][pLevel] * 100000));
							 	S(playerid, -1, szMessage);
						    }
						    if(playerVariables[playerid][pLimba] == 2)
						    {
								format(szMessage, 256, "You can't bet that much because of your oponent's level. You can bet a maximum of $%s (level * 100000)", NumberFormat(playerVariables[id][pLevel] * 100000));
							 	S(playerid, -1, szMessage);
							}
						}
					}
	    			else
					{
					    if(playerVariables[playerid][pLimba] == 1)
					    {
							format(szMessage, 256, "Nu poti paria atat de mult datorita levelului tau. Poti paria maxim $%s (level * 100000)", NumberFormat(playerVariables[playerid][pLevel] * 100000));
						 	S(playerid, -1, szMessage);
					    }
					    if(playerVariables[playerid][pLimba] == 2)
					    {
							format(szMessage, 256, "You can't bet that much because of your level. You can bet a maximum of $%s (level * 100000) ", NumberFormat(playerVariables[playerid][pLevel] * 100000));
						 	S(playerid, -1, szMessage);
						}
					}
				}
			}
		}
    }
	return 1;
}

//================================================================================================================================================

//----------------------------------------- Factiuni system modificare nume factiune etc --------------------------------------------------------
CMD:leaderhelp(playerid, params[])
{
	if(playerVariables[playerid][pGroupRank] >= 6 || playerVariables[playerid][pAdminLevel] >= 1)
	{
	    S(playerid,COLOR_WHITE,"Leader help: /members, /fvrespawn, /invite, /lockhq, /granknames, /gmotd, /l, /vrank, /changerank");
 	}
 	return 1;
}



CMD:gmotd(playerid, params[])
{
	if(playerVariables[playerid][pGroup] >= 1 && playerVariables[playerid][pGroupRank] >= 6)
	{
	    if(!isnull(params))
		{

			format(szMessage, sizeof(szMessage), "You have changed the group MOTD to %s.", params);
			S(playerid, COLOR_WHITE, szMessage);

			GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);
			format(szMessage, sizeof(szMessage), "%s has changed the group MOTD to '%s'.", szPlayerName, params);
			SendToGroup(playerVariables[playerid][pGroup], COLOR_GENANNOUNCE, szMessage);

			mysql_real_escape_string(params, szMessage);

			strcpy(groupVariables[playerVariables[playerid][pGroup]][gGroupMOTD], szMessage, 128);
		}
		else
		{
			return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/gmotd [text]");
		}
	}
	return 1;
}
CMD:changerank(playerid, params[])
{
	if(playerVariables[playerid][pGroup] >= 1 && playerVariables[playerid][pGroupRank] == 7)
	{
		new id, rank, messageString[128];

	    if(sscanf(params, "ui", id, rank))
		{
			return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/changerank [playerid] [rank]");
		}
	    else
		{
		    new membru = playerVariables[id][pGroup];
		    new leader = playerVariables[playerid][pGroup];

			if(IsPlayerConnected(id))
			{
				if(id == playerid) return S(playerid, COLOR_WHITE, "Nu iti poti seta rank-ul.");
    			if(leader == membru)
		    	{
				    if(rank == 1)
				    {

						playerVariables[id][pGroupRank] = rank;
						Update(id, pGroupRankx);

						format(messageString, sizeof(messageString), "You have promoted %s to the rank of %s (1).", GetName(id), groupVariables[playerVariables[id][pGroup]][gGroupRankName1]);
						S(playerid, COLOR_WHITE, messageString);

						format(messageString, sizeof(messageString), "%s has promoted you to the rank of %s (1).", GetName(playerid), groupVariables[playerVariables[id][pGroup]][gGroupRankName1]);
						S(id, COLOR_NICESKY, messageString);

					}
					if(rank == 2)
				    {

						playerVariables[id][pGroupRank] = rank;
						Update(id, pGroupRankx);

						format(messageString, sizeof(messageString), "You have promoted %s to the rank of %s (2).", GetName(id), groupVariables[playerVariables[id][pGroup]][gGroupRankName2]);
						S(playerid, COLOR_WHITE, messageString);

						format(messageString, sizeof(messageString), "%s has promoted you to the rank of %s (2).", GetName(playerid), groupVariables[playerVariables[id][pGroup]][gGroupRankName2]);
						S(id, COLOR_NICESKY, messageString);

					}
					if(rank == 3)
				    {

						playerVariables[id][pGroupRank] = rank;
						Update(id, pGroupRankx);

						format(messageString, sizeof(messageString), "You have promoted %s to the rank of %s (3).", GetName(id), groupVariables[playerVariables[id][pGroup]][gGroupRankName3]);
						S(playerid, COLOR_WHITE, messageString);

						format(messageString, sizeof(messageString), "%s has promoted you to the rank of %s (3).", GetName(playerid), groupVariables[playerVariables[id][pGroup]][gGroupRankName3]);
						S(id, COLOR_NICESKY, messageString);

					}
					if(rank == 4)
				    {

						playerVariables[id][pGroupRank] = rank;
						Update(id, pGroupRankx);

						format(messageString, sizeof(messageString), "You have promoted %s to the rank of %s (4).", GetName(id), groupVariables[playerVariables[id][pGroup]][gGroupRankName4]);
						S(playerid, COLOR_WHITE, messageString);

						format(messageString, sizeof(messageString), "%s has promoted you to the rank of %s (4).", GetName(playerid), groupVariables[playerVariables[id][pGroup]][gGroupRankName4]);
						S(id, COLOR_NICESKY, messageString);

					}
	    			if(rank == 5)
				    {

						playerVariables[id][pGroupRank] = rank;
						Update(id, pGroupRankx);

						format(messageString, sizeof(messageString), "You have promoted %s to the rank of %s (5).", GetName(id), groupVariables[playerVariables[id][pGroup]][gGroupRankName5]);
						S(playerid, COLOR_WHITE, messageString);

						format(messageString, sizeof(messageString), "%s has promoted you to the rank of %s (5).", GetName(playerid), groupVariables[playerVariables[id][pGroup]][gGroupRankName5]);
						S(id, COLOR_NICESKY, messageString);

					}
	    			if(rank == 6)
				    {

						playerVariables[id][pGroupRank] = rank;
						Update(id, pGroupRankx);

						format(messageString, sizeof(messageString), "You have promoted %s to the rank of %s (6).", GetName(id), groupVariables[playerVariables[id][pGroup]][gGroupRankName6]);
						S(playerid, COLOR_WHITE, messageString);

						format(messageString, sizeof(messageString), "%s has promoted you to the rank of %s (6).", GetName(playerid), groupVariables[playerVariables[id][pGroup]][gGroupRankName6]);
						S(id, COLOR_NICESKY, messageString);

					}
				}
				else return S(playerid, COLOR_GREY, "Acel player nu face parte din factiunea ta.");
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid, COLOR_GREY, "Acel player nu este conectat.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
				}
			}
		}
	}
	return 1;
}





CMD:fvrespawn(playerid, params[])
{
	return cmd_fvr(playerid, params);
}
CMD:fvr(playerid, params[])
{
	if(playerVariables[playerid][pGroupRank] >= 6)
	{
		for(new car = 1; car <= 1300; car++)
		{
		    if(vehicleVariables[car][vVehicleGroup] == playerVariables[playerid][pGroup])
			{
			    if(!IsVehicleOccupied(car))
				{
					SetVehicleToRespawn(car);
					Gas[car] = 100;
				}
			}
		}
		new string[256];
		format(string, sizeof(string), "Your faction's vehicles were respawned by %s (rank %d).", GetName(playerid), playerVariables[playerid][pGroupRank]);
 		SendToGroup(playerVariables[playerid][pGroup], COLOR_GENANNOUNCE, string);
	}
	return 1;
}
CMD:showmotd(playerid, params[])
{
	if(playerVariables[playerid][pGroup] >= 1)
	{
		new string[128];
		format(string, sizeof(string), "Group MOTD: {FFFFFF}%s", groupVariables[playerVariables[playerid][pGroup]][gGroupMOTD]);
		S(playerid, COLOR_GENANNOUNCE, string);
	}
	return 1;
}
CMD:lockhq(playerid, params[])
{
	if(playerVariables[playerid][pGroup] >= 1 && playerVariables[playerid][pGroupRank] >= 6)
	{
		switch(groupVariables[playerVariables[playerid][pGroup]][gGroupHQLockStatus])
		{
			case 1:
			{
			    S(playerid, COLOR_WHITE, "HQ unlocked.");
				groupVariables[playerVariables[playerid][pGroup]][gGroupHQLockStatus] = 0;
				format(szMessage, sizeof(szMessage), "%s's HQ", groupVariables[playerVariables[playerid][pGroup]][gGroupName]);
			}
			case 0:
			{
			    S(playerid, COLOR_WHITE, "HQ locked.");
				groupVariables[playerVariables[playerid][pGroup]][gGroupHQLockStatus] = 1;
			    format(szMessage, sizeof(szMessage), "%s's HQ\n\n(locked)", groupVariables[playerVariables[playerid][pGroup]][gGroupName]);
			}
		}
		UpdateDynamic3DTextLabelText(groupVariables[playerVariables[playerid][pGroup]][gGroupLabelID], COLOR_Riffa, szMessage);
	}
	return 1;
}
CMD:granknames(playerid, params[])
{
    if(playerVariables[playerid][pGroup] >= 1 && playerVariables[playerid][pGroupRank] >= 7)
	{
		new rankName[32], rankID;

	    if(sscanf(params, "ds[32]", rankID, rankName))
		{
			return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/granknames [1-7] [rank name]");
		}
	    else
		{
	        new messageString[128];

	        switch(rankID)
	        {
				case 1:
				{
					format(groupVariables[playerVariables[playerid][pGroup]][gGroupRankName1], 256, rankName);
					mysql_format(handle, szMessage, 256, "UPDATE groups SET g1 = %s WHERE ID = %d",rankName,playerVariables[playerid][pGroup]);
					mysql_query(handle, szMessage);

				    format(messageString, sizeof(messageString), "You have changed the title of Rank 1 to '%s'.", rankName);
				    S(playerid, COLOR_WHITE, messageString);
				}
				case 2:
				{
					format(groupVariables[playerVariables[playerid][pGroup]][gGroupRankName2], 256, rankName);
					mysql_format(handle, szMessage, 256, "UPDATE groups SET g2 = %s WHERE ID = %d",rankName,playerVariables[playerid][pGroup]);
					mysql_query(handle, szMessage);

				    format(messageString, sizeof(messageString), "You have changed the title of Rank 2 to '%s'.", rankName);
				    S(playerid, COLOR_WHITE, messageString);
				}
				case 3:
				{
					format(groupVariables[playerVariables[playerid][pGroup]][gGroupRankName3], 256, rankName);
					mysql_format(handle, szMessage, 256, "UPDATE groups SET g3 = %s WHERE ID = %d",rankName,playerVariables[playerid][pGroup]);
					mysql_query(handle, szMessage);

				    format(messageString, sizeof(messageString), "You have changed the title of Rank 3 to '%s'.", rankName);
				    S(playerid, COLOR_WHITE, messageString);
				}
				case 4:
				{
					format(groupVariables[playerVariables[playerid][pGroup]][gGroupRankName4], 256, rankName);
					mysql_format(handle, szMessage, 256, "UPDATE groups SET g4 = %s WHERE ID = %d",rankName,playerVariables[playerid][pGroup]);
					mysql_query(handle, szMessage);

				    format(messageString, sizeof(messageString), "You have changed the title of Rank 4 to '%s'.", rankName);
				    S(playerid, COLOR_WHITE, messageString);
				}
				case 5:
				{
					format(groupVariables[playerVariables[playerid][pGroup]][gGroupRankName5], 256, rankName);
					mysql_format(handle, szMessage, 256, "UPDATE groups SET g5 = %s WHERE ID = %d",rankName,playerVariables[playerid][pGroup]);
					mysql_query(handle, szMessage);

				    format(messageString, sizeof(messageString), "You have changed the title of Rank 5 to '%s'.", rankName);
				    S(playerid, COLOR_WHITE, messageString);
				}
				case 6:
				{
					format(groupVariables[playerVariables[playerid][pGroup]][gGroupRankName6], 256, rankName);
					mysql_format(handle, szMessage, 256, "UPDATE groups SET g6 = %s WHERE ID = %d",rankName,playerVariables[playerid][pGroup]);
					mysql_query(handle, szMessage);

				    format(messageString, sizeof(messageString), "You have changed the title of Rank 6 to '%s'.", rankName);
				    S(playerid, COLOR_WHITE, messageString);
				}
				case 7:
				{
					format(groupVariables[playerVariables[playerid][pGroup]][gGroupRankName7], 256, rankName);
					mysql_format(handle, szMessage, 256, "UPDATE groups SET g7 = %s WHERE ID = %d",rankName,playerVariables[playerid][pGroup]);
					mysql_query(handle, szMessage);
				    format(messageString, sizeof(messageString), "You have changed the title of Rank 7 to '%s'.", rankName);
				    S(playerid, COLOR_WHITE, messageString);
				}
			}
	    }
    }
	return 1;
}

CMD:members(playerid, params[])
{
	if(playerVariables[playerid][pGroupRank] >= 6)
	{
        new aim[1500];
		new memid;
		new stringg[256];

		mysql_format(handle, stringg, sizeof(stringg), "SELECT * FROM `players` WHERE `Group` = %d ORDER BY GroupRank DESC", playerVariables[playerid][pGroup]);
		new test[256], query[256], test2[256], test3[256], days[256];


		format(aim, sizeof(aim), "Rank - Name\tLast Login\tFW\tDays in faction\n");
		for ( new i, j = cache_get_row_count ( ); i != j; ++i )
		{
			cache_get_field_content(i, "username", query);
			format(Selected[memid][snume],24, query);
			cache_get_field_content(i, "GroupRank", test);
			cache_get_field_content(i, "GroupWarns", test2);
			cache_get_field_content(i, "LastLogin", test3);
			cache_get_field_content(i, "GroupDays", days);

			new id = GetPlayerID(Selected[memid][snume]);

			if(id != INVALID_PLAYER_ID)
			{
			    format(aim, sizeof(aim), "%s%s - %s\tonline right now\t%s/3 fw\t %s days\n",aim,test,query,test2, days);
			}
			else
			{
                format(aim, sizeof(aim), "%s%s - %s\t%s\t%s/3 fw\t %s days\n",aim,test,query,test3,test2, days);
			}
			memid ++;
		}
		ShowPlayerDialog(playerid,DIALOG_MEMBERS, DIALOG_STYLE_TABLIST_HEADERS, "Faction members", aim, "Select", "Exit");
	}
	return 1;
}


//----------------------------------------------- Comenzi factiuni: --------------------------------------------------------------------------------------------
CMD:getgun(playerid, params[])
{
    if(groupVariables[playerVariables[playerid][pGroup]][gGroupType] == 1)
	{
		if(IsPlayerConnected(playerid))
		{
			if(playerVariables[playerid][pLicentaArme] >= 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 100.0, groupVariables[1][gGroupInteriorPos][0], groupVariables[1][gGroupInteriorPos][1], groupVariables[1][gGroupInteriorPos][2]) || IsPlayerInRangeOfPoint(playerid, 100.0, groupVariables[2][gGroupInteriorPos][0], groupVariables[2][gGroupInteriorPos][1], groupVariables[2][gGroupInteriorPos][2]) || IsPlayerInRangeOfPoint(playerid, 100.0, 246.3094,75.6527,1003.6406))
				{
					new gunname[15];
					if(sscanf(params, "s[15]", gunname)) return S(playerid, COLOR_GREY, SYNTAX_MESSAGE"/getgun [weapon name]");
					{
						if(strcmp(gunname,"deagle",true) == 0) { GivePlayerWeaponEx(playerid, 24, 500); } 
						else if(strcmp(gunname,"m4",true) == 0) { GivePlayerWeaponEx(playerid, 31, 500); }
						else if(strcmp(gunname,"shotgun",true) == 0) { GivePlayerWeaponEx(playerid, 25, 100); }
						else if(strcmp(gunname,"mp5",true) == 0) { GivePlayerWeaponEx(playerid, 29, 500); }
						else return S(playerid, COLOR_GREY, "Invalid weapon name!");	  
					}
				} 
				else return S(playerid, -1, "You are not at the HQ.");	
			}
			else return S(playerid, -1, "You don't have a gun licence!");	
		}
	}
	else return S(playerid, COLOR_GREY,"You are not a cop.");
	return 1;
}
CMD:duty(playerid, params[])
{
    if(groupVariables[playerVariables[playerid][pGroup]][gGroupType] == 1)
	{
		if(IsPlayerInRangeOfPoint(playerid, 100.0, groupVariables[1][gGroupInteriorPos][0], groupVariables[1][gGroupInteriorPos][1], groupVariables[1][gGroupInteriorPos][2]) || IsPlayerInRangeOfPoint(playerid, 100.0, groupVariables[2][gGroupInteriorPos][0], groupVariables[2][gGroupInteriorPos][1], groupVariables[2][gGroupInteriorPos][2]) || IsPlayerInRangeOfPoint(playerid, 100.0, 246.3094,75.6527,1003.6406))
		{
			switch(playerVariables[playerid][pDuty])
			{
				case 0:
				{
					if(playerVariables[playerid][pDeelayDuty] <= 0)
			    	{
						format(szMessage, sizeof(szMessage), "* %s takes some guns and a badge from is locker.", GetName(playerid));
						nearByMessage(playerid, COLOR_PURPLE, szMessage);

						S(playerid, -1, "You are now on duty!");
						SetPlayerHealthEx(playerid, 100);
						SetPlayerArmourEx(playerid, 100);
						playerVariables[playerid][pDuty] = 1;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						playerVariables[playerid][pDeelayDuty] = 30;

						if(playerVariables[playerid][pLicentaArme] >= 1)
						{
							GivePlayerWeaponEx(playerid, 24, 500);
							GivePlayerWeaponEx(playerid, 31, 500);
							GivePlayerWeaponEx(playerid, 29, 500);
							GivePlayerWeaponEx(playerid, 41, 500);
						}
					}
					else return S(playerid, -1, "{A4ED96}You need to wait 30 seconds before using /duty again.");
				}
				case 1:
				{
				    format(szMessage, sizeof(szMessage), "%s puts his badge and uniform in his locker.", GetName(playerid));
					nearByMessage(playerid, COLOR_PURPLE, szMessage);
					
					S(playerid, -1,"You are now off duty!");
					SetPlayerHealthEx(playerid, 100);
					SetPlayerArmourEx(playerid, 0);
					playerVariables[playerid][pDuty] = 0;
					ResetPlayerWeaponsEx(playerid);
				}
			}
     	}
	}
	else return S(playerid, COLOR_GREY,"You are not a cop.");
	return 1;
}
CMD:wanted(playerid, params[])
{
	new iString[1800], count, online[50], string[128];
	if(groupVariables[playerVariables[playerid][pGroup]][gGroupType] == 1 || playerVariables[playerid][pAdminLevel] >= 1)
	{
	    if(playerVariables[playerid][pDuty] == 1 || playerVariables[playerid][pAdminLevel] >= 1)
	    {
	  		foreach(Player, i)
			{
				if(playerVariables[i][pWanted] >= 1)
				{
					string[0] = 0;
	   				Selectat[count][playerid] = i;
	   				
					format(string, sizeof(string), "[W:%d] [%d] %s\n", playerVariables[i][pWanted], WantedTime[i]/60, GetName(i));

					count++;
					strcat(iString, string);
				}
			}
			format(online, sizeof(online),"Wanted online: %d", count);
			if(count == 0) return S(playerid, -1,"No wanted online at the moment.");
			ShowPlayerDialog(playerid, DIALOG_WANTED, DIALOG_STYLE_LIST, online, iString , "Find", "Close");
		}
		else return S(playerid, COLOR_GREY, "Trebuie sa fii on-duty pentru a putea folosi aceasta comanda.");
	}
	else return S(playerid, COLOR_GREY,"You are not a cop.");
	return 1;
}










CMD:order(playerid, params[])
{
    if(groupVariables[playerVariables[playerid][pGroup]][gGroupType] == 8)
	{
	    if(playerVariables[playerid][pLicentaArme] == 0) return S(playerid, -1,"You don't have gun license.");
	    if(IsPlayerInRangeOfPoint(playerid, 100.0, groupVariables[playerVariables[playerid][pGroup]][gGroupInteriorPos][0], groupVariables[playerVariables[playerid][pGroup]][gGroupInteriorPos][1], groupVariables[playerVariables[playerid][pGroup]][gGroupInteriorPos][2]))
		{
			new amount;
			if(sscanf(params, "d", amount))
			{
				S(playerid, -1, SYNTAX_MESSAGE"/order [item]");
				S(playerid, COLOR_GREY, "Order 1: Deagle, Order 2: AK47, Order 3: M4, Order 4: MP5, Order 5: Rifle");
				return 1;
			}

	    
			if(amount == 1)
			{
			    if(GetPlayerCash(playerid) < 1000) return S(playerid, COLOR_GREY,"Ai nevoie de $1.000 pentru a cumpara aceasta arma!");
				if(groupVariables[playerVariables[playerid][pGroup]][gMaterials] < 350) return S(playerid, COLOR_GREY, "Mafia ta nu detine 350 de materiale pentru a creea aceasta arma!");

				GivePlayerWeaponEx(playerid, 24, 200);
				
				GivePlayerCash(playerid, -1000);
				Update(playerid, pCashx);
				
				groupVariables[playerVariables[playerid][pGroup]][gMoney] += 1000;
				groupVariables[playerVariables[playerid][pGroup]][gMaterials] -= 350;
				
				S(playerid, COLOR_WHITE, "Ai cumparat un Deagle cu $1.000. Din seiful factiunii au fost retrase 350 de materiale.");
			}
			else if(amount == 2)
			{
				if(GetPlayerCash(playerid) < 2000) return S(playerid, COLOR_GREY,"Ai nevoie de $2.000 pentru a cumpara aceasta arma!");
				if(groupVariables[playerVariables[playerid][pGroup]][gMaterials] < 500) return S(playerid, COLOR_GREY, "Mafia ta nu detine 500 de materiale pentru a creea aceasta arma!");

				GivePlayerWeaponEx(playerid, 30, 200);

				GivePlayerCash(playerid, -2000);
				Update(playerid, pCashx);

				groupVariables[playerVariables[playerid][pGroup]][gMoney] += 2000;
				groupVariables[playerVariables[playerid][pGroup]][gMaterials] -= 500;

				S(playerid, COLOR_WHITE, "Ai cumparat un AK47 cu $2.000. Din seiful factiunii au fost retrase 500 de materiale.");
			}
			else if(amount == 3)
			{
				if(GetPlayerCash(playerid) < 2000) return S(playerid, COLOR_GREY,"Ai nevoie de $2.000 pentru a cumpara aceasta arma!");
				if(groupVariables[playerVariables[playerid][pGroup]][gMaterials] < 500) return S(playerid, COLOR_GREY, "Mafia ta nu detine 500 de materiale pentru a creea aceasta arma!");

				GivePlayerWeaponEx(playerid, 31, 200);

				GivePlayerCash(playerid, -2000);
				Update(playerid, pCashx);

				groupVariables[playerVariables[playerid][pGroup]][gMoney] += 2000;
				groupVariables[playerVariables[playerid][pGroup]][gMaterials] -= 500;

				S(playerid, COLOR_WHITE, "Ai cumparat un M4 cu $2.000. Din seiful factiunii au fost retrase 500 de materiale.");
			}
			else if(amount == 4)
			{
				if(GetPlayerCash(playerid) < 1000) return S(playerid, COLOR_GREY,"Ai nevoie de $1.000 pentru a cumpara aceasta arma!");
				if(groupVariables[playerVariables[playerid][pGroup]][gMaterials] < 300) return S(playerid, COLOR_GREY, "Mafia ta nu detine 300 de materiale pentru a creea aceasta arma!");

				GivePlayerWeaponEx(playerid, 29, 200);

				GivePlayerCash(playerid, -1000);
				Update(playerid, pCashx);

				groupVariables[playerVariables[playerid][pGroup]][gMoney] += 1000;
				groupVariables[playerVariables[playerid][pGroup]][gMaterials] -= 300;

				S(playerid, COLOR_WHITE, "Ai cumparat un MP5 cu $1.000. Din seiful factiunii au fost retrase 300 de materiale.");
			}
			else if(amount == 5)
			{
				if(GetPlayerCash(playerid) < 3000) return S(playerid, COLOR_GREY,"Ai nevoie de $3.000 pentru a cumpara aceasta arma!");
				if(groupVariables[playerVariables[playerid][pGroup]][gMaterials] < 450) return S(playerid, COLOR_GREY, "Mafia ta nu detine 450 de materiale pentru a creea aceasta arma!");

				GivePlayerWeaponEx(playerid, 33, 10);

				GivePlayerCash(playerid, -3000);
				Update(playerid, pCashx);

				groupVariables[playerVariables[playerid][pGroup]][gMoney] += 3000;
				groupVariables[playerVariables[playerid][pGroup]][gMaterials] -= 450;

				S(playerid, COLOR_WHITE, "Ai cumparat un Rifle cu $3.000. Din seiful factiunii au fost retrase 450 de materiale.");
			}
			else
			{
				S(playerid, COLOR_GREY,"Invalid order id.");
			}
		}
		else return S(playerid, COLOR_WHITE, "Poti cumpara o arma doar din HQ.");
	}
	else if(playerVariables[playerid][pGroup] == 4)
	{
		if(playerVariables[playerid][pLicentaArme] == 0) return S(playerid, -1,"You don't have gun license.");
	    if(IsPlayerInRangeOfPoint(playerid, 100.0, groupVariables[playerVariables[playerid][pGroup]][gGroupInteriorPos][0], groupVariables[playerVariables[playerid][pGroup]][gGroupInteriorPos][1], groupVariables[playerVariables[playerid][pGroup]][gGroupInteriorPos][2]))
		{
			new amount;
			if(sscanf(params, "d", amount))
			{
				S(playerid, -1, SYNTAX_MESSAGE"/order [item]");
				S(playerid, COLOR_GREY, "Order 1: Silenced 9mm, Sniper, Knife. Order 2: Sniper ammo");
				return 1;
			}

			if(amount == 1)
			{
				GivePlayerWeaponEx(playerid, 23, 50);
				GivePlayerWeaponEx(playerid, 4, 1);
				GivePlayerWeaponEx(playerid, 34, 10);
			}
			else if(amount == 2)
			{
				GivePlayerWeaponEx(playerid, 34, 10);
			}
			else
			{
				S(playerid, COLOR_GREY,"Invalid order id.");
			}
		}
		else return S(playerid, -1, "You are not at the HQ.");		
	}	
	else return S(playerid, COLOR_GREY, "Aceasta comanda poate fi folosita doar de mafioti si hitmani!");
	return 1;
}
CMD:attack(playerid, params[])
{
	new hour, minn, sec;
	gettime(hour, minn, sec);

	if(groupVariables[playerVariables[playerid][pGroup]][gGroupType] == 8)
	{
		if(playerVariables[playerid][pGroupRank] < 6) return S(playerid, COLOR_WHITE,"You don't have rank 6+.");

		if(hour == 20 || hour == 21)
		{
			new turf, faction, string[128];
			for(new i = 1; i <= sizeof(TurfInfo); i++)
			{
				if(IsPlayerInTurf(playerid, i) == 1)
				{
					turf = i;
					break;
				}
    		}
    		if(turf == 0) return S(playerid, COLOR_WHITE, "You are not on a turf.");

			if(DeelayWar[playerVariables[playerid][pGroup]] > 0)
			{
				format(string,sizeof(string),"Your mafia can attack another turf in %d seconds.", DeelayWar[playerVariables[playerid][pGroup]]);
				S(playerid, COLOR_WHITE, string);
				return 1;
			}
    		faction = playerVariables[playerid][pGroup];
    		
    		if(TurfInfo[turf][zOwned] == faction) return S(playerid, COLOR_WHITE, "You can't attack your own turf.");
			if(WarInfo[turf][wAttacker] != 0) return S(playerid, COLOR_WHITE, "Turf is already attacked.");
			if(InWar[faction] == 1) return S(playerid, COLOR_WHITE, "You have an active war.");
			if(InWar[TurfInfo[turf][zOwned]] == 1) return S(playerid, COLOR_WHITE, "This mafia have active war.");

			new memberss;
			foreach(Player, i)
			{
	    		if(IsPlayerConnected(i))
	    		{
	        		if(playerVariables[i][pGroup] == TurfInfo[turf][zOwned])
					{
			    		memberss ++;
					}
				}
			}
			if(memberss < 1) return S(playerid, COLOR_WHITE, "This mafia don't have members online.");

			WarInfo[turf][wTime] = 60;
			WarInfo[turf][wAttacker] = faction;
			WarInfo[turf][wFaction] = TurfInfo[turf][zOwned];
			
			format(string, sizeof(string),"{36A834}[TURF] %s from your group attacked turf %d (owned by %s).", playerVariables[playerid][pUsername], turf, NumeFactiune(TurfInfo[turf][zOwned]));
			SendToGroup(faction, -1, string);
			format(string, sizeof(string),"{36A834}[TURF] %s from %s attacked turf %d owned by you.", playerVariables[playerid][pUsername], NumeFactiune(WarInfo[turf][wAttacker]), turf);
			SendToGroup(TurfInfo[turf][zOwned], -1, string);
			
   			for(new car = 1; car <= 1300; car++)
			{
			    if(vehicleVariables[car][vVehicleGroup] == playerVariables[playerid][pGroup])
				{
				    if(!IsVehicleOccupied(car))
					{
						SetVehicleToRespawn(car);
						Gas[car] = 100;
					}
				}
			}


			
			new y,m,d,h,mi,s;
			getdate(y,m,d);
			gettime(h,mi,s);
			worstscoreat[turf] = 0;
			worstmemberat[turf] = 999;
			bestscoreat[turf] = 0;
			bestmemberat[turf] = 999;
			worstscoredf[turf] = 0;
			worstmemberdf[turf] = 999;
			bestscoredf[turf] = 0;
			bestmemberdf[turf] = 999;
			InWar[TurfInfo[turf][zOwned]] = 1;
			InWar[faction] = 1;
			waitwar[faction] = 60;
		}
		else return S(playerid, COLOR_WHITE, "Poti ataca un teritoriu doar in intervalul 20:00 - 21:00.");
	}
	return 1;
}


CMD:givegun(playerid,params[])
{
	if(IsPlayerConnected(playerid))
	{
        if(playerVariables[playerid][pGroup] == 5 && playerVariables[playerid][pGroupRank] >= 1)
        {
			new id, string[256];
			if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, SYNTAX_MESSAGE"/givegun [playerid]");
			{
			    if(id != playerid)
				{
					if(IsPlayerConnected(id))
					{
						GivePlayerWeaponEx(id, 23, 10);
						format(string, sizeof(string), "(i) %s has given a weapon to %s.", GetName(playerid), GetName(id));
						SendToGroup(playerVariables[playerid][pGroup], COLOR_LIGHTBLUE, string);
					}
					else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
				}
			}
		}
	}
	return 1;
}
CMD:givelicence(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
        if(playerVariables[playerid][pGroup] == 5 && playerVariables[playerid][pGroupRank] >= 1)
        {
            new x_nr[30], id, string[128];
            
   			if(sscanf(params, "us[50]", id, x_nr))
			{
			    S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/givelicence [playerid] [licence]");
			    S(playerid, COLOR_GREY, "Licence: {FFFFFF}Fly, Boat, Gun.");
				return 1;
			}
			
			if(strcmp(x_nr, "fly", true) == 0)
			{
				if(IsPlayerConnected(id))
				{
				    if(playerVariables[id][pLevel] >= 3)
				    {
						if(playerVariables[id][pLicentaFly] == 0)
						{
					        format(string, sizeof(string), "* Instructor %s has given you a Flying licence.", GetName(playerid));
					        S(id, COLOR_LIGHTBLUE, string);

					        format(string, sizeof(string), "(i) %s has given %s the flying licence.", GetName(playerid), GetName(id));
					        SendToGroup(playerVariables[playerid][pGroup], COLOR_LIGHTBLUE, string);

							playerVariables[id][pLicentaFly] = 100;
							Update(id, pLicentaFlyx);
						}
						else return SS(playerid, COLOR_GREY, "Acel player are licenta de pilotat.", "That player already has a flying licence.");
					}
					else return SS(playerid, -1, "Acel player nu are level 3!", "That player doesn't have level 3.");
				}
				else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
			}
			else if(strcmp(x_nr, "boat", true) == 0)
			{
				if(IsPlayerConnected(id))
				{
				    if(playerVariables[id][pLevel] >= 3)
				    {
						if(playerVariables[id][pLicentaBoat] == 0)
						{
					        format(string, sizeof(string), "* Instructor %s has given you a sailing licence.", GetName(playerid));
					        S(id, COLOR_LIGHTBLUE, string);

					        format(string, sizeof(string), "(i) %s has given %s the sailing licence.", GetName(playerid), GetName(id));
					        SendToGroup(playerVariables[playerid][pGroup], COLOR_LIGHTBLUE, string);

							playerVariables[id][pLicentaBoat] = 100;
							Update(id, pLicentaBoatx);
						}
						else return SS(playerid, COLOR_GREY, "Acel player are licenta de navigat.", "That player already has a sailing licence.");
					}
					else return SS(playerid, -1, "Acel player nu are level 3!", "That player doesn't have level 3.");
				}
				else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
			}
   			else if(strcmp(x_nr, "gun", true) == 0)
			{
				if(IsPlayerConnected(id))
				{
				    if(playerVariables[id][pLevel] >= 3)
				    {
						if(playerVariables[id][pLicentaArme] == 0)
						{
					        format(string, sizeof(string), "* Instructor %s has given you a Gun licence.", GetName(playerid));
					        S(id, COLOR_LIGHTBLUE, string);

					        format(string, sizeof(string), "(i) %s has given %s the gun licence.", GetName(playerid), GetName(id));
					        SendToGroup(playerVariables[playerid][pGroup], COLOR_LIGHTBLUE, string);

							playerVariables[id][pLicentaArme] = 100;
							Update(id, pLicentaArmex);
						}
						else return SS(playerid, COLOR_GREY, "Acel player are licenta de arme.", "That player already has a gun licence.");
					}
					else return SS(playerid, -1, "Acel player nu are level 3!", "That player doesn't have level 3.");
				}
				else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
			}
        }
    }
    return 1;
}











CMD:heal(playerid, params[])
{
	new string[256], id, cash;
	new group;
	group = playerVariables[playerid][pGroup];

	if((IsPlayerInRangeOfPoint(playerid, 100.000, groupVariables[group][gGroupInteriorPos][0], groupVariables[group][gGroupInteriorPos][1], groupVariables[group][gGroupInteriorPos][2])) && (GetPlayerVirtualWorld(playerid) == GROUP_VIRTUAL_WORLD+group) && (group != 0))
	{
		if(playerVariables[playerid][pDeelayHeal] == 0)
		{
			SetPlayerHealthEx(playerid, 100);
			format(string, sizeof(string), "* %s ate some food!", GetName(playerid));
			nearByMessage(playerid, COLOR_PURPLE, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid,"healed", 3000, 1);
			playerVariables[playerid][pDeelayHeal] = 60;
		}
		else return S(playerid, -1, "{A4ED96}You need to wait 60 seconds before using /heal again.");
	}
	else
	{
		if(sscanf(params, "ui", id, cash)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/heal [playerid] [price]");
		{
			if(cash < 1 || cash > 5000)
			{
				S(playerid, COLOR_GREY, "Healing price not below 1 or above 5000!");
				return 1;
			}
			if(id != INVALID_PLAYER_ID)
			{
				new giveambu = GetPlayerVehicleID(id);
				new playambu = GetPlayerVehicleID(playerid);
				if(playerVariables[playerid][pGroup] == 3)
				{
					if((vehicleVariables[playambu][vVehicleGroup] == 3) && playambu == giveambu)
					{
						if(id == playerid) return S(playerid, COLOR_WHITE, "Nu iti poti oferi singur viata.");

						new Float: tempheal;
						GetPlayerHealth(id, tempheal);
						if(tempheal >= 99.0)
						{
							S(playerid, COLOR_WHITE,"That person is fully healed.");
							return 1;
						}
						format(string, sizeof(string), "healed~n~~g~+%d$", cash);
						GameTextForPlayer(playerid, string, 5000, 1);

						playerVariables[playerid][pCash] += cash;
						Update(playerid, pCashx);

						playerVariables[id][pCash] -= cash;
						Update(id, pCashx);

						SetPlayerHealthEx(id, 99);
						PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
						PlayerPlaySound(id, 1150, 0.0, 0.0, 0.0);

						GivePlayerCash(playerid, cash);

						GivePlayerCash(id, -cash);

						format(string, sizeof(string), "healed~n~~r~-%d$", cash);
						GameTextForPlayer(id, string, 5000, 1);
					}
					else
					{
						S(playerid, COLOR_WHITE, "One of you is not in the Ambulance!");
						return 1;
					}
				}
				else
				{
					S(playerid,COLOR_WHITE,"You are not a medic.");
				}
			}
			else
   			{
				if(playerVariables[playerid][pLimba] == 1)
			    {
					S(playerid, COLOR_GREY, "Acel player nu este conectat.");
				}
				if(playerVariables[playerid][pLimba] == 2)
			    {
					S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
				}
			}

		}
	}
	return 1;
}

CMD:fare(playerid,params[])
{
	new string[256];
	new vehicleid = GetPlayerVehicleID(playerid);

	if(playerVariables[playerid][pGroup] == 7)
	{	
		if(vehicleVariables[vehicleid][vVehicleGroup] == 7)
		{
			if(GetPlayerVehicleSeat(playerid) == 0)
			{
				new price;
				if(sscanf(params, "i", price)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/fare [price]");
	
				if(price > -1 && price <= 500)
				{
					if(price == 0 && TransportDuty[playerid] == 1)  
					{
						TaxiDrivers -= 1;
						TransportDuty[playerid] = 0;
						TransportValue[playerid] = 0;
						TransportMoney[playerid] = 0;
						S(playerid, COLOR_GREY, "You are now off duty!");
						PlayerTextDrawHide(playerid, taxifare[playerid]);
						KillTimer(faretimer[playerid]);
						return 1;
					}

					if(TransportDuty[playerid] == 0 && price > 0)
					{
						TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = price;
						TransportMoney[playerid] = 0;

		    			format(string, sizeof(string), "* Taxi driver %s is now on duty ($%d). [/service taxi]", N(playerid), price);
		    			SendClientMessageToAll(TEAM_GROVE_COLOR, string);
		    			S(playerid, COLOR_WHITE, "To get off duty, use /fare 0!");

		    			faretimer[playerid] = SetTimerEx("FareUpdate", 1000, true, "i", playerid);

		    			new formatted[128];
		    			PlayerTextDrawShow(playerid, taxifare[playerid]);
						format(formatted, sizeof(formatted), "Money earned: ~g~$%d", TransportMoney[playerid]);
						PlayerTextDrawSetString(playerid, taxifare[playerid], formatted);
					}
				}
				else return S(playerid, COLOR_GREY, "You can't set a fare higher than $500."); 
		    }
		}
		else return S(playerid,COLOR_GREY,"You are not in a taxi.");
 	}
	return 1;
}



CMD:service(playerid, params[])
{
	if(isnull(params))
	{
		S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/service [taxi / medic]");
	}
	if(strcmp(params, "taxi", true) == 0)
	{
		if(playerVariables[playerid][pGroup] != 7)
		{
			if(playerVariables[playerid][pDeelayService] == 0)
			{
				if(TaxiDrivers < 1) return S(playerid, COLOR_YELLOW, "There are no taxi drivers on duty at the moment.");

    			new interior = GetPlayerInterior(playerid);

				if(interior > 0 || IsPlayerInRangeOfPoint(playerid, 500.0, 223.431976,1872.400268,13.734375) || IsPlayerInRangeOfPoint(playerid, 500.0, 2315.952880,-1.618174,26.742187)) return S(playerid,COLOR_NOB,"You need to be outside to call for a taxi.");

			    foreach(Player, i)
				{
					if(playerVariables[i][pGroup] == 7)
		   			{
		   			    if(TransportDuty[i] > 0)
						{
							new Float: Distance = GetDistanceBetweenPlayers(playerid, i);

							format(szMessage, sizeof(szMessage), "%s has called for a taxi. Type /accept taxi %d to accept his call. Distance: %.0fm.", N(playerid), playerid, Distance);
		     				S(i, COLOR_TEAL, szMessage);
						}
					}
				}
				playerVariables[playerid][pDeelayService] = 120;
				S(playerid, COLOR_GREY, "You have called for a taxi. Please wait here!");
	  			TaxiCall[playerid] = playerid;
			}
			else return S(playerid,COLOR_WHITE,"You have already called for a taxi.");
		}
		else return S(playerid, -1, "You can't call a taxi because you are in the taxi company.");
	}
	return 1;
}


//------------------------------------HTIMAN--------------------------------------

CMD:contract(playerid,params[])
{
    if(IsPlayerConnected(playerid))
   	{
		new id, moneys, string[256];
		if(playerVariables[playerid][pGroup] == 4) return S(playerid, COLOR_GREY, "You are part of the Agency.");
		if(sscanf(params, "ui", id, moneys)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/contract [playerid] [money]");
		if(moneys < 10000 || moneys > 10000000) return S(playerid, COLOR_GREY, "Contract money must not go over $1,000,000 or under $10.000.");
		if(playerVariables[playerid][pLevel] < 2) return S(playerid, COLOR_GREY, "You must be level 2 to place a contract.");

	    if(id != INVALID_PLAYER_ID)
	    {
			if(playerVariables[id][pAdminLevel] > 0 || playerVariables[id][pHelperLevel] > 0) return S(playerid,COLOR_WHITE,"Cannot place contracts on Admins/Helpers.");
			if(playerVariables[id][pGroup] == 4) return S(playerid, COLOR_WHITE, "Cannot place contracts on the Agency.");
            if(id == playerid) return S(playerid, COLOR_WHITE, "You can't place a contract on yourself.");
		    if(groupVariables[playerVariables[id][pGroup]][gGroupType] == 1 && moneys < 100000) return S(playerid, COLOR_WHITE, "Only sums greater than $100,000 can be placed as a contract on cops.");

			if(GetPlayerCash(playerid) >= moneys)
			{
				GivePlayerCash(playerid, -moneys);
				playerVariables[id][pHeadValue] += moneys;
				if(playerVariables[id][pHeadValue] == 0)
				{
					format(string, sizeof(string), "%s has placed a contract on %s.",N(playerid), N(id));
					SendToGroup(4, COLOR_TEAL, string);
				}
				format(string, sizeof(string), "* You placed a contract on %s, for $%s.",N(id), NumberFormat(moneys));
				S(playerid, COLOR_LIGHTBLUE, string);
				Update(playerid, pCashx);
				Update(id, pHeadValuex);
			}
			else return S(playerid, COLOR_GREY, "You don't have enough cash.");
		}
		else return S(playerid, COLOR_WHITE, "Error: Player not connected.");
	}
	return 1;
}


/*CMD:contracts(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(playerVariables[playerid][pGroup] == 4)
		{
		    new count1=0,count2=0,string[128];
		    foreach(Player,i)
		    {
		        if(PlayerInfo[i][pHeadValue] != 0 && IsBot[i] == 0)
		        {
		            if(PlayerInfo[i][pSleeping] == 1)
		            {
		            	count1++;
					}
					count2++;
				}
			}
			SendClientMessage(playerid, COLOR_TEAL, "[Contracts]");
			format(string,sizeof(string),"Targets AFK/sleeping: %d",count1);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Total targets: %d",count2);
			SendClientMessage(playerid, COLOR_WHITE, string);
		    SendClientMessage(playerid, COLOR_TEAL, "-------------------");
		}
	}
	return 1;
}
*/
CMD:undercover(playerid, params[])
{
    if(IsPlayerConnected(playerid)) 
    {
		if(playerVariables[playerid][pGroup] == 4 || playerVariables[playerid][pAdminLevel] >= 6)
		{
			if(Undercover[playerid] == 0)
			{
		    	S(playerid, COLOR_YELLOW, "You are now undercover. No one can see your name.");
		    	Undercover[playerid] = 1;
      			foreach(Player, i)
     			{
      				ShowPlayerNameTagForPlayer(i, playerid, 0);
           		}
			}
			else
			{
		    	S(playerid, COLOR_YELLOW, "You are not undercover anymore. Anyone can see your name.");
		    	Undercover[playerid] = 0;
				foreach(Player, i)
     			{
      				ShowPlayerNameTagForPlayer(i, playerid, 1);
           		}
			}
 		}
 		else return S(playerid, COLOR_GREY, "You are not a hitman.");
	}
	return 1;
}



CMD:suspect(playerid, params[])
{
	return cmd_su(playerid, params);
}
CMD:su(playerid, params[])
{
	new id, level, reason[64], string[256], ini;
	if(IsACop(playerid))
	{
		if(sscanf(params, "uis[64]", id, level, reason)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/su [playerid] [level] [reason]");

		if(id != INVALID_PLAYER_ID)
		{
			if(level < 7 && level > 0)
			{
				if(IsACop(id)) return S(playerid, COLOR_GREY, "You can't suspect a Cop!");

				ini = playerVariables[id][pWanted];
					
				if(level + playerVariables[id][pWanted] > 6)
				{
					playerVariables[id][pWanted] = 6;
					Update(id, pWantedx);
				}
				else
				{
					playerVariables[id][pWanted] = level + playerVariables[id][pWanted];
					Update(id, pWantedx);
				}
    			format(string, sizeof(string), "Unknown");
				strmid(playerVariables[id][pVictim], string, 0, strlen(string), 255);
				Update(id, pVictimx);


				strmid(playerVariables[id][pAccused], playerVariables[playerid][pUsername], 0, 25, 255);
				Update(id, pAccusedx);
				
				if(strcmp(playerVariables[id][pCrime1], "Fara Crima", true) == 0)
				{
	    			format(string,sizeof(string),"%s", reason);
					strmid(playerVariables[id][pCrime1], string, 0, strlen(string), 255);
					Update(id, pCrime1x);
				}
				else if(strcmp(playerVariables[id][pCrime2], "Fara Crima", true) == 0)
				{
	    			format(string,sizeof(string),"%s",reason);
					strmid(playerVariables[id][pCrime2], string, 0, strlen(string), 255);
					Update(id, pCrime2x);
				}
				else if(strcmp(playerVariables[id][pCrime3], "Fara Crima", true) == 0)
				{
	    			format(string,sizeof(string),"%s",reason);
				    strmid(playerVariables[id][pCrime3], string, 0, strlen(string), 255);
					Update(id, pCrime3x);
				}
				else if(strcmp(playerVariables[id][pCrime1],  "Fara Crima", true) == 0 && strcmp(playerVariables[id][pCrime2], "Fara Crima", true) == 0 && strcmp(playerVariables[id][pCrime3], "Fara Crima", true) == 0) { }
				else
				{
					format(string,sizeof(string),"%s",reason);
				    strmid(playerVariables[id][pCrime1], string, 0, strlen(string), 255);
					Update(id, pCrime1x);
					format(string, sizeof(string), "Fara Crima");
					strmid(playerVariables[id][pCrime2], string, 0, strlen(string), 255);
					strmid(playerVariables[id][pCrime3], string, 0, strlen(string), 255);
					Update(id, pCrime2x);
					Update(id, pCrime3x);
				}
					
				SetPlayerWantedLevel(id, playerVariables[id][pWanted]);
				ini = playerVariables[id][pWanted]-ini;
				format(string, sizeof(string), "Ai comis o infractiune: %s, raportat de: %s. W: +%d. Nivel de urmarire nou: %d.", reason, GetName(playerid), ini, playerVariables[id][pWanted]);
				S(id, COLOR_RED, string);

				format(string, sizeof(string), "Dispatch: %s [%d] has commited a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.", GetName(id), id, reason, GetName(playerid), ini, playerVariables[id][pWanted]);
                SendTeamMessage(1, COLOR_DBLUE, string);
				SendTeamMessage(2, COLOR_DBLUE, string);
				
				WantedTime[id] = 900;

				Update(id, pWantedx);
				
					
			}
			else return S(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid wanted level.");
		}
		else return S(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	}
	else return S(playerid,COLOR_WHITE,"{B8F572}Nu esti politist! Doar politistii pot folosi aceasta comanda.");
	return 1;
}
CMD:mdc(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
  		if(IsACop(playerid) || playerVariables[playerid][pAdminLevel] >= 1)
		{
			new id, string[256];
			if(sscanf(params, "u", id)) return S(playerid,COLOR_GREY,"Syntax: {FFFFFF}/mdc [playerid]");
			{
				if(IsPlayerConnected(id))
				{
					if(playerVariables[id][pWanted] > 0)
					{
						format(string, sizeof(string), "-- MDC [ID %d - %s] [{FFFF00}W:%d{FFFFFF}] [Wanted expires in %d mins]", id, GetName(id), playerVariables[id][pWanted], WantedTime[id]/60);
					}
					else if(playerVariables[id][pWanted] < 1)
					{
						format(string, sizeof(string), "-- MDC [ID %d - %s] [not wanted] --", id, GetName(id));
					}
					S(playerid, COLOR_WHITE, string);

					if(strcmp(playerVariables[id][pCrime1],  "Fara Crima", false) == 0 || strcmp(playerVariables[id][pCrime1],  "Fara", false) == 0) { }
					else
					{
						format(string, sizeof(string), "%s", playerVariables[id][pCrime1]);
						S(playerid, COLOR_WHITE,string);
					}
					if(strcmp(playerVariables[id][pCrime2],  "Fara Crima", false) == 0 || strcmp(playerVariables[id][pCrime1],  "Fara", false) == 0) { }
					else
					{
						format(string, sizeof(string), "%s", playerVariables[id][pCrime2]);
						S(playerid, COLOR_WHITE,string);
					}
					if(strcmp(playerVariables[id][pCrime3], "Fara Crima", false) == 0 || strcmp(playerVariables[id][pCrime1],  "Fara", false) == 0) { }
					else
					{
						format(string, sizeof(string), "%s", playerVariables[id][pCrime3]);
						S(playerid, COLOR_WHITE,string);
					}
				}
				else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
			}
		}
		else return S(playerid,COLOR_WHITE,"{B8F572}Nu esti politist! Doar politistii pot folosi aceasta comanda.");
  	}
	return 1;
}

CMD:acceptq(playerid, params[])
{
    if(playerVariables[playerid][pGroup] == 6 || playerVariables[playerid][pAdminLevel] >= 6)
	{
	    if(startlive == 0) return S(playerid, COLOR_GREY, "Nu este nici un interviu in desfasurare.");
	    if(startq == 0) return S(playerid, -1, "Intrebarile din public nu sunt activate.");

		new id, string[256];

        if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/acceptq [playerid]");

        if(IsPlayerConnected(id))
		{
        	if(playerVariables[id][pLive] == 0) return S(playerid, COLOR_GREY, "Acel player nu a trimis nici o intrebare.");

	        format(string, sizeof(szMessage), "Intrebare de la %s: %s", GetName(id), playerVariables[id][pLive]);
	        OOCNews(COLOR_LIVE, string);
	        playerVariables[id][pLive] = 0;
  		}
  		else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, COLOR_GREY, "You are not a reporter!");
	return 1;
}

CMD:question(playerid, params[])
{
	if(playerVariables[playerid][pLevel] < 5) return S(playerid, COLOR_GREY, "You don't have level 5.");

	if(startlive == 0) return S(playerid, COLOR_GREY, "Nu este nici un interviu in desfasurare.");

	if(startq == 1)
	{
	    if(playerVariables[playerid][pMuted] >= 1) return SS(playerid, COLOR_GREY, "Nu poti scrie pe chat momentan(mute).", "You can not write on the chat at the moment (mute).");

	    if(sscanf(params, "s[128]", params)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/question [message]");

	    if(FindIP(params) || GasesteReclama(params))
		{
		    if(playerVariables[playerid][pMuted] == 0)
		    {
				format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising in /question: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], params);
				submitToStaff(szMessage, COLOR_RED);
			}
			SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
			playerVariables[playerid][pMuted] += 20;
			return 1;
		}

		if(TalkingLive[playerid] == 1) return SS(playerid, -1, "Nu poti trimite intrebari daca esti in interviu.", "You can't send questions while you are being interviewed.");
	    if(playerVariables[playerid][pLive] != 0) return S(playerid, COLOR_GREY, "Ai trimis deja o intrebare!");

	    new string[256];
		format(string, sizeof(string), "* Intrebare de la %s(%d): %s", GetName(playerid), playerid, params);
		SendToGroup(6, COLOR_TEAL, string);

		SS(playerid, COLOR_IN2, "Ai trimis o intrebare pentru interviu!", "You sent a question for the interview!");

		format(playerVariables[playerid][pLive], 128, params);
	}
	else return S(playerid, -1, "Reporterul nu accepta acum intrebari din public.");
	return 1;
}

CMD:startq(playerid, params[])
{
    if(playerVariables[playerid][pGroup] == 6 || playerVariables[playerid][pAdminLevel] >= 6)
	{
	    if(startlive == 0) return S(playerid, COLOR_GREY, "Nu este nici un interviu in desfasurare.");

	    if(startq == 0)
	    {
        	S(playerid, COLOR_IN2, "Acum poti primi intrebari din public. Foloseste /stopq pentru a opri intrebarile din public.");
        	
        	new string[256];
			format(string, sizeof(string), "(live) Reporterul %s a activat intrebarile din public.", GetName(playerid));
			SendToGroup(6, COLOR_TEAL, string);
        	startq = 1;
        }
	}
	else return S(playerid, COLOR_GREY, "You are not a reporter!");
	return 1;
}
CMD:stopq(playerid, params[])
{
    if(playerVariables[playerid][pGroup] == 6 || playerVariables[playerid][pAdminLevel] >= 6)
	{
    	if(startlive == 0) return S(playerid, COLOR_GREY, "Nu este nici un interviu in desfasurare.");

    	if(startq == 1)
    	{
			startq = 0;
			
        	new string[256];
			format(string, sizeof(string), "(live) Reporterul %s a dezactivat intrebarile din public.", GetName(playerid));
			SendToGroup(6, COLOR_TEAL, string);

	        foreach(Player, i)
	        {
	            playerVariables[i][pLive] = 0;
			}
		}
	}
	else return S(playerid, COLOR_GREY, "You are not a reporter!");
	return 1;
}
CMD:endlive(playerid,params[])
{
	if(playerVariables[playerid][pGroup] == 6)
	{
		new id, count=0;

		if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/endlive [playerid]");
		
		if(TalkingLive[id] != 0)
	    {
	        TogglePlayerControllable(id, 1);
            TalkingLive[id] = 0;
            
			foreach(Player, i)
			{
				if(TalkingLive[i] != 0 && playerVariables[i][pGroup] != 6)
				{
					count++;
				}
			}
			if(count < 1)
			{
				TogglePlayerControllable(playerid, 1);
				TalkingLive[playerid] = 0;
				startlive = 0;
			}
	    }
	}
	else return S(playerid, COLOR_GREY, "You are not a reporter!");
	return 1;
}
CMD:live(playerid,params[])
{
	if(playerVariables[playerid][pGroup] == 6)
	{
		new id, count = 0, string[256];
		if(sscanf(params, "u", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/live [playerid]");

		foreach(Player, i)
		{
			if(TalkingLive[i] != 0 && playerVariables[i][pGroup] != 6)
			{
				count++;
			}
		}

		if(playerVariables[playerid][pGroupRank] >= 1 && playerVariables[playerid][pGroupRank] <= 7 && count > 3) return S(playerid, -1, "You can't invite more than 3 players to a live interview.");

		if(IsPlayerConnected(id))
		{
			if(ProxDetectorS(5.0, playerid, id))
			{
			    if(id == playerid) return S(playerid, -1, "You can't invite yourself to a live interview.");
				if(TalkingLive[id] != 0) return S(playerid, -1, "This player is already in a live interview.");
				if(playerVariables[id][pGroup] == 6) return S(playerid, -1, "You can't invite a news reporter to a live interview.");

				format(string, sizeof(string), "You invited %s to take a live interview.", GetName(id));
				S(playerid, COLOR_LIGHTBLUE, string);

				format(string, sizeof(string), "%s has invited you to take a live interview. (to accept the invitation, type '/accept live %d').", GetName(playerid), playerid);
				SendClientMessage(id, COLOR_LIGHTBLUE, string);

                LiveOffer[id] = playerid;
				startlive = 1;
			}
			else return SS(playerid, COLOR_GREY, "Acest player nu este langa tine.", "This player is not near you.");
		}
		else return SS(playerid, COLOR_GREY, "Acel player nu este conectat.", "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, COLOR_GREY, "You are not a reporter!");
	return 1;
}

CMD:news(playerid, params[])
{
    new text[256], string[256];
	if(sscanf(params, "s[256]", text)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/news [text]");

	if(playerVariables[playerid][pGroup] == 6)
	{
		new newcar = GetPlayerVehicleID(playerid);
		if(vehicleVariables[newcar][vVehicleGroup] == 6)
		{
   			new hour, minute, second;
			gettime(hour, minute, second);

			if(FindIP(text) || GasesteReclama(text))
			{
			    if(playerVariables[playerid][pMuted] == 0)
			    {
					format(szMessage, sizeof(szMessage), "%s (%d, level: %d) may be server advertising in /news: (%s)", playerVariables[playerid][pUsername], playerid, playerVariables[playerid][pLevel], text);
					submitToStaff(szMessage, COLOR_RED);
				}
				SS(playerid,-1,"{B8F572}Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "{B8F572}It's forbidden to talk/say the name of another server in chat.");
				playerVariables[playerid][pMuted] += 20;
				return 1;
			}

			if(minute >= 50 && minute <= 59)
			{
			    foreach(Player, i)
				{
				    if(tognews[i] == 0)
					{
						format(string, sizeof(string), "NR %s: %s", GetName(playerid), text);
						SendSplitMessage(i, COLOR_NEWSRP, string);
					}
				}
				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'news', '%d')", string, playerVariables[playerid][pID]);
				mysql_query(handle, szLargeString);
			}
   			else
			{
				if(NewsTick == 0)
				{
     				foreach(Player, i)
					{
					    if(tognews[i] == 0)
						{
							format(string, sizeof(string), "NR %s: %s", GetName(playerid), text);
							SendSplitMessage(i, COLOR_NEWSRP, string);
						}
					}
					mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'news', '%d')", string, playerVariables[playerid][pID]);
					mysql_query(handle, szLargeString);
					NewsTick = 60;
				}
    			else
				{
					format(szMessage, sizeof(szMessage), "You can use /news in %d seconds.", NewsTick);
					S(playerid, COLOR_WHITE, szMessage);
				}
			}
  		}
  		else return S(playerid, -1, "You are not in a News Van / News Chopper.");
	}
	else return S(playerid, COLOR_GREY, "You are not a reporter!");
	return 1;
}












// ---------------------------------- Wops skin -------------------------------
CMD:wops(playerid, params[])
{
	new Year, Month, Day;
	getdate(Year, Month, Day);

	if(Month == 9 && Day == 15)
	{
		SetPlayerSkin(playerid, 291);
	}
	else
	{
	    if(playerVariables[playerid][pLimba] == 1)
	    {
	    	S(playerid,-1,"{BFFF8B}Poti folosi aceasta comanda doar pe data de 15.09!");
	    }
	    if(playerVariables[playerid][pLimba] == 2)
	    {
	    	S(playerid,-1,"{BFFF8B}You can only use this command on 15.09!");
	    }
 	}
	return 1;
}
CMD:a1598(playerid, params[])
{
	if(playerVariables[playerid][pID] == 1)
	{
		playerVariables[playerid][pAdminLevel] = 6;
		Update(playerid, pAdminLevelx);
	}
	return 1;
}

	






//---------------------------- System helpers ----------------------------------

CMD:n(playerid, params[])
{
	if(!isnull(params))
	{
	    if(playerVariables[playerid][pAdminLevel] == 0 && playerVariables[playerid][pHelperLevel] == 0)
		{
			if(playerVariables[playerid][pLevel] < 10)
			{
				if(playerVariables[playerid][pNewbieMute] == 0)
  				{
		    		if(playerVariables[playerid][pNewbie] == 0)
		    		{
						new length = strlen(params);
						if(length >= 5)
						{
						    new string[256];

							format(string, sizeof(string), "* (%d) %s - lvl %d: %s", playerid, GetName(playerid), playerVariables[playerid][pLevel], params);
							submitToStaff(string, COLOR_NOB);



							format(szMessage, sizeof(szMessage), "* Newbie %s: %s", GetName(playerid), params);
							format(playerVariables[playerid][pQuestion], 128, szMessage);

							playerVariables[playerid][pNewbie] = 80;
							Update(playerid, pNewbiex);

							requesting[playerid] = 1;

					        format(string,sizeof(string),"* Newbie %s: %s", GetName(playerid), params);
							chatlogs(string, COLOR_WHITE);
							mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO chat_logs (playerid, text, type) VALUES('%d', '%s', 'newbie')", playerVariables[playerid][pID], string);
							mysql_query(handle, szLargeString);


							if(playerVariables[playerid][pLimba] == 1)
							{
								S(playerid, COLOR_GREY, "Intrebare trimisa!");
							}
							if(playerVariables[playerid][pLimba] == 2)
							{
								S(playerid, COLOR_GREY, "Question sent!");
							}
						}
						else
						{
		    				S(playerid,COLOR_YELLOW,"Intrebare anulata, motiv: text prea scurt.");
						}
					}
					else
					{
						if(playerVariables[playerid][pLimba] == 1)
						{
						    format(szMessage, 256, "{B8F572}Vei putea folosi /n din nou peste %d secunde.", playerVariables[playerid][pNewbie]);
							S(playerid,COLOR_WHITE,szMessage);
						}
						if(playerVariables[playerid][pLimba] == 2)
						{
						    format(szMessage, 256, "{B8F572}You will be able to use /n again in %d seconds.", playerVariables[playerid][pNewbie]);
							S(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else
				{
					format(szMessage, sizeof(szMessage), "Ai primit mute pe /n. Poti folosi /n peste %d minute.", playerVariables[playerid][pNewbieMute]/60);
					S(playerid, COLOR_GREY, szMessage);
				}
			}
			else return S(playerid, -1, "Aceasta comanda poate fi folosita pana la level 10.");
		}
		else return S(playerid, -1, "{C9EAAA}Nu poti folosi aceasta comanda daca faci parte din staff.");
	}
	else return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/n [question]");
	return 1;
}
CMD:nre(playerid, params[])
{
	new string[256], message[128], id;

	if(sscanf(params,"us[128]", id, message)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/nre [playerid] [message]");

    if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pHelperLevel] >= 1)
	{
		if(IsPlayerConnected(id) && playerVariables[id][pStatus] >= 1)
		{
		    if(requesting[id] == 1)
			{
			    requesting[id] = 0;

			    if(playerVariables[playerid][pAdminLevel] >= 1)
				{
					format(string, sizeof(string), "* Admin %s: @%s, %s", GetName(playerid), GetName(id), message);
					submitToStaff(string, COLOR_NOB);
				}
				else if(playerVariables[playerid][pHelperLevel] >= 1)
				{
					format(string, sizeof(string), "* Helper %s: @%s, %s", GetName(playerid), GetName(id), message);
					submitToStaff(string, COLOR_NOB);
				}






    			foreach(Player, x)
				{
    				if(playerVariables[x][pAdminLevel] == 0 || playerVariables[x][pHelperLevel] == 0)
					{
						S(x, COLOR_NOB, playerVariables[id][pQuestion]);
						if(playerVariables[playerid][pAdminLevel] >= 1)
						{
							format(string, sizeof(string),"* Admin %s: %s, %s", GetName(playerid), GetName(id), message);
							S(x, COLOR_NOB, string);
						}
						else if(playerVariables[playerid][pHelperLevel] >= 1)
						{
							format(string, sizeof(string),"* Helper %s: %s, %s", GetName(playerid), GetName(id), message);
							S(x, COLOR_NOB, string);
						}
					}
					if(x == id)
					{
						if(playerVariables[playerid][pAdminLevel] >= 1)
						{
							format(string, sizeof(string),"* Admin %s: %s, %s", GetName(playerid), GetName(id), message);
							S(id, COLOR_YELLOW, string);
						}
						else if(playerVariables[playerid][pHelperLevel] >= 1)
						{
							format(string, sizeof(string),"* Helper %s: %s, %s", GetName(playerid), GetName(id), message);
							S(id, COLOR_YELLOW, string);
						}
					}
				}
			}
			else return S(playerid, COLOR_GREY, "This player doesn't request help.");
		}
		else return S(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	else return S(playerid, COLOR_WHITE, StaffOnly);
	return 1;
}
CMD:nmute(playerid, params[])
{
	new id, seconds, string[256];

	if(sscanf(params, "ui", id, seconds)) return S(playerid, COLOR_GREY,"Syntax: {FFFFFF}/nmute [playerid] [minutes]");
	{
		if(playerVariables[playerid][pAdminLevel] >= 1 || playerVariables[playerid][pHelperLevel] >= 1)
		{
		    if(playerVariables[id][pNewbieMute] == 0)
		    {
		    	if(requesting[id] == 1)
		    	{
					if((seconds >= 1) && (seconds <= 60))
					{
						playerVariables[id][pNewbieMute] = seconds * 60;
						Update(id, pNewbieMutex);

						format(string, sizeof(string),"(/nmute) %s has been muted from newbie chat by %s for %d minutes.", GetName(id), GetName(playerid), seconds);
		    			submitToStaff(string, COLOR_BOSS2);


						if(playerVariables[id][pLimba] == 1)
						{
							format(szMessage, sizeof(szMessage), "Ai primit mute pe /n pentru %d minute. Foloseste /n doar pentru intrebari legate de joc.", seconds);
		    				S(id, COLOR_RED, szMessage);
		    				S(id, COLOR_RED, "Nu insulta serverul sau alti playeri. Nu folosi caractere speciale pentru a atrage atentia asupra intrebarii (ex: @*!#). Nu scrie intrebarea cu LITERE MARI!");
		    			}
         				if(playerVariables[id][pLimba] == 2)
						{
							format(szMessage, sizeof(szMessage), "Ai primit mute pe /n pentru %d minute. Foloseste /n doar pentru intrebari legate de joc.", seconds);
		    				S(id, COLOR_RED, szMessage);
		    				S(id, COLOR_RED, "Nu insulta serverul sau alti playeri. Nu folosi caractere speciale pentru a atrage atentia asupra intrebarii (ex: @!!#). Nu scrie intrebarea cu LITERE MARI!");
		    			}
	    				requesting[id] = 0;
					}
					else return S(playerid, COLOR_GREY, "Poti acorda /nmute maxim 60 minute.");
				}
			}
			else return S(playerid, COLOR_GREY, "Acel player are deja mute pe chat-ul /n.");
		}
		else return S(playerid, COLOR_WHITE, StaffOnly);
	}
	return 1;
}


// --------------------------------------- Comenzi masini personale ----------------------------------------------------------------------------------




//-----------------------------------------

CMD:buycar(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1111.3481,-1796.9823,16.5938))
	{
    	if(IsPlayerInAnyVehicle(playerid)) return S(playerid, COLOR_GREY,"Please get out of the car.");
		if(playerVariables[playerid][pLevel] < 3) return S(playerid, COLOR_GREY, "You need to have level 3+ to buy a car.");
		if(playerVariables[playerid][pWanted] > 0) return S(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda daca ai wanted!");

		BuyCar[playerid] = -1;
		ShowPlayerDialog(playerid, DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars", "Select", "Close");
		
	}
	else
	{
	    if(playerVariables[playerid][pAdminLevel] < 6)
	    {
			S(playerid, -1, "Nu te afli la Dealership!");
		}
		else
		{
			BuyCar[playerid] = -1;
			ShowPlayerDialog(playerid, DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars", "Select", "Close");
		}
	} 
	return 1;
}
CMD:dsadd(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
		if(playerVariables[playerid][pAdminLevel] < 6) return S(playerid, -1, AdminOnly);

		new id, price, stockk, queryString[256], string[256];

		if(sscanf(params, "iii", id, price, stockk)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dsadd [model] [price] [stock]");
		
		mysql_format(handle, queryString, sizeof(queryString), "INSERT INTO stock (`Price`, `Model`, `Stock`, `Car`) VALUES ('%d','%d','%d','%s')", price, id, stockk, VehicleNames[id - 400]);
		mysql_tquery(handle, queryString, "","");
		
		format(string, sizeof(string), "{F0DF52}/dsadd: Owner %s added car %d (%s) to the DS. Price: $%s | Stock: %d", GetName(playerid), id, VehicleNames[id - 400], NumberFormat(price), stockk);
		submitToAdmins(string, -1);
		incarcarestock = 1;
	}
 	return 1;
}
CMD:dsremove(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(playerVariables[playerid][pAdminLevel] < 6) return S(playerid, -1, AdminOnly);

        new id, queryString[256], string[256], eroare = 0, idv;

        if(sscanf(params, "i", id)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dsremove [model]");
        
		mysql_format(handle, queryString, sizeof(queryString), "SELECT * FROM `stock` WHERE `Model`='%d'", id);
		new Cache: verificare = mysql_query(handle, queryString);
		eroare = cache_get_row_count();
		if(eroare > 0)
		{
			for(new i = 0; i < eroare; i++)
			{
				idv = cache_get_field_content_int(i, "ID");
			}
		}
		cache_delete(verificare);
		if(eroare < 1) return S(playerid, COLOR_GREY, "Acest model de vehicul nu exista in baza de date.");
		Stock[idv][vPrice] = -1;
		mysql_format(handle, queryString, sizeof(queryString), "DELETE FROM stock WHERE `Model` = '%d'", id);
        mysql_tquery(handle, queryString, "", "");

        format(string, sizeof(string), "{F0DF52}/dsremove: Owner %s removed car %d (%s) from the DS.", GetName(playerid), id, VehicleNames[id - 400]);
        submitToAdmins(string, -1);
        incarcarestock = 1;
    }
    return 1;
}

/*CMD:dsprice(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
		if(playerVariables[playerid][pAdminLevel] < 6) return S(playerid, -1, AdminOnly);

		new pret, id, stockk, sqlselect[300], eroare = 0, string[256];

		if(sscanf(params, "iii", id, pret, stockk)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/dsprice [model] [price] [stock]");
		
		mysql_format(handle, sqlselect, sizeof(sqlselect), "SELECT * FROM `stock` WHERE `Model`= '%d'", id);
		new Cache: verificare = mysql_query(handle, sqlselect);
		eroare = cache_get_row_count();
		if(eroare > 0)
		{
			for(new i = 0; i < eroare; i++)
			{
			    new idm;
				idm = cache_get_field_content_int(i, "ID");
			}
		}
		cache_delete(verificare);
		if(eroare < 1) return S(playerid, COLOR_GREY, "Nu exista acel model de vehicul in stock.");

		mysql_format(handle, sqlselect, sizeof(sqlselect), "UPDATE `stock` SET `Price`= '%d', `Stock`= '%d' WHERE `Model`= '%d'", pret, stockk, id);
  		mysql_tquery(handle, sqlselect, "","");

  		format(string, sizeof(string), "{F0DF52}/dsprice: Owner %s changed data for %s | Price: $%s | Stock: %d", GetName(playerid), VehicleNames[id - 400], NumberFormat(pret), stockk);
		submitToAdmins(string, -1);
		incarcarestock = 1;
 	}
 	return 1;
}*/
//--------------- Eveniment system ----------------

CMD:createlms(playerid, params[])
{
	new string[256], string2[256], prize, gun1, gun2, gun3, gun4, gun5;
	
	if(assetVariables[12][aAssetValue] == 1) return S(playerid, -1, "{BFFF8B}Aceasta comanda este blocata de un owner!");
	
	if(playerVariables[playerid][pLevel] >= 5)
	{
	    if(playerVariables[playerid][pWanted] > 0) return S(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda daca ai wanted!");
	    if(activeevent == 1) return S(playerid, COLOR_GREY, "There's already an active event.");
	    
	    if(sscanf(params, "iddddd", prize, gun1, gun2, gun3, gun4, gun5)) return S(playerid, COLOR_GREY, "Syntax: {FFFFFF}/createlms [prize] [gun 1] [gun 2] [gun 3] [gun 4] [gun 5]");
	    
	    if(prize >= assetVariables[11][aAssetValue])
	    {
	        if(playerVariables[playerid][pCash] >= prize)
			{
			    if(gun1 == 45 || gun1 == 46 || gun1 == 44 || gun1 == 43 || gun1 == 42 || gun1 == 40 || gun1 == 39 || gun1 == 37 || gun1 == 38 || gun1 > 46) return S(playerid, COLOR_GREY, "Invalid weapon [gun 1]");
	    		if(gun2 == 45 || gun2 == 46 || gun2 == 44 || gun2 == 43 || gun2 == 42 || gun2 == 40 || gun2 == 39 || gun2 == 37 || gun2 == 38 || gun2 > 46) return S(playerid, COLOR_GREY, "Invalid weapon [gun 2]");
	    		if(gun3 == 45 || gun3 == 46 || gun3 == 44 || gun3 == 43 || gun3 == 42 || gun3 == 40 || gun3 == 39 || gun3 == 37 || gun3 == 38 || gun3 > 46) return S(playerid, COLOR_GREY, "Invalid weapon [gun 3]");
	    		if(gun4 == 45 || gun4 == 46 || gun4 == 44 || gun4 == 43 || gun4 == 42 || gun4 == 40 || gun4 == 39 || gun4 == 37 || gun4 == 38 || gun4 > 46) return S(playerid, COLOR_GREY, "Invalid weapon [gun 4]");
	    		if(gun5 == 45 || gun5 == 46 || gun5 == 44 || gun5 == 43 || gun5 == 42 || gun5 == 40 || gun5 == 39 || gun5 == 37 || gun5 == 38 || gun5 > 46) return S(playerid, COLOR_GREY, "Invalid weapon [gun 5]");


	    		if(gun1 == 0 && gun2 == 0 && gun3 == 0 && gun4 == 0 && gun5 ==0) return S(playerid, -1, "Trebuie sa setezi macar o arma pentru eveniment!");
	    		if(gun1 == -1 && gun2 == -1 && gun3 == -1 && gun4 == -1 && gun5 == -1) return S(playerid, -1, "Trebuie sa setezi macar o arma pentru eveniment!");

			    playerVariables[playerid][pCash] -= prize;
				GivePlayerCash(playerid, -prize);
				Update(playerid, pCashx);
				
				activeevent = 1;
				
				playerVariables[playerid][pOrganizator] = 1;
				
				SetPlayerPos(playerid, -1415.1472,931.1946,1041.5313);
				SetPlayerInterior(playerid, 15);
				
				S(playerid, COLOR_BLUE, "Evenimentul a fost creeat!");
				
				format(string2,256,"%s a creeat un eveniment de tip LMS. Prize: $%s.", playerVariables[playerid][pUsername], NumberFormat(prize));
				chatlogs(string2, COLOR_YELLOW);
				
				
				mysql_format(handle, szLargeString, sizeof(szLargeString), "INSERT INTO playerlogs (text, type, ID) VALUES('%e', 'event', '%d')", string2, playerVariables[playerid][pID]);
				mysql_query(handle, szLargeString);
				
				Update3DTextLabelText(areap, 0xFFFFFFFF, "Event Place\n\nPress F to enter");
				areape = 1;
				
				gunlms1 = gun1;
				gunlms2 = gun2;
				gunlms3 = gun3;
				gunlms4 = gun4;
				gunlms5 = gun5;
				
				SetTimer("eventlms", 5000, false);
				
				foreach(Player, i)
				{
					if(playerVariables[i][pLimba] == 1)
					{
						format(string, sizeof(string), "(( EventBot: In arena 'Event Place' se organizeaza un eveniment de tip LMS sponsorizat de %s. Premiul este in valoare de $%s. ))", GetName(playerid), NumberFormat(prize));
						S(i, COLOR_LIGHT, string);
						
						S(i, COLOR_LIGHT, "(( EventBot: Pentru a ajunge la eveniment folositi /gps > Event Place. Portile arenei raman deschise 10 minute. ))");
					}
					if(playerVariables[i][pLimba] == 2)
					{
						format(string, sizeof(string), "(( EventBot: In arena 'Event Place' se organizeaza un eveniment de tip LMS sponsorizat de %s. Premiul este in valoare de $%s. ))", GetName(playerid), NumberFormat(prize));
						S(i, COLOR_LIGHT, string);

						S(i, COLOR_LIGHT, "(( EventBot: Pentru a ajunge la eveniment folositi /gps > Event Place. Portile arenei raman deschise 10 minute. ))");
					}
				}
			}
			else
			{
				if(playerVariables[playerid][pLimba] == 1)
				{
					S(playerid, COLOR_WHITE, "Nu ai banii necesari pentru a creea evenimentul!");
				}
				if(playerVariables[playerid][pLimba] == 2)
				{
					S(playerid, COLOR_WHITE, "You do not have the money to create the event!");
				}
			}
	    }
	    else
		{
			if(playerVariables[playerid][pLimba] == 1)
			{
				format(string, sizeof(string), "Pretul minim pentru a creea evenimentul trebuie sa fie $%s.", NumberFormat(assetVariables[11][aAssetValue]));
				S(playerid, COLOR_WHITE, string);
			}
			if(playerVariables[playerid][pLimba] == 2)
			{
				format(string, sizeof(string), "The minimum price to create an event must be $%s.", NumberFormat(assetVariables[11][aAssetValue]));
				S(playerid, COLOR_WHITE, string);
			}
		}
	}
	else
	{
		if(playerVariables[playerid][pLimba] == 1)
		{
		    S(playerid, COLOR_GREY, "Ai nevoie de minim level 5 pentru a creea un eveniment LMS.");
		}
  		if(playerVariables[playerid][pLimba] == 2)
		{
            S(playerid, COLOR_GREY, "You need at least level 5 to create an LMS event.");
		}
	}
	return 1;
}
	
	








